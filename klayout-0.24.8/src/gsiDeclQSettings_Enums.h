
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQSettings_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQSettings_Enums
#define _HDR_gsiDeclQSettings_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QSettings::Format>
class QSettings_Format_Enums : public QFlags<enum QSettings::Format> {
public:
  QSettings_Format_Enums () : m_flags () { }
  QSettings_Format_Enums (enum QSettings::Format v) : m_flags (v) { }
  QSettings_Format_Enums (const QFlags<enum QSettings::Format> &v) : m_flags (v) { }
  QFlags<enum QSettings::Format> flags () const { return m_flags; }
private:
  QFlags<QSettings::Format> m_flags;
};

//  Wrapper class for enum QSettings::Format
class QSettings_Format_Enum : public QSettings_Format_Enums {
public:
  QSettings_Format_Enum () { }
  QSettings_Format_Enum (enum QSettings::Format v) : QSettings_Format_Enums (v) { }
  enum QSettings::Format value () const { return (enum QSettings::Format) flags ().operator int (); }
};

//  Converter for QFlags<enum QSettings::Format>
template <>
struct Converter<QFlags<enum QSettings::Format> >
{
public:
  typedef QFlags<enum QSettings::Format> source_type;
  typedef QSettings_Format_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSettings::Format
template <>
struct Converter<enum QSettings::Format>
{
public:
  typedef enum QSettings::Format source_type;
  typedef QSettings_Format_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSettings::Scope>
class QSettings_Scope_Enums : public QFlags<enum QSettings::Scope> {
public:
  QSettings_Scope_Enums () : m_flags () { }
  QSettings_Scope_Enums (enum QSettings::Scope v) : m_flags (v) { }
  QSettings_Scope_Enums (const QFlags<enum QSettings::Scope> &v) : m_flags (v) { }
  QFlags<enum QSettings::Scope> flags () const { return m_flags; }
private:
  QFlags<QSettings::Scope> m_flags;
};

//  Wrapper class for enum QSettings::Scope
class QSettings_Scope_Enum : public QSettings_Scope_Enums {
public:
  QSettings_Scope_Enum () { }
  QSettings_Scope_Enum (enum QSettings::Scope v) : QSettings_Scope_Enums (v) { }
  enum QSettings::Scope value () const { return (enum QSettings::Scope) flags ().operator int (); }
};

//  Converter for QFlags<enum QSettings::Scope>
template <>
struct Converter<QFlags<enum QSettings::Scope> >
{
public:
  typedef QFlags<enum QSettings::Scope> source_type;
  typedef QSettings_Scope_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSettings::Scope
template <>
struct Converter<enum QSettings::Scope>
{
public:
  typedef enum QSettings::Scope source_type;
  typedef QSettings_Scope_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSettings::Status>
class QSettings_Status_Enums : public QFlags<enum QSettings::Status> {
public:
  QSettings_Status_Enums () : m_flags () { }
  QSettings_Status_Enums (enum QSettings::Status v) : m_flags (v) { }
  QSettings_Status_Enums (const QFlags<enum QSettings::Status> &v) : m_flags (v) { }
  QFlags<enum QSettings::Status> flags () const { return m_flags; }
private:
  QFlags<QSettings::Status> m_flags;
};

//  Wrapper class for enum QSettings::Status
class QSettings_Status_Enum : public QSettings_Status_Enums {
public:
  QSettings_Status_Enum () { }
  QSettings_Status_Enum (enum QSettings::Status v) : QSettings_Status_Enums (v) { }
  enum QSettings::Status value () const { return (enum QSettings::Status) flags ().operator int (); }
};

//  Converter for QFlags<enum QSettings::Status>
template <>
struct Converter<QFlags<enum QSettings::Status> >
{
public:
  typedef QFlags<enum QSettings::Status> source_type;
  typedef QSettings_Status_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSettings::Status
template <>
struct Converter<enum QSettings::Status>
{
public:
  typedef enum QSettings::Status source_type;
  typedef QSettings_Status_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ConnectionType>
class Qt_ConnectionType_Enums : public QFlags<enum Qt::ConnectionType> {
public:
  Qt_ConnectionType_Enums () : m_flags () { }
  Qt_ConnectionType_Enums (enum Qt::ConnectionType v) : m_flags (v) { }
  Qt_ConnectionType_Enums (const QFlags<enum Qt::ConnectionType> &v) : m_flags (v) { }
  QFlags<enum Qt::ConnectionType> flags () const { return m_flags; }
private:
  QFlags<Qt::ConnectionType> m_flags;
};

//  Wrapper class for enum Qt::ConnectionType
class Qt_ConnectionType_Enum : public Qt_ConnectionType_Enums {
public:
  Qt_ConnectionType_Enum () { }
  Qt_ConnectionType_Enum (enum Qt::ConnectionType v) : Qt_ConnectionType_Enums (v) { }
  enum Qt::ConnectionType value () const { return (enum Qt::ConnectionType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ConnectionType>
template <>
struct Converter<QFlags<enum Qt::ConnectionType> >
{
public:
  typedef QFlags<enum Qt::ConnectionType> source_type;
  typedef Qt_ConnectionType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ConnectionType
template <>
struct Converter<enum Qt::ConnectionType>
{
public:
  typedef enum Qt::ConnectionType source_type;
  typedef Qt_ConnectionType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
