
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQFormBuilder.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtDesigner.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQFormBuilder_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QFormBuilder

//  Constructor QFormBuilder::QFormBuilder()


static void _init_ctor_QFormBuilder_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QFormBuilder *> ();
}

static void _call_ctor_QFormBuilder_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QFormBuilder *> (new QFormBuilder ());
}

static qt_gsi::GenericStaticMethod *_create_ctor_QFormBuilder_0 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QFormBuilder::QFormBuilder()\nThis method creates an object of class QFormBuilder.", &_init_ctor_QFormBuilder_0, &_call_ctor_QFormBuilder_0);
}

// void QFormBuilder::addPluginPath(const QString &pluginPath)


static void _init_f_addPluginPath_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pluginPath");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_addPluginPath_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QFormBuilder *)cls)->addPluginPath (arg1);
}

static qt_gsi::GenericMethod *_create_f_addPluginPath_2025 ()
{
  return new qt_gsi::GenericMethod ("addPluginPath", "@brief Method void QFormBuilder::addPluginPath(const QString &pluginPath)\n", false, &_init_f_addPluginPath_2025, &_call_f_addPluginPath_2025);
}

// void QFormBuilder::clearPluginPaths()


static void _init_f_clearPluginPaths_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_clearPluginPaths_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QFormBuilder *)cls)->clearPluginPaths ();
}

static qt_gsi::GenericMethod *_create_f_clearPluginPaths_0 ()
{
  return new qt_gsi::GenericMethod ("clearPluginPaths", "@brief Method void QFormBuilder::clearPluginPaths()\n", false, &_init_f_clearPluginPaths_0, &_call_f_clearPluginPaths_0);
}

// QStringList QFormBuilder::pluginPaths()


static void _init_f_pluginPaths_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QStringList>::target_type > ();
}

static void _call_f_pluginPaths_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QStringList>::target_type > ((qt_gsi::Converter<QStringList>::target_type)qt_gsi::CppToQtAdaptor<QStringList>(((QFormBuilder *)cls)->pluginPaths ()));
}

static qt_gsi::GenericMethod *_create_f_pluginPaths_c0 ()
{
  return new qt_gsi::GenericMethod ("pluginPaths", "@brief Method QStringList QFormBuilder::pluginPaths()\n", true, &_init_f_pluginPaths_c0, &_call_f_pluginPaths_c0);
}

// void QFormBuilder::setPluginPath(const QStringList &pluginPaths)


static void _init_f_setPluginPath_2437 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pluginPaths");
  decl->add_arg<const qt_gsi::Converter<QStringList>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPluginPath_2437 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QStringList>::target_type & arg1 = args.read<const qt_gsi::Converter<QStringList>::target_type & > ();
  ((QFormBuilder *)cls)->setPluginPath (qt_gsi::QtToCppAdaptor<QStringList>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setPluginPath_2437 ()
{
  return new qt_gsi::GenericMethod ("setPluginPath", "@brief Method void QFormBuilder::setPluginPath(const QStringList &pluginPaths)\n", false, &_init_f_setPluginPath_2437, &_call_f_setPluginPath_2437);
}


namespace gsi
{
extern gsi::Class<QAbstractFormBuilder> decl_QAbstractFormBuilder;

gsi::Class<QFormBuilder> decl_QFormBuilder (decl_QAbstractFormBuilder, "QFormBuilder",
  gsi::Methods(_create_ctor_QFormBuilder_0 ()) +
  gsi::Methods(_create_f_addPluginPath_2025 ()) +
  gsi::Methods(_create_f_clearPluginPaths_0 ()) +
  gsi::Methods(_create_f_pluginPaths_c0 ()) +
  gsi::Methods(_create_f_setPluginPath_2437 ()),
  "@qt\n@brief Binding of QFormBuilder");

}

