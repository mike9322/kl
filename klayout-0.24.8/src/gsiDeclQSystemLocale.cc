
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQSystemLocale.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtCore.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQSystemLocale_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QSystemLocale

// QLocale QSystemLocale::fallbackLocale()


static void _init_f_fallbackLocale_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QLocale > ();
}

static void _call_f_fallbackLocale_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QLocale > ((QLocale)((QSystemLocale *)cls)->fallbackLocale ());
}

static qt_gsi::GenericMethod *_create_f_fallbackLocale_c0 ()
{
  return new qt_gsi::GenericMethod ("fallbackLocale", "@brief Method QLocale QSystemLocale::fallbackLocale()\n", true, &_init_f_fallbackLocale_c0, &_call_f_fallbackLocale_c0);
}

// QVariant QSystemLocale::query(QSystemLocale::QueryType type, QVariant in)


static void _init_f_query_c3956 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("type");
  decl->add_arg<const qt_gsi::Converter<QSystemLocale::QueryType>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("in");
  decl->add_arg<QVariant > (argspec_1);
  decl->set_return<QVariant > ();
}

static void _call_f_query_c3956 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QSystemLocale::QueryType>::target_type & arg1 = args.read<const qt_gsi::Converter<QSystemLocale::QueryType>::target_type & > ();
  QVariant arg2 = args.read<QVariant > ();
  ret.write<QVariant > ((QVariant)((QSystemLocale *)cls)->query (qt_gsi::QtToCppAdaptor<QSystemLocale::QueryType>(arg1).cref(), arg2));
}

static qt_gsi::GenericMethod *_create_f_query_c3956 ()
{
  return new qt_gsi::GenericMethod ("query", "@brief Method QVariant QSystemLocale::query(QSystemLocale::QueryType type, QVariant in)\n", true, &_init_f_query_c3956, &_call_f_query_c3956);
}

namespace gsi
{
gsi::Class<QSystemLocale> decl_QSystemLocale ("QSystemLocale_Native",
  gsi::Methods(_create_f_fallbackLocale_c0 ()) +
  gsi::Methods(_create_f_query_c3956 ()),
  "@hide\n@alias QSystemLocale");
}


class QSystemLocale_Adaptor : public QSystemLocale, public qt_gsi::QtObjectBase
{
public:

  virtual ~QSystemLocale_Adaptor();

  //  [adaptor ctor] QSystemLocale::QSystemLocale()
  QSystemLocale_Adaptor() : QSystemLocale()
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor impl] QLocale QSystemLocale::fallbackLocale()
  QLocale cbs_fallbackLocale_c0_0() const
  {
    return QSystemLocale::fallbackLocale();
  }

  virtual QLocale fallbackLocale() const
  {
    if (cb_fallbackLocale_c0_0.can_issue()) {
      return cb_fallbackLocale_c0_0.issue<QSystemLocale_Adaptor, QLocale>(&QSystemLocale_Adaptor::cbs_fallbackLocale_c0_0);
    } else {
      return QSystemLocale::fallbackLocale();
    }
  }

  //  [adaptor impl] QVariant QSystemLocale::query(QSystemLocale::QueryType type, QVariant in)
  QVariant cbs_query_c3956_0(const qt_gsi::Converter<QSystemLocale::QueryType>::target_type & type, QVariant in) const
  {
    return QSystemLocale::query(qt_gsi::QtToCppAdaptor<QSystemLocale::QueryType>(type).cref(), in);
  }

  virtual QVariant query(QSystemLocale::QueryType type, QVariant in) const
  {
    if (cb_query_c3956_0.can_issue()) {
      return cb_query_c3956_0.issue<QSystemLocale_Adaptor, QVariant, const qt_gsi::Converter<QSystemLocale::QueryType>::target_type &, QVariant>(&QSystemLocale_Adaptor::cbs_query_c3956_0, qt_gsi::CppToQtAdaptor<QSystemLocale::QueryType>(type), in);
    } else {
      return QSystemLocale::query(type, in);
    }
  }

  gsi::Callback cb_fallbackLocale_c0_0;
  gsi::Callback cb_query_c3956_0;
};

QSystemLocale_Adaptor::~QSystemLocale_Adaptor() { }

//  Constructor QSystemLocale::QSystemLocale() (adaptor class)

static void _init_ctor_QSystemLocale_Adaptor_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QSystemLocale_Adaptor *> ();
}

static void _call_ctor_QSystemLocale_Adaptor_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QSystemLocale_Adaptor *> (new QSystemLocale_Adaptor ());
}

static qt_gsi::GenericStaticMethod *_create_ctor_QSystemLocale_Adaptor_0 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QSystemLocale::QSystemLocale()\nThis method creates an object of class QSystemLocale.", &_init_ctor_QSystemLocale_Adaptor_0, &_call_ctor_QSystemLocale_Adaptor_0);
}

// QLocale QSystemLocale::fallbackLocale()

static void _init_cbs_fallbackLocale_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QLocale > ();
}

static void _call_cbs_fallbackLocale_c0_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QLocale > ((QLocale)((QSystemLocale_Adaptor *)cls)->cbs_fallbackLocale_c0_0 ());
}

static void _set_callback_cbs_fallbackLocale_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QSystemLocale_Adaptor *)cls)->cb_fallbackLocale_c0_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_fallbackLocale_c0_0 ()
{
  return new qt_gsi::GenericMethod ("fallbackLocale", "@hide", true, &_init_cbs_fallbackLocale_c0_0, &_call_cbs_fallbackLocale_c0_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_fallbackLocale_c0_0 ()
{
  return new qt_gsi::GenericMethod ("fallbackLocale", "@brief Virtual method QLocale QSystemLocale::fallbackLocale()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_fallbackLocale_c0_0, &_call_cbs_fallbackLocale_c0_0, &_set_callback_cbs_fallbackLocale_c0_0);
}


// QVariant QSystemLocale::query(QSystemLocale::QueryType type, QVariant in)

static void _init_cbs_query_c3956_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("type");
  decl->add_arg<const qt_gsi::Converter<QSystemLocale::QueryType>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("in");
  decl->add_arg<QVariant > (argspec_1);
  decl->set_return<QVariant > ();
}

static void _call_cbs_query_c3956_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QSystemLocale::QueryType>::target_type & arg1 = args.read<const qt_gsi::Converter<QSystemLocale::QueryType>::target_type & > ();
  QVariant arg2 = args.read<QVariant > ();
  ret.write<QVariant > ((QVariant)((QSystemLocale_Adaptor *)cls)->cbs_query_c3956_0 (arg1, arg2));
}

static void _set_callback_cbs_query_c3956_0 (void *cls, const gsi::Callback &cb)
{
  ((QSystemLocale_Adaptor *)cls)->cb_query_c3956_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_query_c3956_0 ()
{
  return new qt_gsi::GenericMethod ("query", "@hide", true, &_init_cbs_query_c3956_0, &_call_cbs_query_c3956_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_query_c3956_0 ()
{
  return new qt_gsi::GenericMethod ("query", "@brief Virtual method QVariant QSystemLocale::query(QSystemLocale::QueryType type, QVariant in)\nThis method can be reimplemented in a derived class.", true, &_init_cbs_query_c3956_0, &_call_cbs_query_c3956_0, &_set_callback_cbs_query_c3956_0);
}


namespace gsi
{

extern gsi::Class<QSystemLocale> decl_QSystemLocale;

gsi::Class<QSystemLocale_Adaptor> decl_QSystemLocale_Adaptor (decl_QSystemLocale, "QSystemLocale",
  gsi::Methods(_create_cbs_fallbackLocale_c0_0 ()) +
  gsi::Methods(_create_callback_cbs_fallbackLocale_c0_0 ()) +
  gsi::Methods(_create_cbs_query_c3956_0 ()) +
  gsi::Methods(_create_callback_cbs_query_c3956_0 ()) +
  gsi::Methods(_create_ctor_QSystemLocale_Adaptor_0 ()),
  "@qt\n@brief Binding of QSystemLocale");

}


//  Implementation of the enum wrapper class for QSystemLocale::QueryType
namespace qt_gsi
{

static QSystemLocale_QueryType_Enum *c_1_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::LanguageId); }
static QSystemLocale_QueryType_Enum *c_2_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::CountryId); }
static QSystemLocale_QueryType_Enum *c_3_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::DecimalPoint); }
static QSystemLocale_QueryType_Enum *c_4_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::GroupSeparator); }
static QSystemLocale_QueryType_Enum *c_5_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::ZeroDigit); }
static QSystemLocale_QueryType_Enum *c_6_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::NegativeSign); }
static QSystemLocale_QueryType_Enum *c_7_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::DateFormatLong); }
static QSystemLocale_QueryType_Enum *c_8_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::DateFormatShort); }
static QSystemLocale_QueryType_Enum *c_9_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::TimeFormatLong); }
static QSystemLocale_QueryType_Enum *c_10_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::TimeFormatShort); }
static QSystemLocale_QueryType_Enum *c_11_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::DayNameLong); }
static QSystemLocale_QueryType_Enum *c_12_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::DayNameShort); }
static QSystemLocale_QueryType_Enum *c_13_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::MonthNameLong); }
static QSystemLocale_QueryType_Enum *c_14_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::MonthNameShort); }
static QSystemLocale_QueryType_Enum *c_15_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::DateToStringLong); }
static QSystemLocale_QueryType_Enum *c_16_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::DateToStringShort); }
static QSystemLocale_QueryType_Enum *c_17_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::TimeToStringLong); }
static QSystemLocale_QueryType_Enum *c_18_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::TimeToStringShort); }
static QSystemLocale_QueryType_Enum *c_19_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::DateTimeFormatLong); }
static QSystemLocale_QueryType_Enum *c_20_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::DateTimeFormatShort); }
static QSystemLocale_QueryType_Enum *c_21_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::DateTimeToStringLong); }
static QSystemLocale_QueryType_Enum *c_22_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::DateTimeToStringShort); }
static QSystemLocale_QueryType_Enum *c_23_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::MeasurementSystem); }
static QSystemLocale_QueryType_Enum *c_24_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::PositiveSign); }
static QSystemLocale_QueryType_Enum *c_25_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::AMText); }
static QSystemLocale_QueryType_Enum *c_26_QSystemLocale_QueryType_Enum () { return new QSystemLocale_QueryType_Enum (QSystemLocale::PMText); }

static gsi::Methods mkdefs_QSystemLocale_QueryType () {
  return
    gsi::constant ("LanguageId", &qt_gsi::c_1_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::LanguageId") +
    gsi::constant ("CountryId", &qt_gsi::c_2_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::CountryId") +
    gsi::constant ("DecimalPoint", &qt_gsi::c_3_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::DecimalPoint") +
    gsi::constant ("GroupSeparator", &qt_gsi::c_4_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::GroupSeparator") +
    gsi::constant ("ZeroDigit", &qt_gsi::c_5_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::ZeroDigit") +
    gsi::constant ("NegativeSign", &qt_gsi::c_6_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::NegativeSign") +
    gsi::constant ("DateFormatLong", &qt_gsi::c_7_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::DateFormatLong") +
    gsi::constant ("DateFormatShort", &qt_gsi::c_8_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::DateFormatShort") +
    gsi::constant ("TimeFormatLong", &qt_gsi::c_9_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::TimeFormatLong") +
    gsi::constant ("TimeFormatShort", &qt_gsi::c_10_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::TimeFormatShort") +
    gsi::constant ("DayNameLong", &qt_gsi::c_11_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::DayNameLong") +
    gsi::constant ("DayNameShort", &qt_gsi::c_12_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::DayNameShort") +
    gsi::constant ("MonthNameLong", &qt_gsi::c_13_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::MonthNameLong") +
    gsi::constant ("MonthNameShort", &qt_gsi::c_14_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::MonthNameShort") +
    gsi::constant ("DateToStringLong", &qt_gsi::c_15_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::DateToStringLong") +
    gsi::constant ("DateToStringShort", &qt_gsi::c_16_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::DateToStringShort") +
    gsi::constant ("TimeToStringLong", &qt_gsi::c_17_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::TimeToStringLong") +
    gsi::constant ("TimeToStringShort", &qt_gsi::c_18_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::TimeToStringShort") +
    gsi::constant ("DateTimeFormatLong", &qt_gsi::c_19_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::DateTimeFormatLong") +
    gsi::constant ("DateTimeFormatShort", &qt_gsi::c_20_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::DateTimeFormatShort") +
    gsi::constant ("DateTimeToStringLong", &qt_gsi::c_21_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::DateTimeToStringLong") +
    gsi::constant ("DateTimeToStringShort", &qt_gsi::c_22_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::DateTimeToStringShort") +
    gsi::constant ("MeasurementSystem", &qt_gsi::c_23_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::MeasurementSystem") +
    gsi::constant ("PositiveSign", &qt_gsi::c_24_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::PositiveSign") +
    gsi::constant ("AMText", &qt_gsi::c_25_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::AMText") +
    gsi::constant ("PMText", &qt_gsi::c_26_QSystemLocale_QueryType_Enum, "@brief Enum constant QSystemLocale::PMText");
}

static std::string to_s_QSystemLocale_QueryType_Enum (const QSystemLocale_QueryType_Enum *e)
{
  if (e->value () == QSystemLocale::LanguageId) { return tl::sprintf ("LanguageId (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::CountryId) { return tl::sprintf ("CountryId (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::DecimalPoint) { return tl::sprintf ("DecimalPoint (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::GroupSeparator) { return tl::sprintf ("GroupSeparator (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::ZeroDigit) { return tl::sprintf ("ZeroDigit (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::NegativeSign) { return tl::sprintf ("NegativeSign (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::DateFormatLong) { return tl::sprintf ("DateFormatLong (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::DateFormatShort) { return tl::sprintf ("DateFormatShort (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::TimeFormatLong) { return tl::sprintf ("TimeFormatLong (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::TimeFormatShort) { return tl::sprintf ("TimeFormatShort (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::DayNameLong) { return tl::sprintf ("DayNameLong (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::DayNameShort) { return tl::sprintf ("DayNameShort (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::MonthNameLong) { return tl::sprintf ("MonthNameLong (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::MonthNameShort) { return tl::sprintf ("MonthNameShort (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::DateToStringLong) { return tl::sprintf ("DateToStringLong (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::DateToStringShort) { return tl::sprintf ("DateToStringShort (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::TimeToStringLong) { return tl::sprintf ("TimeToStringLong (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::TimeToStringShort) { return tl::sprintf ("TimeToStringShort (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::DateTimeFormatLong) { return tl::sprintf ("DateTimeFormatLong (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::DateTimeFormatShort) { return tl::sprintf ("DateTimeFormatShort (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::DateTimeToStringLong) { return tl::sprintf ("DateTimeToStringLong (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::DateTimeToStringShort) { return tl::sprintf ("DateTimeToStringShort (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::MeasurementSystem) { return tl::sprintf ("MeasurementSystem (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::PositiveSign) { return tl::sprintf ("PositiveSign (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::AMText) { return tl::sprintf ("AMText (%u)", (unsigned int) e->value ()); }
  if (e->value () == QSystemLocale::PMText) { return tl::sprintf ("PMText (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QSystemLocale_QueryType_Enum (const QSystemLocale_QueryType_Enum *e)
{
  return (unsigned int) e->value ();
}

static QSystemLocale_QueryType_Enum *from_i_QSystemLocale_QueryType_Enum (unsigned int i)
{
  return new QSystemLocale_QueryType_Enum ((QSystemLocale::QueryType) i);
}

static bool equalQSystemLocale_QueryType_Enum (const QSystemLocale_QueryType_Enum *e, QSystemLocale_QueryType_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QSystemLocale_QueryType_Enum (const QSystemLocale_QueryType_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QSystemLocale_QueryType_Enums oropQSystemLocale_QueryType_Enums (const QSystemLocale_QueryType_Enums *e, const QSystemLocale_QueryType_Enums &d)
{
  return e->flags () | d.flags ();
}

static QSystemLocale_QueryType_Enums andopQSystemLocale_QueryType_Enums (const QSystemLocale_QueryType_Enums *e, const QSystemLocale_QueryType_Enums &d)
{
  return e->flags () & d.flags ();
}

static QSystemLocale_QueryType_Enums xoropQSystemLocale_QueryType_Enums (const QSystemLocale_QueryType_Enums *e, const QSystemLocale_QueryType_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QSystemLocale_QueryType_Enums (const QSystemLocale_QueryType_Enums *e)
{
  std::string l;
  if (e->testFlag (QSystemLocale::LanguageId)) { if (!l.empty ()) l += "|"; l += "LanguageId"; }
  if (e->testFlag (QSystemLocale::CountryId)) { if (!l.empty ()) l += "|"; l += "CountryId"; }
  if (e->testFlag (QSystemLocale::DecimalPoint)) { if (!l.empty ()) l += "|"; l += "DecimalPoint"; }
  if (e->testFlag (QSystemLocale::GroupSeparator)) { if (!l.empty ()) l += "|"; l += "GroupSeparator"; }
  if (e->testFlag (QSystemLocale::ZeroDigit)) { if (!l.empty ()) l += "|"; l += "ZeroDigit"; }
  if (e->testFlag (QSystemLocale::NegativeSign)) { if (!l.empty ()) l += "|"; l += "NegativeSign"; }
  if (e->testFlag (QSystemLocale::DateFormatLong)) { if (!l.empty ()) l += "|"; l += "DateFormatLong"; }
  if (e->testFlag (QSystemLocale::DateFormatShort)) { if (!l.empty ()) l += "|"; l += "DateFormatShort"; }
  if (e->testFlag (QSystemLocale::TimeFormatLong)) { if (!l.empty ()) l += "|"; l += "TimeFormatLong"; }
  if (e->testFlag (QSystemLocale::TimeFormatShort)) { if (!l.empty ()) l += "|"; l += "TimeFormatShort"; }
  if (e->testFlag (QSystemLocale::DayNameLong)) { if (!l.empty ()) l += "|"; l += "DayNameLong"; }
  if (e->testFlag (QSystemLocale::DayNameShort)) { if (!l.empty ()) l += "|"; l += "DayNameShort"; }
  if (e->testFlag (QSystemLocale::MonthNameLong)) { if (!l.empty ()) l += "|"; l += "MonthNameLong"; }
  if (e->testFlag (QSystemLocale::MonthNameShort)) { if (!l.empty ()) l += "|"; l += "MonthNameShort"; }
  if (e->testFlag (QSystemLocale::DateToStringLong)) { if (!l.empty ()) l += "|"; l += "DateToStringLong"; }
  if (e->testFlag (QSystemLocale::DateToStringShort)) { if (!l.empty ()) l += "|"; l += "DateToStringShort"; }
  if (e->testFlag (QSystemLocale::TimeToStringLong)) { if (!l.empty ()) l += "|"; l += "TimeToStringLong"; }
  if (e->testFlag (QSystemLocale::TimeToStringShort)) { if (!l.empty ()) l += "|"; l += "TimeToStringShort"; }
  if (e->testFlag (QSystemLocale::DateTimeFormatLong)) { if (!l.empty ()) l += "|"; l += "DateTimeFormatLong"; }
  if (e->testFlag (QSystemLocale::DateTimeFormatShort)) { if (!l.empty ()) l += "|"; l += "DateTimeFormatShort"; }
  if (e->testFlag (QSystemLocale::DateTimeToStringLong)) { if (!l.empty ()) l += "|"; l += "DateTimeToStringLong"; }
  if (e->testFlag (QSystemLocale::DateTimeToStringShort)) { if (!l.empty ()) l += "|"; l += "DateTimeToStringShort"; }
  if (e->testFlag (QSystemLocale::MeasurementSystem)) { if (!l.empty ()) l += "|"; l += "MeasurementSystem"; }
  if (e->testFlag (QSystemLocale::PositiveSign)) { if (!l.empty ()) l += "|"; l += "PositiveSign"; }
  if (e->testFlag (QSystemLocale::AMText)) { if (!l.empty ()) l += "|"; l += "AMText"; }
  if (e->testFlag (QSystemLocale::PMText)) { if (!l.empty ()) l += "|"; l += "PMText"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QSystemLocale_QueryType_Enums (const QSystemLocale_QueryType_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QSystemLocale_QueryType_Enums (const QSystemLocale_QueryType_Enums *e, const QSystemLocale_QueryType_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QSystemLocale_QueryType_Enums> decl_QSystemLocale_QueryType_Enums ("QSystemLocale_QFlags_QueryType",
  gsi::method_ext ("|", &qt_gsi::oropQSystemLocale_QueryType_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQSystemLocale_QueryType_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQSystemLocale_QueryType_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QSystemLocale_QueryType_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QSystemLocale_QueryType_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QSystemLocale_QueryType_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QSystemLocale::QueryType> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QSystemLocale_QueryType_Enum> decl_QSystemLocale_QueryType_Enum (decl_QSystemLocale_QueryType_Enums, "QSystemLocale_QueryType",
  qt_gsi::mkdefs_QSystemLocale_QueryType () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QSystemLocale_QueryType_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QSystemLocale_QueryType_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQSystemLocale_QueryType_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QSystemLocale_QueryType_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QSystemLocale_QueryType_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QSystemLocale::QueryType enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QSystemLocale> inject_QSystemLocale_QueryType_Enum_in_parent (qt_gsi::mkdefs_QSystemLocale_QueryType ());
static gsi::ClassExt<QSystemLocale> decl_QSystemLocale_QueryType_Enum_as_child (decl_QSystemLocale_QueryType_Enum, "QueryType");

}

