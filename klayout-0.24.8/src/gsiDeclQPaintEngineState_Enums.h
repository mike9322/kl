
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQPaintEngineState_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQPaintEngineState_Enums
#define _HDR_gsiDeclQPaintEngineState_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QPaintEngine::DirtyFlag>
class QPaintEngine_DirtyFlag_Enums : public QFlags<enum QPaintEngine::DirtyFlag> {
public:
  QPaintEngine_DirtyFlag_Enums () : m_flags () { }
  QPaintEngine_DirtyFlag_Enums (enum QPaintEngine::DirtyFlag v) : m_flags (v) { }
  QPaintEngine_DirtyFlag_Enums (const QFlags<enum QPaintEngine::DirtyFlag> &v) : m_flags (v) { }
  QFlags<enum QPaintEngine::DirtyFlag> flags () const { return m_flags; }
private:
  QFlags<QPaintEngine::DirtyFlag> m_flags;
};

//  Wrapper class for enum QPaintEngine::DirtyFlag
class QPaintEngine_DirtyFlag_Enum : public QPaintEngine_DirtyFlag_Enums {
public:
  QPaintEngine_DirtyFlag_Enum () { }
  QPaintEngine_DirtyFlag_Enum (enum QPaintEngine::DirtyFlag v) : QPaintEngine_DirtyFlag_Enums (v) { }
  enum QPaintEngine::DirtyFlag value () const { return (enum QPaintEngine::DirtyFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum QPaintEngine::DirtyFlag>
template <>
struct Converter<QFlags<enum QPaintEngine::DirtyFlag> >
{
public:
  typedef QFlags<enum QPaintEngine::DirtyFlag> source_type;
  typedef QPaintEngine_DirtyFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QPaintEngine::DirtyFlag
template <>
struct Converter<enum QPaintEngine::DirtyFlag>
{
public:
  typedef enum QPaintEngine::DirtyFlag source_type;
  typedef QPaintEngine_DirtyFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QPainter::CompositionMode>
class QPainter_CompositionMode_Enums : public QFlags<enum QPainter::CompositionMode> {
public:
  QPainter_CompositionMode_Enums () : m_flags () { }
  QPainter_CompositionMode_Enums (enum QPainter::CompositionMode v) : m_flags (v) { }
  QPainter_CompositionMode_Enums (const QFlags<enum QPainter::CompositionMode> &v) : m_flags (v) { }
  QFlags<enum QPainter::CompositionMode> flags () const { return m_flags; }
private:
  QFlags<QPainter::CompositionMode> m_flags;
};

//  Wrapper class for enum QPainter::CompositionMode
class QPainter_CompositionMode_Enum : public QPainter_CompositionMode_Enums {
public:
  QPainter_CompositionMode_Enum () { }
  QPainter_CompositionMode_Enum (enum QPainter::CompositionMode v) : QPainter_CompositionMode_Enums (v) { }
  enum QPainter::CompositionMode value () const { return (enum QPainter::CompositionMode) flags ().operator int (); }
};

//  Converter for QFlags<enum QPainter::CompositionMode>
template <>
struct Converter<QFlags<enum QPainter::CompositionMode> >
{
public:
  typedef QFlags<enum QPainter::CompositionMode> source_type;
  typedef QPainter_CompositionMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QPainter::CompositionMode
template <>
struct Converter<enum QPainter::CompositionMode>
{
public:
  typedef enum QPainter::CompositionMode source_type;
  typedef QPainter_CompositionMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QPainter::RenderHint>
class QPainter_RenderHint_Enums : public QFlags<enum QPainter::RenderHint> {
public:
  QPainter_RenderHint_Enums () : m_flags () { }
  QPainter_RenderHint_Enums (enum QPainter::RenderHint v) : m_flags (v) { }
  QPainter_RenderHint_Enums (const QFlags<enum QPainter::RenderHint> &v) : m_flags (v) { }
  QFlags<enum QPainter::RenderHint> flags () const { return m_flags; }
private:
  QFlags<QPainter::RenderHint> m_flags;
};

//  Wrapper class for enum QPainter::RenderHint
class QPainter_RenderHint_Enum : public QPainter_RenderHint_Enums {
public:
  QPainter_RenderHint_Enum () { }
  QPainter_RenderHint_Enum (enum QPainter::RenderHint v) : QPainter_RenderHint_Enums (v) { }
  enum QPainter::RenderHint value () const { return (enum QPainter::RenderHint) flags ().operator int (); }
};

//  Converter for QFlags<enum QPainter::RenderHint>
template <>
struct Converter<QFlags<enum QPainter::RenderHint> >
{
public:
  typedef QFlags<enum QPainter::RenderHint> source_type;
  typedef QPainter_RenderHint_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QPainter::RenderHint
template <>
struct Converter<enum QPainter::RenderHint>
{
public:
  typedef enum QPainter::RenderHint source_type;
  typedef QPainter_RenderHint_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::BGMode>
class Qt_BGMode_Enums : public QFlags<enum Qt::BGMode> {
public:
  Qt_BGMode_Enums () : m_flags () { }
  Qt_BGMode_Enums (enum Qt::BGMode v) : m_flags (v) { }
  Qt_BGMode_Enums (const QFlags<enum Qt::BGMode> &v) : m_flags (v) { }
  QFlags<enum Qt::BGMode> flags () const { return m_flags; }
private:
  QFlags<Qt::BGMode> m_flags;
};

//  Wrapper class for enum Qt::BGMode
class Qt_BGMode_Enum : public Qt_BGMode_Enums {
public:
  Qt_BGMode_Enum () { }
  Qt_BGMode_Enum (enum Qt::BGMode v) : Qt_BGMode_Enums (v) { }
  enum Qt::BGMode value () const { return (enum Qt::BGMode) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::BGMode>
template <>
struct Converter<QFlags<enum Qt::BGMode> >
{
public:
  typedef QFlags<enum Qt::BGMode> source_type;
  typedef Qt_BGMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::BGMode
template <>
struct Converter<enum Qt::BGMode>
{
public:
  typedef enum Qt::BGMode source_type;
  typedef Qt_BGMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ClipOperation>
class Qt_ClipOperation_Enums : public QFlags<enum Qt::ClipOperation> {
public:
  Qt_ClipOperation_Enums () : m_flags () { }
  Qt_ClipOperation_Enums (enum Qt::ClipOperation v) : m_flags (v) { }
  Qt_ClipOperation_Enums (const QFlags<enum Qt::ClipOperation> &v) : m_flags (v) { }
  QFlags<enum Qt::ClipOperation> flags () const { return m_flags; }
private:
  QFlags<Qt::ClipOperation> m_flags;
};

//  Wrapper class for enum Qt::ClipOperation
class Qt_ClipOperation_Enum : public Qt_ClipOperation_Enums {
public:
  Qt_ClipOperation_Enum () { }
  Qt_ClipOperation_Enum (enum Qt::ClipOperation v) : Qt_ClipOperation_Enums (v) { }
  enum Qt::ClipOperation value () const { return (enum Qt::ClipOperation) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ClipOperation>
template <>
struct Converter<QFlags<enum Qt::ClipOperation> >
{
public:
  typedef QFlags<enum Qt::ClipOperation> source_type;
  typedef Qt_ClipOperation_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ClipOperation
template <>
struct Converter<enum Qt::ClipOperation>
{
public:
  typedef enum Qt::ClipOperation source_type;
  typedef Qt_ClipOperation_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
