
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQUrl_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQUrl_Enums
#define _HDR_gsiDeclQUrl_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QUrl::FormattingOption>
class QUrl_FormattingOption_Enums : public QFlags<enum QUrl::FormattingOption> {
public:
  QUrl_FormattingOption_Enums () : m_flags () { }
  QUrl_FormattingOption_Enums (enum QUrl::FormattingOption v) : m_flags (v) { }
  QUrl_FormattingOption_Enums (const QFlags<enum QUrl::FormattingOption> &v) : m_flags (v) { }
  QFlags<enum QUrl::FormattingOption> flags () const { return m_flags; }
private:
  QFlags<QUrl::FormattingOption> m_flags;
};

//  Wrapper class for enum QUrl::FormattingOption
class QUrl_FormattingOption_Enum : public QUrl_FormattingOption_Enums {
public:
  QUrl_FormattingOption_Enum () { }
  QUrl_FormattingOption_Enum (enum QUrl::FormattingOption v) : QUrl_FormattingOption_Enums (v) { }
  enum QUrl::FormattingOption value () const { return (enum QUrl::FormattingOption) flags ().operator int (); }
};

//  Converter for QFlags<enum QUrl::FormattingOption>
template <>
struct Converter<QFlags<enum QUrl::FormattingOption> >
{
public:
  typedef QFlags<enum QUrl::FormattingOption> source_type;
  typedef QUrl_FormattingOption_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QUrl::FormattingOption
template <>
struct Converter<enum QUrl::FormattingOption>
{
public:
  typedef enum QUrl::FormattingOption source_type;
  typedef QUrl_FormattingOption_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QUrl::ParsingMode>
class QUrl_ParsingMode_Enums : public QFlags<enum QUrl::ParsingMode> {
public:
  QUrl_ParsingMode_Enums () : m_flags () { }
  QUrl_ParsingMode_Enums (enum QUrl::ParsingMode v) : m_flags (v) { }
  QUrl_ParsingMode_Enums (const QFlags<enum QUrl::ParsingMode> &v) : m_flags (v) { }
  QFlags<enum QUrl::ParsingMode> flags () const { return m_flags; }
private:
  QFlags<QUrl::ParsingMode> m_flags;
};

//  Wrapper class for enum QUrl::ParsingMode
class QUrl_ParsingMode_Enum : public QUrl_ParsingMode_Enums {
public:
  QUrl_ParsingMode_Enum () { }
  QUrl_ParsingMode_Enum (enum QUrl::ParsingMode v) : QUrl_ParsingMode_Enums (v) { }
  enum QUrl::ParsingMode value () const { return (enum QUrl::ParsingMode) flags ().operator int (); }
};

//  Converter for QFlags<enum QUrl::ParsingMode>
template <>
struct Converter<QFlags<enum QUrl::ParsingMode> >
{
public:
  typedef QFlags<enum QUrl::ParsingMode> source_type;
  typedef QUrl_ParsingMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QUrl::ParsingMode
template <>
struct Converter<enum QUrl::ParsingMode>
{
public:
  typedef enum QUrl::ParsingMode source_type;
  typedef QUrl_ParsingMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
