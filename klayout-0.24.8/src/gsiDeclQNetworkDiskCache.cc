
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQNetworkDiskCache.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtNetwork.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQNetworkDiskCache_EventAdaptor.h"
#include "gsiDeclQNetworkDiskCache_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QNetworkDiskCache

//  get static meta object

static void _init_smo (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<const QMetaObject &> ();
}

static void _call_smo (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<const QMetaObject &> (QNetworkDiskCache::staticMetaObject);
}

static qt_gsi::GenericStaticMethod *_create_smo ()
{
  return new qt_gsi::GenericStaticMethod ("staticMetaObject", "@brief Obtains the static MetaObject for this class.", &_init_smo, &_call_smo);
}

// QString QNetworkDiskCache::cacheDirectory()


static void _init_f_cacheDirectory_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_cacheDirectory_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QNetworkDiskCache *)cls)->cacheDirectory ());
}

static qt_gsi::GenericMethod *_create_f_cacheDirectory_c0 ()
{
  return new qt_gsi::GenericMethod (":cacheDirectory", "@brief Method QString QNetworkDiskCache::cacheDirectory()\n", true, &_init_f_cacheDirectory_c0, &_call_f_cacheDirectory_c0);
}

// qint64 QNetworkDiskCache::cacheSize()


static void _init_f_cacheSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_f_cacheSize_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qint64 > ((qint64)((QNetworkDiskCache *)cls)->cacheSize ());
}

static qt_gsi::GenericMethod *_create_f_cacheSize_c0 ()
{
  return new qt_gsi::GenericMethod ("cacheSize", "@brief Method qint64 QNetworkDiskCache::cacheSize()\nThis is a reimplementation of QAbstractNetworkCache::cacheSize", true, &_init_f_cacheSize_c0, &_call_f_cacheSize_c0);
}

// void QNetworkDiskCache::clear()


static void _init_f_clear_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_clear_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QNetworkDiskCache *)cls)->clear ();
}

static qt_gsi::GenericMethod *_create_f_clear_0 ()
{
  return new qt_gsi::GenericMethod ("clear", "@brief Method void QNetworkDiskCache::clear()\nThis is a reimplementation of QAbstractNetworkCache::clear", false, &_init_f_clear_0, &_call_f_clear_0);
}

// QIODevice *QNetworkDiskCache::data(const QUrl &url)


static void _init_f_data_1701 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("url");
  decl->add_arg<const QUrl & > (argspec_0);
  decl->set_return<QIODevice * > ();
}

static void _call_f_data_1701 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QUrl &arg1 = args.read<const QUrl & > ();
  ret.write<QIODevice * > ((QIODevice *)((QNetworkDiskCache *)cls)->data (arg1));
}

static qt_gsi::GenericMethod *_create_f_data_1701 ()
{
  return new qt_gsi::GenericMethod ("data", "@brief Method QIODevice *QNetworkDiskCache::data(const QUrl &url)\nThis is a reimplementation of QAbstractNetworkCache::data", false, &_init_f_data_1701, &_call_f_data_1701);
}

// QNetworkCacheMetaData QNetworkDiskCache::fileMetaData(const QString &fileName)


static void _init_f_fileMetaData_c2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("fileName");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<QNetworkCacheMetaData > ();
}

static void _call_f_fileMetaData_c2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ret.write<QNetworkCacheMetaData > ((QNetworkCacheMetaData)((QNetworkDiskCache *)cls)->fileMetaData (arg1));
}

static qt_gsi::GenericMethod *_create_f_fileMetaData_c2025 ()
{
  return new qt_gsi::GenericMethod ("fileMetaData", "@brief Method QNetworkCacheMetaData QNetworkDiskCache::fileMetaData(const QString &fileName)\n", true, &_init_f_fileMetaData_c2025, &_call_f_fileMetaData_c2025);
}

// void QNetworkDiskCache::insert(QIODevice *device)


static void _init_f_insert_1447 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<QIODevice * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_insert_1447 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QIODevice *arg1 = args.read<QIODevice * > ();
  ((QNetworkDiskCache *)cls)->insert (arg1);
}

static qt_gsi::GenericMethod *_create_f_insert_1447 ()
{
  return new qt_gsi::GenericMethod ("insert", "@brief Method void QNetworkDiskCache::insert(QIODevice *device)\nThis is a reimplementation of QAbstractNetworkCache::insert", false, &_init_f_insert_1447, &_call_f_insert_1447);
}

// qint64 QNetworkDiskCache::maximumCacheSize()


static void _init_f_maximumCacheSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_f_maximumCacheSize_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qint64 > ((qint64)((QNetworkDiskCache *)cls)->maximumCacheSize ());
}

static qt_gsi::GenericMethod *_create_f_maximumCacheSize_c0 ()
{
  return new qt_gsi::GenericMethod (":maximumCacheSize", "@brief Method qint64 QNetworkDiskCache::maximumCacheSize()\n", true, &_init_f_maximumCacheSize_c0, &_call_f_maximumCacheSize_c0);
}

// QNetworkCacheMetaData QNetworkDiskCache::metaData(const QUrl &url)


static void _init_f_metaData_1701 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("url");
  decl->add_arg<const QUrl & > (argspec_0);
  decl->set_return<QNetworkCacheMetaData > ();
}

static void _call_f_metaData_1701 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QUrl &arg1 = args.read<const QUrl & > ();
  ret.write<QNetworkCacheMetaData > ((QNetworkCacheMetaData)((QNetworkDiskCache *)cls)->metaData (arg1));
}

static qt_gsi::GenericMethod *_create_f_metaData_1701 ()
{
  return new qt_gsi::GenericMethod ("metaData", "@brief Method QNetworkCacheMetaData QNetworkDiskCache::metaData(const QUrl &url)\nThis is a reimplementation of QAbstractNetworkCache::metaData", false, &_init_f_metaData_1701, &_call_f_metaData_1701);
}

// QIODevice *QNetworkDiskCache::prepare(const QNetworkCacheMetaData &metaData)


static void _init_f_prepare_3377 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("metaData");
  decl->add_arg<const QNetworkCacheMetaData & > (argspec_0);
  decl->set_return<QIODevice * > ();
}

static void _call_f_prepare_3377 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkCacheMetaData &arg1 = args.read<const QNetworkCacheMetaData & > ();
  ret.write<QIODevice * > ((QIODevice *)((QNetworkDiskCache *)cls)->prepare (arg1));
}

static qt_gsi::GenericMethod *_create_f_prepare_3377 ()
{
  return new qt_gsi::GenericMethod ("prepare", "@brief Method QIODevice *QNetworkDiskCache::prepare(const QNetworkCacheMetaData &metaData)\nThis is a reimplementation of QAbstractNetworkCache::prepare", false, &_init_f_prepare_3377, &_call_f_prepare_3377);
}

// bool QNetworkDiskCache::remove(const QUrl &url)


static void _init_f_remove_1701 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("url");
  decl->add_arg<const QUrl & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_remove_1701 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QUrl &arg1 = args.read<const QUrl & > ();
  ret.write<bool > ((bool)((QNetworkDiskCache *)cls)->remove (arg1));
}

static qt_gsi::GenericMethod *_create_f_remove_1701 ()
{
  return new qt_gsi::GenericMethod ("remove", "@brief Method bool QNetworkDiskCache::remove(const QUrl &url)\nThis is a reimplementation of QAbstractNetworkCache::remove", false, &_init_f_remove_1701, &_call_f_remove_1701);
}

// void QNetworkDiskCache::setCacheDirectory(const QString &cacheDir)


static void _init_f_setCacheDirectory_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("cacheDir");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setCacheDirectory_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QNetworkDiskCache *)cls)->setCacheDirectory (arg1);
}

static qt_gsi::GenericMethod *_create_f_setCacheDirectory_2025 ()
{
  return new qt_gsi::GenericMethod ("setCacheDirectory|cacheDirectory=", "@brief Method void QNetworkDiskCache::setCacheDirectory(const QString &cacheDir)\n", false, &_init_f_setCacheDirectory_2025, &_call_f_setCacheDirectory_2025);
}

// void QNetworkDiskCache::setMaximumCacheSize(qint64 size)


static void _init_f_setMaximumCacheSize_986 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("size");
  decl->add_arg<qint64 > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setMaximumCacheSize_986 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  qint64 arg1 = args.read<qint64 > ();
  ((QNetworkDiskCache *)cls)->setMaximumCacheSize (arg1);
}

static qt_gsi::GenericMethod *_create_f_setMaximumCacheSize_986 ()
{
  return new qt_gsi::GenericMethod ("setMaximumCacheSize|maximumCacheSize=", "@brief Method void QNetworkDiskCache::setMaximumCacheSize(qint64 size)\n", false, &_init_f_setMaximumCacheSize_986, &_call_f_setMaximumCacheSize_986);
}

// void QNetworkDiskCache::updateMetaData(const QNetworkCacheMetaData &metaData)


static void _init_f_updateMetaData_3377 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("metaData");
  decl->add_arg<const QNetworkCacheMetaData & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_updateMetaData_3377 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkCacheMetaData &arg1 = args.read<const QNetworkCacheMetaData & > ();
  ((QNetworkDiskCache *)cls)->updateMetaData (arg1);
}

static qt_gsi::GenericMethod *_create_f_updateMetaData_3377 ()
{
  return new qt_gsi::GenericMethod ("updateMetaData", "@brief Method void QNetworkDiskCache::updateMetaData(const QNetworkCacheMetaData &metaData)\nThis is a reimplementation of QAbstractNetworkCache::updateMetaData", false, &_init_f_updateMetaData_3377, &_call_f_updateMetaData_3377);
}

// static QString QNetworkDiskCache::tr(const char *s, const char *c)


static void _init_f_tr_3354 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c", true, "0");
  decl->add_arg<const char * > (argspec_1);
  decl->set_return<QString > ();
}

static void _call_f_tr_3354 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args ? args.read<const char * > () : (const char *)(0);
  ret.write<QString > ((QString)QNetworkDiskCache::tr (arg1, arg2));
}

static qt_gsi::GenericStaticMethod *_create_f_tr_3354 ()
{
  return new qt_gsi::GenericStaticMethod ("tr", "@brief Static method QString QNetworkDiskCache::tr(const char *s, const char *c)\nThis method is static and can be called without an instance.", &_init_f_tr_3354, &_call_f_tr_3354);
}

// static QString QNetworkDiskCache::tr(const char *s, const char *c, int n)


static void _init_f_tr_4013 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c");
  decl->add_arg<const char * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("n");
  decl->add_arg<int > (argspec_2);
  decl->set_return<QString > ();
}

static void _call_f_tr_4013 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args.read<const char * > ();
  int arg3 = args.read<int > ();
  ret.write<QString > ((QString)QNetworkDiskCache::tr (arg1, arg2, arg3));
}

static qt_gsi::GenericStaticMethod *_create_f_tr_4013 ()
{
  return new qt_gsi::GenericStaticMethod ("tr", "@brief Static method QString QNetworkDiskCache::tr(const char *s, const char *c, int n)\nThis method is static and can be called without an instance.", &_init_f_tr_4013, &_call_f_tr_4013);
}

// static QString QNetworkDiskCache::trUtf8(const char *s, const char *c)


static void _init_f_trUtf8_3354 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c", true, "0");
  decl->add_arg<const char * > (argspec_1);
  decl->set_return<QString > ();
}

static void _call_f_trUtf8_3354 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args ? args.read<const char * > () : (const char *)(0);
  ret.write<QString > ((QString)QNetworkDiskCache::trUtf8 (arg1, arg2));
}

static qt_gsi::GenericStaticMethod *_create_f_trUtf8_3354 ()
{
  return new qt_gsi::GenericStaticMethod ("trUtf8", "@brief Static method QString QNetworkDiskCache::trUtf8(const char *s, const char *c)\nThis method is static and can be called without an instance.", &_init_f_trUtf8_3354, &_call_f_trUtf8_3354);
}

// static QString QNetworkDiskCache::trUtf8(const char *s, const char *c, int n)


static void _init_f_trUtf8_4013 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c");
  decl->add_arg<const char * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("n");
  decl->add_arg<int > (argspec_2);
  decl->set_return<QString > ();
}

static void _call_f_trUtf8_4013 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args.read<const char * > ();
  int arg3 = args.read<int > ();
  ret.write<QString > ((QString)QNetworkDiskCache::trUtf8 (arg1, arg2, arg3));
}

static qt_gsi::GenericStaticMethod *_create_f_trUtf8_4013 ()
{
  return new qt_gsi::GenericStaticMethod ("trUtf8", "@brief Static method QString QNetworkDiskCache::trUtf8(const char *s, const char *c, int n)\nThis method is static and can be called without an instance.", &_init_f_trUtf8_4013, &_call_f_trUtf8_4013);
}

static qt_gsi::QObjectConnector<QNetworkDiskCache, QNetworkDiskCache_EventAdaptor> ea_QNetworkDiskCache;

namespace gsi
{
extern gsi::Class<QAbstractNetworkCache> decl_QAbstractNetworkCache;

gsi::Class<QNetworkDiskCache> decl_QNetworkDiskCache (ea_QNetworkDiskCache, decl_QAbstractNetworkCache, "QNetworkDiskCache_Native",
  gsi::Methods(_create_smo ()) +
  gsi::Methods(_create_f_cacheDirectory_c0 ()) +
  gsi::Methods(_create_f_cacheSize_c0 ()) +
  gsi::Methods(_create_f_clear_0 ()) +
  gsi::Methods(_create_f_data_1701 ()) +
  gsi::Methods(_create_f_fileMetaData_c2025 ()) +
  gsi::Methods(_create_f_insert_1447 ()) +
  gsi::Methods(_create_f_maximumCacheSize_c0 ()) +
  gsi::Methods(_create_f_metaData_1701 ()) +
  gsi::Methods(_create_f_prepare_3377 ()) +
  gsi::Methods(_create_f_remove_1701 ()) +
  gsi::Methods(_create_f_setCacheDirectory_2025 ()) +
  gsi::Methods(_create_f_setMaximumCacheSize_986 ()) +
  gsi::Methods(_create_f_updateMetaData_3377 ()) +
  qt_gsi::qt_signal<QNetworkDiskCache, QNetworkDiskCache_EventAdaptor, QObject *> ("destroyed", &QNetworkDiskCache_EventAdaptor::destroyed_e_1302, gsi::arg("arg1"), "@brief Signal declaration for QNetworkDiskCache::destroyed(QObject *)\nYou can bind a procedure to this signal.") +
  gsi::Methods(_create_f_tr_3354 ()) +
  gsi::Methods(_create_f_tr_4013 ()) +
  gsi::Methods(_create_f_trUtf8_3354 ()) +
  gsi::Methods(_create_f_trUtf8_4013 ()),
  "@hide\n@alias QNetworkDiskCache");
}


class QNetworkDiskCache_Adaptor : public QNetworkDiskCache, public qt_gsi::QtObjectBase
{
public:

  virtual ~QNetworkDiskCache_Adaptor();

  //  [adaptor ctor] QNetworkDiskCache::QNetworkDiskCache(QObject *parent)
  QNetworkDiskCache_Adaptor() : QNetworkDiskCache()
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QNetworkDiskCache::QNetworkDiskCache(QObject *parent)
  QNetworkDiskCache_Adaptor(QObject *parent) : QNetworkDiskCache(parent)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  int QNetworkDiskCache::receivers(const char *signal)
  int fp_QNetworkDiskCache_receivers_c1731 (const char *signal) const {
    return QNetworkDiskCache::receivers(signal);
  }

  //  QObject *QNetworkDiskCache::sender()
  QObject * fp_QNetworkDiskCache_sender_c0 () const {
    return QNetworkDiskCache::sender();
  }

  //  [adaptor impl] qint64 QNetworkDiskCache::cacheSize()
  qint64 cbs_cacheSize_c0_0() const
  {
    return QNetworkDiskCache::cacheSize();
  }

  virtual qint64 cacheSize() const
  {
    if (cb_cacheSize_c0_0.can_issue()) {
      return cb_cacheSize_c0_0.issue<QNetworkDiskCache_Adaptor, qint64>(&QNetworkDiskCache_Adaptor::cbs_cacheSize_c0_0);
    } else {
      return QNetworkDiskCache::cacheSize();
    }
  }

  //  [adaptor impl] void QNetworkDiskCache::clear()
  void cbs_clear_0_0()
  {
    QNetworkDiskCache::clear();
  }

  virtual void clear()
  {
    if (cb_clear_0_0.can_issue()) {
      cb_clear_0_0.issue<QNetworkDiskCache_Adaptor>(&QNetworkDiskCache_Adaptor::cbs_clear_0_0);
    } else {
      QNetworkDiskCache::clear();
    }
  }

  //  [adaptor impl] QIODevice *QNetworkDiskCache::data(const QUrl &url)
  QIODevice * cbs_data_1701_0(const QUrl &url)
  {
    return QNetworkDiskCache::data(url);
  }

  virtual QIODevice * data(const QUrl &url)
  {
    if (cb_data_1701_0.can_issue()) {
      return cb_data_1701_0.issue<QNetworkDiskCache_Adaptor, QIODevice *, const QUrl &>(&QNetworkDiskCache_Adaptor::cbs_data_1701_0, url);
    } else {
      return QNetworkDiskCache::data(url);
    }
  }

  //  [adaptor impl] bool QNetworkDiskCache::event(QEvent *)
  bool cbs_event_1217_0(QEvent *arg1)
  {
    return QNetworkDiskCache::event(arg1);
  }

  virtual bool event(QEvent *arg1)
  {
    if (cb_event_1217_0.can_issue()) {
      return cb_event_1217_0.issue<QNetworkDiskCache_Adaptor, bool, QEvent *>(&QNetworkDiskCache_Adaptor::cbs_event_1217_0, arg1);
    } else {
      return QNetworkDiskCache::event(arg1);
    }
  }

  //  [adaptor impl] bool QNetworkDiskCache::eventFilter(QObject *, QEvent *)
  bool cbs_eventFilter_2411_0(QObject *arg1, QEvent *arg2)
  {
    return QNetworkDiskCache::eventFilter(arg1, arg2);
  }

  virtual bool eventFilter(QObject *arg1, QEvent *arg2)
  {
    if (cb_eventFilter_2411_0.can_issue()) {
      return cb_eventFilter_2411_0.issue<QNetworkDiskCache_Adaptor, bool, QObject *, QEvent *>(&QNetworkDiskCache_Adaptor::cbs_eventFilter_2411_0, arg1, arg2);
    } else {
      return QNetworkDiskCache::eventFilter(arg1, arg2);
    }
  }

  //  [adaptor impl] void QNetworkDiskCache::insert(QIODevice *device)
  void cbs_insert_1447_0(QIODevice *device)
  {
    QNetworkDiskCache::insert(device);
  }

  virtual void insert(QIODevice *device)
  {
    if (cb_insert_1447_0.can_issue()) {
      cb_insert_1447_0.issue<QNetworkDiskCache_Adaptor, QIODevice *>(&QNetworkDiskCache_Adaptor::cbs_insert_1447_0, device);
    } else {
      QNetworkDiskCache::insert(device);
    }
  }

  //  [adaptor impl] QNetworkCacheMetaData QNetworkDiskCache::metaData(const QUrl &url)
  QNetworkCacheMetaData cbs_metaData_1701_0(const QUrl &url)
  {
    return QNetworkDiskCache::metaData(url);
  }

  virtual QNetworkCacheMetaData metaData(const QUrl &url)
  {
    if (cb_metaData_1701_0.can_issue()) {
      return cb_metaData_1701_0.issue<QNetworkDiskCache_Adaptor, QNetworkCacheMetaData, const QUrl &>(&QNetworkDiskCache_Adaptor::cbs_metaData_1701_0, url);
    } else {
      return QNetworkDiskCache::metaData(url);
    }
  }

  //  [adaptor impl] QIODevice *QNetworkDiskCache::prepare(const QNetworkCacheMetaData &metaData)
  QIODevice * cbs_prepare_3377_0(const QNetworkCacheMetaData &metaData)
  {
    return QNetworkDiskCache::prepare(metaData);
  }

  virtual QIODevice * prepare(const QNetworkCacheMetaData &metaData)
  {
    if (cb_prepare_3377_0.can_issue()) {
      return cb_prepare_3377_0.issue<QNetworkDiskCache_Adaptor, QIODevice *, const QNetworkCacheMetaData &>(&QNetworkDiskCache_Adaptor::cbs_prepare_3377_0, metaData);
    } else {
      return QNetworkDiskCache::prepare(metaData);
    }
  }

  //  [adaptor impl] bool QNetworkDiskCache::remove(const QUrl &url)
  bool cbs_remove_1701_0(const QUrl &url)
  {
    return QNetworkDiskCache::remove(url);
  }

  virtual bool remove(const QUrl &url)
  {
    if (cb_remove_1701_0.can_issue()) {
      return cb_remove_1701_0.issue<QNetworkDiskCache_Adaptor, bool, const QUrl &>(&QNetworkDiskCache_Adaptor::cbs_remove_1701_0, url);
    } else {
      return QNetworkDiskCache::remove(url);
    }
  }

  //  [adaptor impl] void QNetworkDiskCache::updateMetaData(const QNetworkCacheMetaData &metaData)
  void cbs_updateMetaData_3377_0(const QNetworkCacheMetaData &metaData)
  {
    QNetworkDiskCache::updateMetaData(metaData);
  }

  virtual void updateMetaData(const QNetworkCacheMetaData &metaData)
  {
    if (cb_updateMetaData_3377_0.can_issue()) {
      cb_updateMetaData_3377_0.issue<QNetworkDiskCache_Adaptor, const QNetworkCacheMetaData &>(&QNetworkDiskCache_Adaptor::cbs_updateMetaData_3377_0, metaData);
    } else {
      QNetworkDiskCache::updateMetaData(metaData);
    }
  }

  //  [adaptor impl] void QNetworkDiskCache::childEvent(QChildEvent *)
  void cbs_childEvent_1701_0(QChildEvent *arg1)
  {
    QNetworkDiskCache::childEvent(arg1);
  }

  virtual void childEvent(QChildEvent *arg1)
  {
    if (cb_childEvent_1701_0.can_issue()) {
      cb_childEvent_1701_0.issue<QNetworkDiskCache_Adaptor, QChildEvent *>(&QNetworkDiskCache_Adaptor::cbs_childEvent_1701_0, arg1);
    } else {
      QNetworkDiskCache::childEvent(arg1);
    }
  }

  //  [adaptor impl] void QNetworkDiskCache::customEvent(QEvent *)
  void cbs_customEvent_1217_0(QEvent *arg1)
  {
    QNetworkDiskCache::customEvent(arg1);
  }

  virtual void customEvent(QEvent *arg1)
  {
    if (cb_customEvent_1217_0.can_issue()) {
      cb_customEvent_1217_0.issue<QNetworkDiskCache_Adaptor, QEvent *>(&QNetworkDiskCache_Adaptor::cbs_customEvent_1217_0, arg1);
    } else {
      QNetworkDiskCache::customEvent(arg1);
    }
  }

  //  [adaptor impl] void QNetworkDiskCache::disconnectNotify(const char *signal)
  void cbs_disconnectNotify_1731_0(const char *signal)
  {
    QNetworkDiskCache::disconnectNotify(signal);
  }

  virtual void disconnectNotify(const char *signal)
  {
    if (cb_disconnectNotify_1731_0.can_issue()) {
      cb_disconnectNotify_1731_0.issue<QNetworkDiskCache_Adaptor, const char *>(&QNetworkDiskCache_Adaptor::cbs_disconnectNotify_1731_0, signal);
    } else {
      QNetworkDiskCache::disconnectNotify(signal);
    }
  }

  //  [adaptor impl] qint64 QNetworkDiskCache::expire()
  qint64 cbs_expire_0_0()
  {
    return QNetworkDiskCache::expire();
  }

  virtual qint64 expire()
  {
    if (cb_expire_0_0.can_issue()) {
      return cb_expire_0_0.issue<QNetworkDiskCache_Adaptor, qint64>(&QNetworkDiskCache_Adaptor::cbs_expire_0_0);
    } else {
      return QNetworkDiskCache::expire();
    }
  }

  //  [adaptor impl] void QNetworkDiskCache::timerEvent(QTimerEvent *)
  void cbs_timerEvent_1730_0(QTimerEvent *arg1)
  {
    QNetworkDiskCache::timerEvent(arg1);
  }

  virtual void timerEvent(QTimerEvent *arg1)
  {
    if (cb_timerEvent_1730_0.can_issue()) {
      cb_timerEvent_1730_0.issue<QNetworkDiskCache_Adaptor, QTimerEvent *>(&QNetworkDiskCache_Adaptor::cbs_timerEvent_1730_0, arg1);
    } else {
      QNetworkDiskCache::timerEvent(arg1);
    }
  }

  gsi::Callback cb_cacheSize_c0_0;
  gsi::Callback cb_clear_0_0;
  gsi::Callback cb_data_1701_0;
  gsi::Callback cb_event_1217_0;
  gsi::Callback cb_eventFilter_2411_0;
  gsi::Callback cb_insert_1447_0;
  gsi::Callback cb_metaData_1701_0;
  gsi::Callback cb_prepare_3377_0;
  gsi::Callback cb_remove_1701_0;
  gsi::Callback cb_updateMetaData_3377_0;
  gsi::Callback cb_childEvent_1701_0;
  gsi::Callback cb_customEvent_1217_0;
  gsi::Callback cb_disconnectNotify_1731_0;
  gsi::Callback cb_expire_0_0;
  gsi::Callback cb_timerEvent_1730_0;
};

QNetworkDiskCache_Adaptor::~QNetworkDiskCache_Adaptor() { }

//  Constructor QNetworkDiskCache::QNetworkDiskCache(QObject *parent) (adaptor class)

static void _init_ctor_QNetworkDiskCache_Adaptor_1302 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("parent", true, "0");
  decl->add_arg<QObject * > (argspec_0);
  decl->set_return_new<QNetworkDiskCache_Adaptor *> ();
}

static void _call_ctor_QNetworkDiskCache_Adaptor_1302 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QObject *arg1 = args ? args.read<QObject * > () : (QObject *)(0);
  ret.write<QNetworkDiskCache_Adaptor *> (new QNetworkDiskCache_Adaptor (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QNetworkDiskCache_Adaptor_1302 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNetworkDiskCache::QNetworkDiskCache(QObject *parent)\nThis method creates an object of class QNetworkDiskCache.", &_init_ctor_QNetworkDiskCache_Adaptor_1302, &_call_ctor_QNetworkDiskCache_Adaptor_1302);
}

// int QNetworkDiskCache::receivers(const char *signal)

static void _init_fp_receivers_c1731 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("signal");
  decl->add_arg<const char * > (argspec_0);
  decl->set_return<int > ();
}

static void _call_fp_receivers_c1731 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  ret.write<int > ((int)((QNetworkDiskCache_Adaptor *)cls)->fp_QNetworkDiskCache_receivers_c1731 (arg1));
}

static qt_gsi::GenericMethod*_create_fp_receivers_c1731 ()
{
  return new qt_gsi::GenericMethod("*receivers", "@brief Method int QNetworkDiskCache::receivers(const char *signal)\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_receivers_c1731, &_call_fp_receivers_c1731);
}


// QObject *QNetworkDiskCache::sender()

static void _init_fp_sender_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QObject * > ();
}

static void _call_fp_sender_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QObject * > ((QObject *)((QNetworkDiskCache_Adaptor *)cls)->fp_QNetworkDiskCache_sender_c0 ());
}

static qt_gsi::GenericMethod*_create_fp_sender_c0 ()
{
  return new qt_gsi::GenericMethod("*sender", "@brief Method QObject *QNetworkDiskCache::sender()\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_sender_c0, &_call_fp_sender_c0);
}


// qint64 QNetworkDiskCache::cacheSize()

static void _init_cbs_cacheSize_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_cbs_cacheSize_c0_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qint64 > ((qint64)((QNetworkDiskCache_Adaptor *)cls)->cbs_cacheSize_c0_0 ());
}

static void _set_callback_cbs_cacheSize_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QNetworkDiskCache_Adaptor *)cls)->cb_cacheSize_c0_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_cacheSize_c0_0 ()
{
  return new qt_gsi::GenericMethod ("cacheSize", "@hide", true, &_init_cbs_cacheSize_c0_0, &_call_cbs_cacheSize_c0_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_cacheSize_c0_0 ()
{
  return new qt_gsi::GenericMethod ("cacheSize", "@brief Virtual method qint64 QNetworkDiskCache::cacheSize()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_cacheSize_c0_0, &_call_cbs_cacheSize_c0_0, &_set_callback_cbs_cacheSize_c0_0);
}


// void QNetworkDiskCache::clear()

static void _init_cbs_clear_0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_cbs_clear_0_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QNetworkDiskCache_Adaptor *)cls)->cbs_clear_0_0 ();
}

static void _set_callback_cbs_clear_0_0 (void *cls, const gsi::Callback &cb)
{
  ((QNetworkDiskCache_Adaptor *)cls)->cb_clear_0_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_clear_0_0 ()
{
  return new qt_gsi::GenericMethod ("clear", "@hide", false, &_init_cbs_clear_0_0, &_call_cbs_clear_0_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_clear_0_0 ()
{
  return new qt_gsi::GenericMethod ("clear", "@brief Virtual method void QNetworkDiskCache::clear()\nThis method can be reimplemented in a derived class.", false, &_init_cbs_clear_0_0, &_call_cbs_clear_0_0, &_set_callback_cbs_clear_0_0);
}


// QIODevice *QNetworkDiskCache::data(const QUrl &url)

static void _init_cbs_data_1701_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("url");
  decl->add_arg<const QUrl & > (argspec_0);
  decl->set_return<QIODevice * > ();
}

static void _call_cbs_data_1701_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QUrl &arg1 = args.read<const QUrl & > ();
  ret.write<QIODevice * > ((QIODevice *)((QNetworkDiskCache_Adaptor *)cls)->cbs_data_1701_0 (arg1));
}

static void _set_callback_cbs_data_1701_0 (void *cls, const gsi::Callback &cb)
{
  ((QNetworkDiskCache_Adaptor *)cls)->cb_data_1701_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_data_1701_0 ()
{
  return new qt_gsi::GenericMethod ("data", "@hide", false, &_init_cbs_data_1701_0, &_call_cbs_data_1701_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_data_1701_0 ()
{
  return new qt_gsi::GenericMethod ("data", "@brief Virtual method QIODevice *QNetworkDiskCache::data(const QUrl &url)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_data_1701_0, &_call_cbs_data_1701_0, &_set_callback_cbs_data_1701_0);
}


// bool QNetworkDiskCache::event(QEvent *)

static void _init_cbs_event_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_event_1217_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QEvent *arg1 = args.read<QEvent * > ();
  ret.write<bool > ((bool)((QNetworkDiskCache_Adaptor *)cls)->cbs_event_1217_0 (arg1));
}

static void _set_callback_cbs_event_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QNetworkDiskCache_Adaptor *)cls)->cb_event_1217_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_event_1217_0 ()
{
  return new qt_gsi::GenericMethod ("event", "@hide", false, &_init_cbs_event_1217_0, &_call_cbs_event_1217_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_event_1217_0 ()
{
  return new qt_gsi::GenericMethod ("event", "@brief Virtual method bool QNetworkDiskCache::event(QEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_event_1217_0, &_call_cbs_event_1217_0, &_set_callback_cbs_event_1217_0);
}


// bool QNetworkDiskCache::eventFilter(QObject *, QEvent *)

static void _init_cbs_eventFilter_2411_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QObject * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("arg2");
  decl->add_arg<QEvent * > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_cbs_eventFilter_2411_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QObject *arg1 = args.read<QObject * > ();
  QEvent *arg2 = args.read<QEvent * > ();
  ret.write<bool > ((bool)((QNetworkDiskCache_Adaptor *)cls)->cbs_eventFilter_2411_0 (arg1, arg2));
}

static void _set_callback_cbs_eventFilter_2411_0 (void *cls, const gsi::Callback &cb)
{
  ((QNetworkDiskCache_Adaptor *)cls)->cb_eventFilter_2411_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_eventFilter_2411_0 ()
{
  return new qt_gsi::GenericMethod ("eventFilter", "@hide", false, &_init_cbs_eventFilter_2411_0, &_call_cbs_eventFilter_2411_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_eventFilter_2411_0 ()
{
  return new qt_gsi::GenericMethod ("eventFilter", "@brief Virtual method bool QNetworkDiskCache::eventFilter(QObject *, QEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_eventFilter_2411_0, &_call_cbs_eventFilter_2411_0, &_set_callback_cbs_eventFilter_2411_0);
}


// void QNetworkDiskCache::insert(QIODevice *device)

static void _init_cbs_insert_1447_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<QIODevice * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_insert_1447_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QIODevice *arg1 = args.read<QIODevice * > ();
  ((QNetworkDiskCache_Adaptor *)cls)->cbs_insert_1447_0 (arg1);
}

static void _set_callback_cbs_insert_1447_0 (void *cls, const gsi::Callback &cb)
{
  ((QNetworkDiskCache_Adaptor *)cls)->cb_insert_1447_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_insert_1447_0 ()
{
  return new qt_gsi::GenericMethod ("insert", "@hide", false, &_init_cbs_insert_1447_0, &_call_cbs_insert_1447_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_insert_1447_0 ()
{
  return new qt_gsi::GenericMethod ("insert", "@brief Virtual method void QNetworkDiskCache::insert(QIODevice *device)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_insert_1447_0, &_call_cbs_insert_1447_0, &_set_callback_cbs_insert_1447_0);
}


// QNetworkCacheMetaData QNetworkDiskCache::metaData(const QUrl &url)

static void _init_cbs_metaData_1701_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("url");
  decl->add_arg<const QUrl & > (argspec_0);
  decl->set_return<QNetworkCacheMetaData > ();
}

static void _call_cbs_metaData_1701_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QUrl &arg1 = args.read<const QUrl & > ();
  ret.write<QNetworkCacheMetaData > ((QNetworkCacheMetaData)((QNetworkDiskCache_Adaptor *)cls)->cbs_metaData_1701_0 (arg1));
}

static void _set_callback_cbs_metaData_1701_0 (void *cls, const gsi::Callback &cb)
{
  ((QNetworkDiskCache_Adaptor *)cls)->cb_metaData_1701_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_metaData_1701_0 ()
{
  return new qt_gsi::GenericMethod ("metaData", "@hide", false, &_init_cbs_metaData_1701_0, &_call_cbs_metaData_1701_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_metaData_1701_0 ()
{
  return new qt_gsi::GenericMethod ("metaData", "@brief Virtual method QNetworkCacheMetaData QNetworkDiskCache::metaData(const QUrl &url)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_metaData_1701_0, &_call_cbs_metaData_1701_0, &_set_callback_cbs_metaData_1701_0);
}


// QIODevice *QNetworkDiskCache::prepare(const QNetworkCacheMetaData &metaData)

static void _init_cbs_prepare_3377_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("metaData");
  decl->add_arg<const QNetworkCacheMetaData & > (argspec_0);
  decl->set_return<QIODevice * > ();
}

static void _call_cbs_prepare_3377_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkCacheMetaData &arg1 = args.read<const QNetworkCacheMetaData & > ();
  ret.write<QIODevice * > ((QIODevice *)((QNetworkDiskCache_Adaptor *)cls)->cbs_prepare_3377_0 (arg1));
}

static void _set_callback_cbs_prepare_3377_0 (void *cls, const gsi::Callback &cb)
{
  ((QNetworkDiskCache_Adaptor *)cls)->cb_prepare_3377_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_prepare_3377_0 ()
{
  return new qt_gsi::GenericMethod ("prepare", "@hide", false, &_init_cbs_prepare_3377_0, &_call_cbs_prepare_3377_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_prepare_3377_0 ()
{
  return new qt_gsi::GenericMethod ("prepare", "@brief Virtual method QIODevice *QNetworkDiskCache::prepare(const QNetworkCacheMetaData &metaData)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_prepare_3377_0, &_call_cbs_prepare_3377_0, &_set_callback_cbs_prepare_3377_0);
}


// bool QNetworkDiskCache::remove(const QUrl &url)

static void _init_cbs_remove_1701_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("url");
  decl->add_arg<const QUrl & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_remove_1701_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QUrl &arg1 = args.read<const QUrl & > ();
  ret.write<bool > ((bool)((QNetworkDiskCache_Adaptor *)cls)->cbs_remove_1701_0 (arg1));
}

static void _set_callback_cbs_remove_1701_0 (void *cls, const gsi::Callback &cb)
{
  ((QNetworkDiskCache_Adaptor *)cls)->cb_remove_1701_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_remove_1701_0 ()
{
  return new qt_gsi::GenericMethod ("remove", "@hide", false, &_init_cbs_remove_1701_0, &_call_cbs_remove_1701_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_remove_1701_0 ()
{
  return new qt_gsi::GenericMethod ("remove", "@brief Virtual method bool QNetworkDiskCache::remove(const QUrl &url)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_remove_1701_0, &_call_cbs_remove_1701_0, &_set_callback_cbs_remove_1701_0);
}


// void QNetworkDiskCache::updateMetaData(const QNetworkCacheMetaData &metaData)

static void _init_cbs_updateMetaData_3377_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("metaData");
  decl->add_arg<const QNetworkCacheMetaData & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_updateMetaData_3377_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkCacheMetaData &arg1 = args.read<const QNetworkCacheMetaData & > ();
  ((QNetworkDiskCache_Adaptor *)cls)->cbs_updateMetaData_3377_0 (arg1);
}

static void _set_callback_cbs_updateMetaData_3377_0 (void *cls, const gsi::Callback &cb)
{
  ((QNetworkDiskCache_Adaptor *)cls)->cb_updateMetaData_3377_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_updateMetaData_3377_0 ()
{
  return new qt_gsi::GenericMethod ("updateMetaData", "@hide", false, &_init_cbs_updateMetaData_3377_0, &_call_cbs_updateMetaData_3377_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_updateMetaData_3377_0 ()
{
  return new qt_gsi::GenericMethod ("updateMetaData", "@brief Virtual method void QNetworkDiskCache::updateMetaData(const QNetworkCacheMetaData &metaData)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_updateMetaData_3377_0, &_call_cbs_updateMetaData_3377_0, &_set_callback_cbs_updateMetaData_3377_0);
}


// void QNetworkDiskCache::childEvent(QChildEvent *)

static void _init_cbs_childEvent_1701_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QChildEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_childEvent_1701_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QChildEvent *arg1 = args.read<QChildEvent * > ();
  ((QNetworkDiskCache_Adaptor *)cls)->cbs_childEvent_1701_0 (arg1);
}

static void _set_callback_cbs_childEvent_1701_0 (void *cls, const gsi::Callback &cb)
{
  ((QNetworkDiskCache_Adaptor *)cls)->cb_childEvent_1701_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_childEvent_1701_0 ()
{
  return new qt_gsi::GenericMethod ("*childEvent", "@hide", false, &_init_cbs_childEvent_1701_0, &_call_cbs_childEvent_1701_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_childEvent_1701_0 ()
{
  return new qt_gsi::GenericMethod ("*childEvent", "@brief Virtual method void QNetworkDiskCache::childEvent(QChildEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_childEvent_1701_0, &_call_cbs_childEvent_1701_0, &_set_callback_cbs_childEvent_1701_0);
}


// void QNetworkDiskCache::customEvent(QEvent *)

static void _init_cbs_customEvent_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_customEvent_1217_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QEvent *arg1 = args.read<QEvent * > ();
  ((QNetworkDiskCache_Adaptor *)cls)->cbs_customEvent_1217_0 (arg1);
}

static void _set_callback_cbs_customEvent_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QNetworkDiskCache_Adaptor *)cls)->cb_customEvent_1217_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_customEvent_1217_0 ()
{
  return new qt_gsi::GenericMethod ("*customEvent", "@hide", false, &_init_cbs_customEvent_1217_0, &_call_cbs_customEvent_1217_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_customEvent_1217_0 ()
{
  return new qt_gsi::GenericMethod ("*customEvent", "@brief Virtual method void QNetworkDiskCache::customEvent(QEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_customEvent_1217_0, &_call_cbs_customEvent_1217_0, &_set_callback_cbs_customEvent_1217_0);
}


// void QNetworkDiskCache::disconnectNotify(const char *signal)

static void _init_cbs_disconnectNotify_1731_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("signal");
  decl->add_arg<const char * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_disconnectNotify_1731_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  ((QNetworkDiskCache_Adaptor *)cls)->cbs_disconnectNotify_1731_0 (arg1);
}

static void _set_callback_cbs_disconnectNotify_1731_0 (void *cls, const gsi::Callback &cb)
{
  ((QNetworkDiskCache_Adaptor *)cls)->cb_disconnectNotify_1731_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_disconnectNotify_1731_0 ()
{
  return new qt_gsi::GenericMethod ("*disconnectNotify", "@hide", false, &_init_cbs_disconnectNotify_1731_0, &_call_cbs_disconnectNotify_1731_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_disconnectNotify_1731_0 ()
{
  return new qt_gsi::GenericMethod ("*disconnectNotify", "@brief Virtual method void QNetworkDiskCache::disconnectNotify(const char *signal)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_disconnectNotify_1731_0, &_call_cbs_disconnectNotify_1731_0, &_set_callback_cbs_disconnectNotify_1731_0);
}


// qint64 QNetworkDiskCache::expire()

static void _init_cbs_expire_0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_cbs_expire_0_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qint64 > ((qint64)((QNetworkDiskCache_Adaptor *)cls)->cbs_expire_0_0 ());
}

static void _set_callback_cbs_expire_0_0 (void *cls, const gsi::Callback &cb)
{
  ((QNetworkDiskCache_Adaptor *)cls)->cb_expire_0_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_expire_0_0 ()
{
  return new qt_gsi::GenericMethod ("*expire", "@hide", false, &_init_cbs_expire_0_0, &_call_cbs_expire_0_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_expire_0_0 ()
{
  return new qt_gsi::GenericMethod ("*expire", "@brief Virtual method qint64 QNetworkDiskCache::expire()\nThis method can be reimplemented in a derived class.", false, &_init_cbs_expire_0_0, &_call_cbs_expire_0_0, &_set_callback_cbs_expire_0_0);
}


// void QNetworkDiskCache::timerEvent(QTimerEvent *)

static void _init_cbs_timerEvent_1730_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QTimerEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_timerEvent_1730_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QTimerEvent *arg1 = args.read<QTimerEvent * > ();
  ((QNetworkDiskCache_Adaptor *)cls)->cbs_timerEvent_1730_0 (arg1);
}

static void _set_callback_cbs_timerEvent_1730_0 (void *cls, const gsi::Callback &cb)
{
  ((QNetworkDiskCache_Adaptor *)cls)->cb_timerEvent_1730_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_timerEvent_1730_0 ()
{
  return new qt_gsi::GenericMethod ("*timerEvent", "@hide", false, &_init_cbs_timerEvent_1730_0, &_call_cbs_timerEvent_1730_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_timerEvent_1730_0 ()
{
  return new qt_gsi::GenericMethod ("*timerEvent", "@brief Virtual method void QNetworkDiskCache::timerEvent(QTimerEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_timerEvent_1730_0, &_call_cbs_timerEvent_1730_0, &_set_callback_cbs_timerEvent_1730_0);
}


namespace gsi
{

extern gsi::Class<QNetworkDiskCache> decl_QNetworkDiskCache;

gsi::Class<QNetworkDiskCache_Adaptor> decl_QNetworkDiskCache_Adaptor (decl_QNetworkDiskCache, "QNetworkDiskCache",
  gsi::Methods(_create_fp_receivers_c1731 ()) +
  gsi::Methods(_create_fp_sender_c0 ()) +
  gsi::Methods(_create_cbs_cacheSize_c0_0 ()) +
  gsi::Methods(_create_callback_cbs_cacheSize_c0_0 ()) +
  gsi::Methods(_create_cbs_clear_0_0 ()) +
  gsi::Methods(_create_callback_cbs_clear_0_0 ()) +
  gsi::Methods(_create_cbs_data_1701_0 ()) +
  gsi::Methods(_create_callback_cbs_data_1701_0 ()) +
  gsi::Methods(_create_cbs_event_1217_0 ()) +
  gsi::Methods(_create_callback_cbs_event_1217_0 ()) +
  gsi::Methods(_create_cbs_eventFilter_2411_0 ()) +
  gsi::Methods(_create_callback_cbs_eventFilter_2411_0 ()) +
  gsi::Methods(_create_cbs_insert_1447_0 ()) +
  gsi::Methods(_create_callback_cbs_insert_1447_0 ()) +
  gsi::Methods(_create_cbs_metaData_1701_0 ()) +
  gsi::Methods(_create_callback_cbs_metaData_1701_0 ()) +
  gsi::Methods(_create_cbs_prepare_3377_0 ()) +
  gsi::Methods(_create_callback_cbs_prepare_3377_0 ()) +
  gsi::Methods(_create_cbs_remove_1701_0 ()) +
  gsi::Methods(_create_callback_cbs_remove_1701_0 ()) +
  gsi::Methods(_create_cbs_updateMetaData_3377_0 ()) +
  gsi::Methods(_create_callback_cbs_updateMetaData_3377_0 ()) +
  gsi::Methods(_create_cbs_childEvent_1701_0 ()) +
  gsi::Methods(_create_callback_cbs_childEvent_1701_0 ()) +
  gsi::Methods(_create_cbs_customEvent_1217_0 ()) +
  gsi::Methods(_create_callback_cbs_customEvent_1217_0 ()) +
  gsi::Methods(_create_cbs_disconnectNotify_1731_0 ()) +
  gsi::Methods(_create_callback_cbs_disconnectNotify_1731_0 ()) +
  gsi::Methods(_create_cbs_expire_0_0 ()) +
  gsi::Methods(_create_callback_cbs_expire_0_0 ()) +
  gsi::Methods(_create_cbs_timerEvent_1730_0 ()) +
  gsi::Methods(_create_callback_cbs_timerEvent_1730_0 ()) +
  gsi::Methods(_create_ctor_QNetworkDiskCache_Adaptor_1302 ()),
  "@qt\n@brief Binding of QNetworkDiskCache");

}

