
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQFormLayout_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQFormLayout_Enums
#define _HDR_gsiDeclQFormLayout_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QFormLayout::FieldGrowthPolicy>
class QFormLayout_FieldGrowthPolicy_Enums : public QFlags<enum QFormLayout::FieldGrowthPolicy> {
public:
  QFormLayout_FieldGrowthPolicy_Enums () : m_flags () { }
  QFormLayout_FieldGrowthPolicy_Enums (enum QFormLayout::FieldGrowthPolicy v) : m_flags (v) { }
  QFormLayout_FieldGrowthPolicy_Enums (const QFlags<enum QFormLayout::FieldGrowthPolicy> &v) : m_flags (v) { }
  QFlags<enum QFormLayout::FieldGrowthPolicy> flags () const { return m_flags; }
private:
  QFlags<QFormLayout::FieldGrowthPolicy> m_flags;
};

//  Wrapper class for enum QFormLayout::FieldGrowthPolicy
class QFormLayout_FieldGrowthPolicy_Enum : public QFormLayout_FieldGrowthPolicy_Enums {
public:
  QFormLayout_FieldGrowthPolicy_Enum () { }
  QFormLayout_FieldGrowthPolicy_Enum (enum QFormLayout::FieldGrowthPolicy v) : QFormLayout_FieldGrowthPolicy_Enums (v) { }
  enum QFormLayout::FieldGrowthPolicy value () const { return (enum QFormLayout::FieldGrowthPolicy) flags ().operator int (); }
};

//  Converter for QFlags<enum QFormLayout::FieldGrowthPolicy>
template <>
struct Converter<QFlags<enum QFormLayout::FieldGrowthPolicy> >
{
public:
  typedef QFlags<enum QFormLayout::FieldGrowthPolicy> source_type;
  typedef QFormLayout_FieldGrowthPolicy_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QFormLayout::FieldGrowthPolicy
template <>
struct Converter<enum QFormLayout::FieldGrowthPolicy>
{
public:
  typedef enum QFormLayout::FieldGrowthPolicy source_type;
  typedef QFormLayout_FieldGrowthPolicy_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QFormLayout::ItemRole>
class QFormLayout_ItemRole_Enums : public QFlags<enum QFormLayout::ItemRole> {
public:
  QFormLayout_ItemRole_Enums () : m_flags () { }
  QFormLayout_ItemRole_Enums (enum QFormLayout::ItemRole v) : m_flags (v) { }
  QFormLayout_ItemRole_Enums (const QFlags<enum QFormLayout::ItemRole> &v) : m_flags (v) { }
  QFlags<enum QFormLayout::ItemRole> flags () const { return m_flags; }
private:
  QFlags<QFormLayout::ItemRole> m_flags;
};

//  Wrapper class for enum QFormLayout::ItemRole
class QFormLayout_ItemRole_Enum : public QFormLayout_ItemRole_Enums {
public:
  QFormLayout_ItemRole_Enum () { }
  QFormLayout_ItemRole_Enum (enum QFormLayout::ItemRole v) : QFormLayout_ItemRole_Enums (v) { }
  enum QFormLayout::ItemRole value () const { return (enum QFormLayout::ItemRole) flags ().operator int (); }
};

//  Converter for QFlags<enum QFormLayout::ItemRole>
template <>
struct Converter<QFlags<enum QFormLayout::ItemRole> >
{
public:
  typedef QFlags<enum QFormLayout::ItemRole> source_type;
  typedef QFormLayout_ItemRole_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QFormLayout::ItemRole
template <>
struct Converter<enum QFormLayout::ItemRole>
{
public:
  typedef enum QFormLayout::ItemRole source_type;
  typedef QFormLayout_ItemRole_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QFormLayout::RowWrapPolicy>
class QFormLayout_RowWrapPolicy_Enums : public QFlags<enum QFormLayout::RowWrapPolicy> {
public:
  QFormLayout_RowWrapPolicy_Enums () : m_flags () { }
  QFormLayout_RowWrapPolicy_Enums (enum QFormLayout::RowWrapPolicy v) : m_flags (v) { }
  QFormLayout_RowWrapPolicy_Enums (const QFlags<enum QFormLayout::RowWrapPolicy> &v) : m_flags (v) { }
  QFlags<enum QFormLayout::RowWrapPolicy> flags () const { return m_flags; }
private:
  QFlags<QFormLayout::RowWrapPolicy> m_flags;
};

//  Wrapper class for enum QFormLayout::RowWrapPolicy
class QFormLayout_RowWrapPolicy_Enum : public QFormLayout_RowWrapPolicy_Enums {
public:
  QFormLayout_RowWrapPolicy_Enum () { }
  QFormLayout_RowWrapPolicy_Enum (enum QFormLayout::RowWrapPolicy v) : QFormLayout_RowWrapPolicy_Enums (v) { }
  enum QFormLayout::RowWrapPolicy value () const { return (enum QFormLayout::RowWrapPolicy) flags ().operator int (); }
};

//  Converter for QFlags<enum QFormLayout::RowWrapPolicy>
template <>
struct Converter<QFlags<enum QFormLayout::RowWrapPolicy> >
{
public:
  typedef QFlags<enum QFormLayout::RowWrapPolicy> source_type;
  typedef QFormLayout_RowWrapPolicy_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QFormLayout::RowWrapPolicy
template <>
struct Converter<enum QFormLayout::RowWrapPolicy>
{
public:
  typedef enum QFormLayout::RowWrapPolicy source_type;
  typedef QFormLayout_RowWrapPolicy_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QLayout::SizeConstraint>
class QLayout_SizeConstraint_Enums : public QFlags<enum QLayout::SizeConstraint> {
public:
  QLayout_SizeConstraint_Enums () : m_flags () { }
  QLayout_SizeConstraint_Enums (enum QLayout::SizeConstraint v) : m_flags (v) { }
  QLayout_SizeConstraint_Enums (const QFlags<enum QLayout::SizeConstraint> &v) : m_flags (v) { }
  QFlags<enum QLayout::SizeConstraint> flags () const { return m_flags; }
private:
  QFlags<QLayout::SizeConstraint> m_flags;
};

//  Wrapper class for enum QLayout::SizeConstraint
class QLayout_SizeConstraint_Enum : public QLayout_SizeConstraint_Enums {
public:
  QLayout_SizeConstraint_Enum () { }
  QLayout_SizeConstraint_Enum (enum QLayout::SizeConstraint v) : QLayout_SizeConstraint_Enums (v) { }
  enum QLayout::SizeConstraint value () const { return (enum QLayout::SizeConstraint) flags ().operator int (); }
};

//  Converter for QFlags<enum QLayout::SizeConstraint>
template <>
struct Converter<QFlags<enum QLayout::SizeConstraint> >
{
public:
  typedef QFlags<enum QLayout::SizeConstraint> source_type;
  typedef QLayout_SizeConstraint_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QLayout::SizeConstraint
template <>
struct Converter<enum QLayout::SizeConstraint>
{
public:
  typedef enum QLayout::SizeConstraint source_type;
  typedef QLayout_SizeConstraint_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSizePolicy::ControlType>
class QSizePolicy_ControlType_Enums : public QFlags<enum QSizePolicy::ControlType> {
public:
  QSizePolicy_ControlType_Enums () : m_flags () { }
  QSizePolicy_ControlType_Enums (enum QSizePolicy::ControlType v) : m_flags (v) { }
  QSizePolicy_ControlType_Enums (const QFlags<enum QSizePolicy::ControlType> &v) : m_flags (v) { }
  QFlags<enum QSizePolicy::ControlType> flags () const { return m_flags; }
private:
  QFlags<QSizePolicy::ControlType> m_flags;
};

//  Wrapper class for enum QSizePolicy::ControlType
class QSizePolicy_ControlType_Enum : public QSizePolicy_ControlType_Enums {
public:
  QSizePolicy_ControlType_Enum () { }
  QSizePolicy_ControlType_Enum (enum QSizePolicy::ControlType v) : QSizePolicy_ControlType_Enums (v) { }
  enum QSizePolicy::ControlType value () const { return (enum QSizePolicy::ControlType) flags ().operator int (); }
};

//  Converter for QFlags<enum QSizePolicy::ControlType>
template <>
struct Converter<QFlags<enum QSizePolicy::ControlType> >
{
public:
  typedef QFlags<enum QSizePolicy::ControlType> source_type;
  typedef QSizePolicy_ControlType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSizePolicy::ControlType
template <>
struct Converter<enum QSizePolicy::ControlType>
{
public:
  typedef enum QSizePolicy::ControlType source_type;
  typedef QSizePolicy_ControlType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::AlignmentFlag>
class Qt_AlignmentFlag_Enums : public QFlags<enum Qt::AlignmentFlag> {
public:
  Qt_AlignmentFlag_Enums () : m_flags () { }
  Qt_AlignmentFlag_Enums (enum Qt::AlignmentFlag v) : m_flags (v) { }
  Qt_AlignmentFlag_Enums (const QFlags<enum Qt::AlignmentFlag> &v) : m_flags (v) { }
  QFlags<enum Qt::AlignmentFlag> flags () const { return m_flags; }
private:
  QFlags<Qt::AlignmentFlag> m_flags;
};

//  Wrapper class for enum Qt::AlignmentFlag
class Qt_AlignmentFlag_Enum : public Qt_AlignmentFlag_Enums {
public:
  Qt_AlignmentFlag_Enum () { }
  Qt_AlignmentFlag_Enum (enum Qt::AlignmentFlag v) : Qt_AlignmentFlag_Enums (v) { }
  enum Qt::AlignmentFlag value () const { return (enum Qt::AlignmentFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::AlignmentFlag>
template <>
struct Converter<QFlags<enum Qt::AlignmentFlag> >
{
public:
  typedef QFlags<enum Qt::AlignmentFlag> source_type;
  typedef Qt_AlignmentFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::AlignmentFlag
template <>
struct Converter<enum Qt::AlignmentFlag>
{
public:
  typedef enum Qt::AlignmentFlag source_type;
  typedef Qt_AlignmentFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ConnectionType>
class Qt_ConnectionType_Enums : public QFlags<enum Qt::ConnectionType> {
public:
  Qt_ConnectionType_Enums () : m_flags () { }
  Qt_ConnectionType_Enums (enum Qt::ConnectionType v) : m_flags (v) { }
  Qt_ConnectionType_Enums (const QFlags<enum Qt::ConnectionType> &v) : m_flags (v) { }
  QFlags<enum Qt::ConnectionType> flags () const { return m_flags; }
private:
  QFlags<Qt::ConnectionType> m_flags;
};

//  Wrapper class for enum Qt::ConnectionType
class Qt_ConnectionType_Enum : public Qt_ConnectionType_Enums {
public:
  Qt_ConnectionType_Enum () { }
  Qt_ConnectionType_Enum (enum Qt::ConnectionType v) : Qt_ConnectionType_Enums (v) { }
  enum Qt::ConnectionType value () const { return (enum Qt::ConnectionType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ConnectionType>
template <>
struct Converter<QFlags<enum Qt::ConnectionType> >
{
public:
  typedef QFlags<enum Qt::ConnectionType> source_type;
  typedef Qt_ConnectionType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ConnectionType
template <>
struct Converter<enum Qt::ConnectionType>
{
public:
  typedef enum Qt::ConnectionType source_type;
  typedef Qt_ConnectionType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::Orientation>
class Qt_Orientation_Enums : public QFlags<enum Qt::Orientation> {
public:
  Qt_Orientation_Enums () : m_flags () { }
  Qt_Orientation_Enums (enum Qt::Orientation v) : m_flags (v) { }
  Qt_Orientation_Enums (const QFlags<enum Qt::Orientation> &v) : m_flags (v) { }
  QFlags<enum Qt::Orientation> flags () const { return m_flags; }
private:
  QFlags<Qt::Orientation> m_flags;
};

//  Wrapper class for enum Qt::Orientation
class Qt_Orientation_Enum : public Qt_Orientation_Enums {
public:
  Qt_Orientation_Enum () { }
  Qt_Orientation_Enum (enum Qt::Orientation v) : Qt_Orientation_Enums (v) { }
  enum Qt::Orientation value () const { return (enum Qt::Orientation) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::Orientation>
template <>
struct Converter<QFlags<enum Qt::Orientation> >
{
public:
  typedef QFlags<enum Qt::Orientation> source_type;
  typedef Qt_Orientation_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::Orientation
template <>
struct Converter<enum Qt::Orientation>
{
public:
  typedef enum Qt::Orientation source_type;
  typedef Qt_Orientation_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
