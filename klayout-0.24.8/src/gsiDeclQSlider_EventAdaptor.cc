
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file generated/gsiDeclQSlider_EventAdaptor.cc
*  @brief Event adaptor implementations for QSlider
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQSlider_EventAdaptor.h"

// -----------------------------------------------------------------------
// class QSlider_EventAdaptor

QSlider_EventAdaptor::QSlider_EventAdaptor (QObject *host)
  : QObject ()
{
  connect (host, SIGNAL(actionTriggered(int)), this, SLOT(actionTriggered(int)));
  connect (host, SIGNAL(customContextMenuRequested(const QPoint &)), this, SLOT(customContextMenuRequested(const QPoint &)));
  connect (host, SIGNAL(destroyed(QObject *)), this, SLOT(destroyed(QObject *)));
  connect (host, SIGNAL(rangeChanged(int, int)), this, SLOT(rangeChanged(int, int)));
  connect (host, SIGNAL(sliderMoved(int)), this, SLOT(sliderMoved(int)));
  connect (host, SIGNAL(sliderPressed()), this, SLOT(sliderPressed()));
  connect (host, SIGNAL(sliderReleased()), this, SLOT(sliderReleased()));
  connect (host, SIGNAL(valueChanged(int)), this, SLOT(valueChanged(int)));
}

//  Event QSlider::actionTriggered(int action)
void QSlider_EventAdaptor::actionTriggered(int action) {
BEGIN_PROTECTED
  actionTriggered_e_767(action);
END_PROTECTED
}

//  Event QSlider::customContextMenuRequested(const QPoint &pos)
void QSlider_EventAdaptor::customContextMenuRequested(const QPoint &pos) {
BEGIN_PROTECTED
  customContextMenuRequested_e_1916(pos);
END_PROTECTED
}

//  Event QSlider::destroyed(QObject *arg1)
void QSlider_EventAdaptor::destroyed(QObject *arg1) {
BEGIN_PROTECTED
  destroyed_e_1302(arg1);
END_PROTECTED
}

//  Event QSlider::rangeChanged(int min, int max)
void QSlider_EventAdaptor::rangeChanged(int min, int max) {
BEGIN_PROTECTED
  rangeChanged_e_1426(min, max);
END_PROTECTED
}

//  Event QSlider::sliderMoved(int position)
void QSlider_EventAdaptor::sliderMoved(int position) {
BEGIN_PROTECTED
  sliderMoved_e_767(position);
END_PROTECTED
}

//  Event QSlider::sliderPressed()
void QSlider_EventAdaptor::sliderPressed() {
BEGIN_PROTECTED
  sliderPressed_e_0();
END_PROTECTED
}

//  Event QSlider::sliderReleased()
void QSlider_EventAdaptor::sliderReleased() {
BEGIN_PROTECTED
  sliderReleased_e_0();
END_PROTECTED
}

//  Event QSlider::valueChanged(int value)
void QSlider_EventAdaptor::valueChanged(int value) {
BEGIN_PROTECTED
  valueChanged_e_767(value);
END_PROTECTED
}
