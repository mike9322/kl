
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQAccessible_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQAccessible_Enums
#define _HDR_gsiDeclQAccessible_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QAccessible::Event>
class QAccessible_Event_Enums : public QFlags<enum QAccessible::Event> {
public:
  QAccessible_Event_Enums () : m_flags () { }
  QAccessible_Event_Enums (enum QAccessible::Event v) : m_flags (v) { }
  QAccessible_Event_Enums (const QFlags<enum QAccessible::Event> &v) : m_flags (v) { }
  QFlags<enum QAccessible::Event> flags () const { return m_flags; }
private:
  QFlags<QAccessible::Event> m_flags;
};

//  Wrapper class for enum QAccessible::Event
class QAccessible_Event_Enum : public QAccessible_Event_Enums {
public:
  QAccessible_Event_Enum () { }
  QAccessible_Event_Enum (enum QAccessible::Event v) : QAccessible_Event_Enums (v) { }
  enum QAccessible::Event value () const { return (enum QAccessible::Event) flags ().operator int (); }
};

//  Converter for QFlags<enum QAccessible::Event>
template <>
struct Converter<QFlags<enum QAccessible::Event> >
{
public:
  typedef QFlags<enum QAccessible::Event> source_type;
  typedef QAccessible_Event_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAccessible::Event
template <>
struct Converter<enum QAccessible::Event>
{
public:
  typedef enum QAccessible::Event source_type;
  typedef QAccessible_Event_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAccessible::Method>
class QAccessible_Method_Enums : public QFlags<enum QAccessible::Method> {
public:
  QAccessible_Method_Enums () : m_flags () { }
  QAccessible_Method_Enums (enum QAccessible::Method v) : m_flags (v) { }
  QAccessible_Method_Enums (const QFlags<enum QAccessible::Method> &v) : m_flags (v) { }
  QFlags<enum QAccessible::Method> flags () const { return m_flags; }
private:
  QFlags<QAccessible::Method> m_flags;
};

//  Wrapper class for enum QAccessible::Method
class QAccessible_Method_Enum : public QAccessible_Method_Enums {
public:
  QAccessible_Method_Enum () { }
  QAccessible_Method_Enum (enum QAccessible::Method v) : QAccessible_Method_Enums (v) { }
  enum QAccessible::Method value () const { return (enum QAccessible::Method) flags ().operator int (); }
};

//  Converter for QFlags<enum QAccessible::Method>
template <>
struct Converter<QFlags<enum QAccessible::Method> >
{
public:
  typedef QFlags<enum QAccessible::Method> source_type;
  typedef QAccessible_Method_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAccessible::Method
template <>
struct Converter<enum QAccessible::Method>
{
public:
  typedef enum QAccessible::Method source_type;
  typedef QAccessible_Method_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAccessible::RelationFlag>
class QAccessible_RelationFlag_Enums : public QFlags<enum QAccessible::RelationFlag> {
public:
  QAccessible_RelationFlag_Enums () : m_flags () { }
  QAccessible_RelationFlag_Enums (enum QAccessible::RelationFlag v) : m_flags (v) { }
  QAccessible_RelationFlag_Enums (const QFlags<enum QAccessible::RelationFlag> &v) : m_flags (v) { }
  QFlags<enum QAccessible::RelationFlag> flags () const { return m_flags; }
private:
  QFlags<QAccessible::RelationFlag> m_flags;
};

//  Wrapper class for enum QAccessible::RelationFlag
class QAccessible_RelationFlag_Enum : public QAccessible_RelationFlag_Enums {
public:
  QAccessible_RelationFlag_Enum () { }
  QAccessible_RelationFlag_Enum (enum QAccessible::RelationFlag v) : QAccessible_RelationFlag_Enums (v) { }
  enum QAccessible::RelationFlag value () const { return (enum QAccessible::RelationFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum QAccessible::RelationFlag>
template <>
struct Converter<QFlags<enum QAccessible::RelationFlag> >
{
public:
  typedef QFlags<enum QAccessible::RelationFlag> source_type;
  typedef QAccessible_RelationFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAccessible::RelationFlag
template <>
struct Converter<enum QAccessible::RelationFlag>
{
public:
  typedef enum QAccessible::RelationFlag source_type;
  typedef QAccessible_RelationFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAccessible::Role>
class QAccessible_Role_Enums : public QFlags<enum QAccessible::Role> {
public:
  QAccessible_Role_Enums () : m_flags () { }
  QAccessible_Role_Enums (enum QAccessible::Role v) : m_flags (v) { }
  QAccessible_Role_Enums (const QFlags<enum QAccessible::Role> &v) : m_flags (v) { }
  QFlags<enum QAccessible::Role> flags () const { return m_flags; }
private:
  QFlags<QAccessible::Role> m_flags;
};

//  Wrapper class for enum QAccessible::Role
class QAccessible_Role_Enum : public QAccessible_Role_Enums {
public:
  QAccessible_Role_Enum () { }
  QAccessible_Role_Enum (enum QAccessible::Role v) : QAccessible_Role_Enums (v) { }
  enum QAccessible::Role value () const { return (enum QAccessible::Role) flags ().operator int (); }
};

//  Converter for QFlags<enum QAccessible::Role>
template <>
struct Converter<QFlags<enum QAccessible::Role> >
{
public:
  typedef QFlags<enum QAccessible::Role> source_type;
  typedef QAccessible_Role_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAccessible::Role
template <>
struct Converter<enum QAccessible::Role>
{
public:
  typedef enum QAccessible::Role source_type;
  typedef QAccessible_Role_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAccessible::StateFlag>
class QAccessible_StateFlag_Enums : public QFlags<enum QAccessible::StateFlag> {
public:
  QAccessible_StateFlag_Enums () : m_flags () { }
  QAccessible_StateFlag_Enums (enum QAccessible::StateFlag v) : m_flags (v) { }
  QAccessible_StateFlag_Enums (const QFlags<enum QAccessible::StateFlag> &v) : m_flags (v) { }
  QFlags<enum QAccessible::StateFlag> flags () const { return m_flags; }
private:
  QFlags<QAccessible::StateFlag> m_flags;
};

//  Wrapper class for enum QAccessible::StateFlag
class QAccessible_StateFlag_Enum : public QAccessible_StateFlag_Enums {
public:
  QAccessible_StateFlag_Enum () { }
  QAccessible_StateFlag_Enum (enum QAccessible::StateFlag v) : QAccessible_StateFlag_Enums (v) { }
  enum QAccessible::StateFlag value () const { return (enum QAccessible::StateFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum QAccessible::StateFlag>
template <>
struct Converter<QFlags<enum QAccessible::StateFlag> >
{
public:
  typedef QFlags<enum QAccessible::StateFlag> source_type;
  typedef QAccessible_StateFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAccessible::StateFlag
template <>
struct Converter<enum QAccessible::StateFlag>
{
public:
  typedef enum QAccessible::StateFlag source_type;
  typedef QAccessible_StateFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAccessible::Text>
class QAccessible_Text_Enums : public QFlags<enum QAccessible::Text> {
public:
  QAccessible_Text_Enums () : m_flags () { }
  QAccessible_Text_Enums (enum QAccessible::Text v) : m_flags (v) { }
  QAccessible_Text_Enums (const QFlags<enum QAccessible::Text> &v) : m_flags (v) { }
  QFlags<enum QAccessible::Text> flags () const { return m_flags; }
private:
  QFlags<QAccessible::Text> m_flags;
};

//  Wrapper class for enum QAccessible::Text
class QAccessible_Text_Enum : public QAccessible_Text_Enums {
public:
  QAccessible_Text_Enum () { }
  QAccessible_Text_Enum (enum QAccessible::Text v) : QAccessible_Text_Enums (v) { }
  enum QAccessible::Text value () const { return (enum QAccessible::Text) flags ().operator int (); }
};

//  Converter for QFlags<enum QAccessible::Text>
template <>
struct Converter<QFlags<enum QAccessible::Text> >
{
public:
  typedef QFlags<enum QAccessible::Text> source_type;
  typedef QAccessible_Text_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAccessible::Text
template <>
struct Converter<enum QAccessible::Text>
{
public:
  typedef enum QAccessible::Text source_type;
  typedef QAccessible_Text_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
