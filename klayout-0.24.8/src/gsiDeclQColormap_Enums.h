
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQColormap_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQColormap_Enums
#define _HDR_gsiDeclQColormap_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QColormap::Mode>
class QColormap_Mode_Enums : public QFlags<enum QColormap::Mode> {
public:
  QColormap_Mode_Enums () : m_flags () { }
  QColormap_Mode_Enums (enum QColormap::Mode v) : m_flags (v) { }
  QColormap_Mode_Enums (const QFlags<enum QColormap::Mode> &v) : m_flags (v) { }
  QFlags<enum QColormap::Mode> flags () const { return m_flags; }
private:
  QFlags<QColormap::Mode> m_flags;
};

//  Wrapper class for enum QColormap::Mode
class QColormap_Mode_Enum : public QColormap_Mode_Enums {
public:
  QColormap_Mode_Enum () { }
  QColormap_Mode_Enum (enum QColormap::Mode v) : QColormap_Mode_Enums (v) { }
  enum QColormap::Mode value () const { return (enum QColormap::Mode) flags ().operator int (); }
};

//  Converter for QFlags<enum QColormap::Mode>
template <>
struct Converter<QFlags<enum QColormap::Mode> >
{
public:
  typedef QFlags<enum QColormap::Mode> source_type;
  typedef QColormap_Mode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QColormap::Mode
template <>
struct Converter<enum QColormap::Mode>
{
public:
  typedef enum QColormap::Mode source_type;
  typedef QColormap_Mode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
