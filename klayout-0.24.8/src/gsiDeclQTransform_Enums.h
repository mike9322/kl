
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQTransform_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQTransform_Enums
#define _HDR_gsiDeclQTransform_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QTransform::TransformationType>
class QTransform_TransformationType_Enums : public QFlags<enum QTransform::TransformationType> {
public:
  QTransform_TransformationType_Enums () : m_flags () { }
  QTransform_TransformationType_Enums (enum QTransform::TransformationType v) : m_flags (v) { }
  QTransform_TransformationType_Enums (const QFlags<enum QTransform::TransformationType> &v) : m_flags (v) { }
  QFlags<enum QTransform::TransformationType> flags () const { return m_flags; }
private:
  QFlags<QTransform::TransformationType> m_flags;
};

//  Wrapper class for enum QTransform::TransformationType
class QTransform_TransformationType_Enum : public QTransform_TransformationType_Enums {
public:
  QTransform_TransformationType_Enum () { }
  QTransform_TransformationType_Enum (enum QTransform::TransformationType v) : QTransform_TransformationType_Enums (v) { }
  enum QTransform::TransformationType value () const { return (enum QTransform::TransformationType) flags ().operator int (); }
};

//  Converter for QFlags<enum QTransform::TransformationType>
template <>
struct Converter<QFlags<enum QTransform::TransformationType> >
{
public:
  typedef QFlags<enum QTransform::TransformationType> source_type;
  typedef QTransform_TransformationType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QTransform::TransformationType
template <>
struct Converter<enum QTransform::TransformationType>
{
public:
  typedef enum QTransform::TransformationType source_type;
  typedef QTransform_TransformationType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::Axis>
class Qt_Axis_Enums : public QFlags<enum Qt::Axis> {
public:
  Qt_Axis_Enums () : m_flags () { }
  Qt_Axis_Enums (enum Qt::Axis v) : m_flags (v) { }
  Qt_Axis_Enums (const QFlags<enum Qt::Axis> &v) : m_flags (v) { }
  QFlags<enum Qt::Axis> flags () const { return m_flags; }
private:
  QFlags<Qt::Axis> m_flags;
};

//  Wrapper class for enum Qt::Axis
class Qt_Axis_Enum : public Qt_Axis_Enums {
public:
  Qt_Axis_Enum () { }
  Qt_Axis_Enum (enum Qt::Axis v) : Qt_Axis_Enums (v) { }
  enum Qt::Axis value () const { return (enum Qt::Axis) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::Axis>
template <>
struct Converter<QFlags<enum Qt::Axis> >
{
public:
  typedef QFlags<enum Qt::Axis> source_type;
  typedef Qt_Axis_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::Axis
template <>
struct Converter<enum Qt::Axis>
{
public:
  typedef enum Qt::Axis source_type;
  typedef Qt_Axis_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::Initialization>
class Qt_Initialization_Enums : public QFlags<enum Qt::Initialization> {
public:
  Qt_Initialization_Enums () : m_flags () { }
  Qt_Initialization_Enums (enum Qt::Initialization v) : m_flags (v) { }
  Qt_Initialization_Enums (const QFlags<enum Qt::Initialization> &v) : m_flags (v) { }
  QFlags<enum Qt::Initialization> flags () const { return m_flags; }
private:
  QFlags<Qt::Initialization> m_flags;
};

//  Wrapper class for enum Qt::Initialization
class Qt_Initialization_Enum : public Qt_Initialization_Enums {
public:
  Qt_Initialization_Enum () { }
  Qt_Initialization_Enum (enum Qt::Initialization v) : Qt_Initialization_Enums (v) { }
  enum Qt::Initialization value () const { return (enum Qt::Initialization) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::Initialization>
template <>
struct Converter<QFlags<enum Qt::Initialization> >
{
public:
  typedef QFlags<enum Qt::Initialization> source_type;
  typedef Qt_Initialization_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::Initialization
template <>
struct Converter<enum Qt::Initialization>
{
public:
  typedef enum Qt::Initialization source_type;
  typedef Qt_Initialization_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
