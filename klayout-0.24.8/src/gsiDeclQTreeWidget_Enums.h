
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQTreeWidget_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQTreeWidget_Enums
#define _HDR_gsiDeclQTreeWidget_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QAbstractItemDelegate::EndEditHint>
class QAbstractItemDelegate_EndEditHint_Enums : public QFlags<enum QAbstractItemDelegate::EndEditHint> {
public:
  QAbstractItemDelegate_EndEditHint_Enums () : m_flags () { }
  QAbstractItemDelegate_EndEditHint_Enums (enum QAbstractItemDelegate::EndEditHint v) : m_flags (v) { }
  QAbstractItemDelegate_EndEditHint_Enums (const QFlags<enum QAbstractItemDelegate::EndEditHint> &v) : m_flags (v) { }
  QFlags<enum QAbstractItemDelegate::EndEditHint> flags () const { return m_flags; }
private:
  QFlags<QAbstractItemDelegate::EndEditHint> m_flags;
};

//  Wrapper class for enum QAbstractItemDelegate::EndEditHint
class QAbstractItemDelegate_EndEditHint_Enum : public QAbstractItemDelegate_EndEditHint_Enums {
public:
  QAbstractItemDelegate_EndEditHint_Enum () { }
  QAbstractItemDelegate_EndEditHint_Enum (enum QAbstractItemDelegate::EndEditHint v) : QAbstractItemDelegate_EndEditHint_Enums (v) { }
  enum QAbstractItemDelegate::EndEditHint value () const { return (enum QAbstractItemDelegate::EndEditHint) flags ().operator int (); }
};

//  Converter for QFlags<enum QAbstractItemDelegate::EndEditHint>
template <>
struct Converter<QFlags<enum QAbstractItemDelegate::EndEditHint> >
{
public:
  typedef QFlags<enum QAbstractItemDelegate::EndEditHint> source_type;
  typedef QAbstractItemDelegate_EndEditHint_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAbstractItemDelegate::EndEditHint
template <>
struct Converter<enum QAbstractItemDelegate::EndEditHint>
{
public:
  typedef enum QAbstractItemDelegate::EndEditHint source_type;
  typedef QAbstractItemDelegate_EndEditHint_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAbstractItemView::DragDropMode>
class QAbstractItemView_DragDropMode_Enums : public QFlags<enum QAbstractItemView::DragDropMode> {
public:
  QAbstractItemView_DragDropMode_Enums () : m_flags () { }
  QAbstractItemView_DragDropMode_Enums (enum QAbstractItemView::DragDropMode v) : m_flags (v) { }
  QAbstractItemView_DragDropMode_Enums (const QFlags<enum QAbstractItemView::DragDropMode> &v) : m_flags (v) { }
  QFlags<enum QAbstractItemView::DragDropMode> flags () const { return m_flags; }
private:
  QFlags<QAbstractItemView::DragDropMode> m_flags;
};

//  Wrapper class for enum QAbstractItemView::DragDropMode
class QAbstractItemView_DragDropMode_Enum : public QAbstractItemView_DragDropMode_Enums {
public:
  QAbstractItemView_DragDropMode_Enum () { }
  QAbstractItemView_DragDropMode_Enum (enum QAbstractItemView::DragDropMode v) : QAbstractItemView_DragDropMode_Enums (v) { }
  enum QAbstractItemView::DragDropMode value () const { return (enum QAbstractItemView::DragDropMode) flags ().operator int (); }
};

//  Converter for QFlags<enum QAbstractItemView::DragDropMode>
template <>
struct Converter<QFlags<enum QAbstractItemView::DragDropMode> >
{
public:
  typedef QFlags<enum QAbstractItemView::DragDropMode> source_type;
  typedef QAbstractItemView_DragDropMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAbstractItemView::DragDropMode
template <>
struct Converter<enum QAbstractItemView::DragDropMode>
{
public:
  typedef enum QAbstractItemView::DragDropMode source_type;
  typedef QAbstractItemView_DragDropMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAbstractItemView::EditTrigger>
class QAbstractItemView_EditTrigger_Enums : public QFlags<enum QAbstractItemView::EditTrigger> {
public:
  QAbstractItemView_EditTrigger_Enums () : m_flags () { }
  QAbstractItemView_EditTrigger_Enums (enum QAbstractItemView::EditTrigger v) : m_flags (v) { }
  QAbstractItemView_EditTrigger_Enums (const QFlags<enum QAbstractItemView::EditTrigger> &v) : m_flags (v) { }
  QFlags<enum QAbstractItemView::EditTrigger> flags () const { return m_flags; }
private:
  QFlags<QAbstractItemView::EditTrigger> m_flags;
};

//  Wrapper class for enum QAbstractItemView::EditTrigger
class QAbstractItemView_EditTrigger_Enum : public QAbstractItemView_EditTrigger_Enums {
public:
  QAbstractItemView_EditTrigger_Enum () { }
  QAbstractItemView_EditTrigger_Enum (enum QAbstractItemView::EditTrigger v) : QAbstractItemView_EditTrigger_Enums (v) { }
  enum QAbstractItemView::EditTrigger value () const { return (enum QAbstractItemView::EditTrigger) flags ().operator int (); }
};

//  Converter for QFlags<enum QAbstractItemView::EditTrigger>
template <>
struct Converter<QFlags<enum QAbstractItemView::EditTrigger> >
{
public:
  typedef QFlags<enum QAbstractItemView::EditTrigger> source_type;
  typedef QAbstractItemView_EditTrigger_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAbstractItemView::EditTrigger
template <>
struct Converter<enum QAbstractItemView::EditTrigger>
{
public:
  typedef enum QAbstractItemView::EditTrigger source_type;
  typedef QAbstractItemView_EditTrigger_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAbstractItemView::ScrollHint>
class QAbstractItemView_ScrollHint_Enums : public QFlags<enum QAbstractItemView::ScrollHint> {
public:
  QAbstractItemView_ScrollHint_Enums () : m_flags () { }
  QAbstractItemView_ScrollHint_Enums (enum QAbstractItemView::ScrollHint v) : m_flags (v) { }
  QAbstractItemView_ScrollHint_Enums (const QFlags<enum QAbstractItemView::ScrollHint> &v) : m_flags (v) { }
  QFlags<enum QAbstractItemView::ScrollHint> flags () const { return m_flags; }
private:
  QFlags<QAbstractItemView::ScrollHint> m_flags;
};

//  Wrapper class for enum QAbstractItemView::ScrollHint
class QAbstractItemView_ScrollHint_Enum : public QAbstractItemView_ScrollHint_Enums {
public:
  QAbstractItemView_ScrollHint_Enum () { }
  QAbstractItemView_ScrollHint_Enum (enum QAbstractItemView::ScrollHint v) : QAbstractItemView_ScrollHint_Enums (v) { }
  enum QAbstractItemView::ScrollHint value () const { return (enum QAbstractItemView::ScrollHint) flags ().operator int (); }
};

//  Converter for QFlags<enum QAbstractItemView::ScrollHint>
template <>
struct Converter<QFlags<enum QAbstractItemView::ScrollHint> >
{
public:
  typedef QFlags<enum QAbstractItemView::ScrollHint> source_type;
  typedef QAbstractItemView_ScrollHint_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAbstractItemView::ScrollHint
template <>
struct Converter<enum QAbstractItemView::ScrollHint>
{
public:
  typedef enum QAbstractItemView::ScrollHint source_type;
  typedef QAbstractItemView_ScrollHint_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAbstractItemView::ScrollMode>
class QAbstractItemView_ScrollMode_Enums : public QFlags<enum QAbstractItemView::ScrollMode> {
public:
  QAbstractItemView_ScrollMode_Enums () : m_flags () { }
  QAbstractItemView_ScrollMode_Enums (enum QAbstractItemView::ScrollMode v) : m_flags (v) { }
  QAbstractItemView_ScrollMode_Enums (const QFlags<enum QAbstractItemView::ScrollMode> &v) : m_flags (v) { }
  QFlags<enum QAbstractItemView::ScrollMode> flags () const { return m_flags; }
private:
  QFlags<QAbstractItemView::ScrollMode> m_flags;
};

//  Wrapper class for enum QAbstractItemView::ScrollMode
class QAbstractItemView_ScrollMode_Enum : public QAbstractItemView_ScrollMode_Enums {
public:
  QAbstractItemView_ScrollMode_Enum () { }
  QAbstractItemView_ScrollMode_Enum (enum QAbstractItemView::ScrollMode v) : QAbstractItemView_ScrollMode_Enums (v) { }
  enum QAbstractItemView::ScrollMode value () const { return (enum QAbstractItemView::ScrollMode) flags ().operator int (); }
};

//  Converter for QFlags<enum QAbstractItemView::ScrollMode>
template <>
struct Converter<QFlags<enum QAbstractItemView::ScrollMode> >
{
public:
  typedef QFlags<enum QAbstractItemView::ScrollMode> source_type;
  typedef QAbstractItemView_ScrollMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAbstractItemView::ScrollMode
template <>
struct Converter<enum QAbstractItemView::ScrollMode>
{
public:
  typedef enum QAbstractItemView::ScrollMode source_type;
  typedef QAbstractItemView_ScrollMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAbstractItemView::SelectionBehavior>
class QAbstractItemView_SelectionBehavior_Enums : public QFlags<enum QAbstractItemView::SelectionBehavior> {
public:
  QAbstractItemView_SelectionBehavior_Enums () : m_flags () { }
  QAbstractItemView_SelectionBehavior_Enums (enum QAbstractItemView::SelectionBehavior v) : m_flags (v) { }
  QAbstractItemView_SelectionBehavior_Enums (const QFlags<enum QAbstractItemView::SelectionBehavior> &v) : m_flags (v) { }
  QFlags<enum QAbstractItemView::SelectionBehavior> flags () const { return m_flags; }
private:
  QFlags<QAbstractItemView::SelectionBehavior> m_flags;
};

//  Wrapper class for enum QAbstractItemView::SelectionBehavior
class QAbstractItemView_SelectionBehavior_Enum : public QAbstractItemView_SelectionBehavior_Enums {
public:
  QAbstractItemView_SelectionBehavior_Enum () { }
  QAbstractItemView_SelectionBehavior_Enum (enum QAbstractItemView::SelectionBehavior v) : QAbstractItemView_SelectionBehavior_Enums (v) { }
  enum QAbstractItemView::SelectionBehavior value () const { return (enum QAbstractItemView::SelectionBehavior) flags ().operator int (); }
};

//  Converter for QFlags<enum QAbstractItemView::SelectionBehavior>
template <>
struct Converter<QFlags<enum QAbstractItemView::SelectionBehavior> >
{
public:
  typedef QFlags<enum QAbstractItemView::SelectionBehavior> source_type;
  typedef QAbstractItemView_SelectionBehavior_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAbstractItemView::SelectionBehavior
template <>
struct Converter<enum QAbstractItemView::SelectionBehavior>
{
public:
  typedef enum QAbstractItemView::SelectionBehavior source_type;
  typedef QAbstractItemView_SelectionBehavior_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAbstractItemView::SelectionMode>
class QAbstractItemView_SelectionMode_Enums : public QFlags<enum QAbstractItemView::SelectionMode> {
public:
  QAbstractItemView_SelectionMode_Enums () : m_flags () { }
  QAbstractItemView_SelectionMode_Enums (enum QAbstractItemView::SelectionMode v) : m_flags (v) { }
  QAbstractItemView_SelectionMode_Enums (const QFlags<enum QAbstractItemView::SelectionMode> &v) : m_flags (v) { }
  QFlags<enum QAbstractItemView::SelectionMode> flags () const { return m_flags; }
private:
  QFlags<QAbstractItemView::SelectionMode> m_flags;
};

//  Wrapper class for enum QAbstractItemView::SelectionMode
class QAbstractItemView_SelectionMode_Enum : public QAbstractItemView_SelectionMode_Enums {
public:
  QAbstractItemView_SelectionMode_Enum () { }
  QAbstractItemView_SelectionMode_Enum (enum QAbstractItemView::SelectionMode v) : QAbstractItemView_SelectionMode_Enums (v) { }
  enum QAbstractItemView::SelectionMode value () const { return (enum QAbstractItemView::SelectionMode) flags ().operator int (); }
};

//  Converter for QFlags<enum QAbstractItemView::SelectionMode>
template <>
struct Converter<QFlags<enum QAbstractItemView::SelectionMode> >
{
public:
  typedef QFlags<enum QAbstractItemView::SelectionMode> source_type;
  typedef QAbstractItemView_SelectionMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAbstractItemView::SelectionMode
template <>
struct Converter<enum QAbstractItemView::SelectionMode>
{
public:
  typedef enum QAbstractItemView::SelectionMode source_type;
  typedef QAbstractItemView_SelectionMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QFrame::Shadow>
class QFrame_Shadow_Enums : public QFlags<enum QFrame::Shadow> {
public:
  QFrame_Shadow_Enums () : m_flags () { }
  QFrame_Shadow_Enums (enum QFrame::Shadow v) : m_flags (v) { }
  QFrame_Shadow_Enums (const QFlags<enum QFrame::Shadow> &v) : m_flags (v) { }
  QFlags<enum QFrame::Shadow> flags () const { return m_flags; }
private:
  QFlags<QFrame::Shadow> m_flags;
};

//  Wrapper class for enum QFrame::Shadow
class QFrame_Shadow_Enum : public QFrame_Shadow_Enums {
public:
  QFrame_Shadow_Enum () { }
  QFrame_Shadow_Enum (enum QFrame::Shadow v) : QFrame_Shadow_Enums (v) { }
  enum QFrame::Shadow value () const { return (enum QFrame::Shadow) flags ().operator int (); }
};

//  Converter for QFlags<enum QFrame::Shadow>
template <>
struct Converter<QFlags<enum QFrame::Shadow> >
{
public:
  typedef QFlags<enum QFrame::Shadow> source_type;
  typedef QFrame_Shadow_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QFrame::Shadow
template <>
struct Converter<enum QFrame::Shadow>
{
public:
  typedef enum QFrame::Shadow source_type;
  typedef QFrame_Shadow_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QFrame::Shape>
class QFrame_Shape_Enums : public QFlags<enum QFrame::Shape> {
public:
  QFrame_Shape_Enums () : m_flags () { }
  QFrame_Shape_Enums (enum QFrame::Shape v) : m_flags (v) { }
  QFrame_Shape_Enums (const QFlags<enum QFrame::Shape> &v) : m_flags (v) { }
  QFlags<enum QFrame::Shape> flags () const { return m_flags; }
private:
  QFlags<QFrame::Shape> m_flags;
};

//  Wrapper class for enum QFrame::Shape
class QFrame_Shape_Enum : public QFrame_Shape_Enums {
public:
  QFrame_Shape_Enum () { }
  QFrame_Shape_Enum (enum QFrame::Shape v) : QFrame_Shape_Enums (v) { }
  enum QFrame::Shape value () const { return (enum QFrame::Shape) flags ().operator int (); }
};

//  Converter for QFlags<enum QFrame::Shape>
template <>
struct Converter<QFlags<enum QFrame::Shape> >
{
public:
  typedef QFlags<enum QFrame::Shape> source_type;
  typedef QFrame_Shape_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QFrame::Shape
template <>
struct Converter<enum QFrame::Shape>
{
public:
  typedef enum QFrame::Shape source_type;
  typedef QFrame_Shape_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QItemSelectionModel::SelectionFlag>
class QItemSelectionModel_SelectionFlag_Enums : public QFlags<enum QItemSelectionModel::SelectionFlag> {
public:
  QItemSelectionModel_SelectionFlag_Enums () : m_flags () { }
  QItemSelectionModel_SelectionFlag_Enums (enum QItemSelectionModel::SelectionFlag v) : m_flags (v) { }
  QItemSelectionModel_SelectionFlag_Enums (const QFlags<enum QItemSelectionModel::SelectionFlag> &v) : m_flags (v) { }
  QFlags<enum QItemSelectionModel::SelectionFlag> flags () const { return m_flags; }
private:
  QFlags<QItemSelectionModel::SelectionFlag> m_flags;
};

//  Wrapper class for enum QItemSelectionModel::SelectionFlag
class QItemSelectionModel_SelectionFlag_Enum : public QItemSelectionModel_SelectionFlag_Enums {
public:
  QItemSelectionModel_SelectionFlag_Enum () { }
  QItemSelectionModel_SelectionFlag_Enum (enum QItemSelectionModel::SelectionFlag v) : QItemSelectionModel_SelectionFlag_Enums (v) { }
  enum QItemSelectionModel::SelectionFlag value () const { return (enum QItemSelectionModel::SelectionFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum QItemSelectionModel::SelectionFlag>
template <>
struct Converter<QFlags<enum QItemSelectionModel::SelectionFlag> >
{
public:
  typedef QFlags<enum QItemSelectionModel::SelectionFlag> source_type;
  typedef QItemSelectionModel_SelectionFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QItemSelectionModel::SelectionFlag
template <>
struct Converter<enum QItemSelectionModel::SelectionFlag>
{
public:
  typedef enum QItemSelectionModel::SelectionFlag source_type;
  typedef QItemSelectionModel_SelectionFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QPaintDevice::PaintDeviceMetric>
class QPaintDevice_PaintDeviceMetric_Enums : public QFlags<enum QPaintDevice::PaintDeviceMetric> {
public:
  QPaintDevice_PaintDeviceMetric_Enums () : m_flags () { }
  QPaintDevice_PaintDeviceMetric_Enums (enum QPaintDevice::PaintDeviceMetric v) : m_flags (v) { }
  QPaintDevice_PaintDeviceMetric_Enums (const QFlags<enum QPaintDevice::PaintDeviceMetric> &v) : m_flags (v) { }
  QFlags<enum QPaintDevice::PaintDeviceMetric> flags () const { return m_flags; }
private:
  QFlags<QPaintDevice::PaintDeviceMetric> m_flags;
};

//  Wrapper class for enum QPaintDevice::PaintDeviceMetric
class QPaintDevice_PaintDeviceMetric_Enum : public QPaintDevice_PaintDeviceMetric_Enums {
public:
  QPaintDevice_PaintDeviceMetric_Enum () { }
  QPaintDevice_PaintDeviceMetric_Enum (enum QPaintDevice::PaintDeviceMetric v) : QPaintDevice_PaintDeviceMetric_Enums (v) { }
  enum QPaintDevice::PaintDeviceMetric value () const { return (enum QPaintDevice::PaintDeviceMetric) flags ().operator int (); }
};

//  Converter for QFlags<enum QPaintDevice::PaintDeviceMetric>
template <>
struct Converter<QFlags<enum QPaintDevice::PaintDeviceMetric> >
{
public:
  typedef QFlags<enum QPaintDevice::PaintDeviceMetric> source_type;
  typedef QPaintDevice_PaintDeviceMetric_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QPaintDevice::PaintDeviceMetric
template <>
struct Converter<enum QPaintDevice::PaintDeviceMetric>
{
public:
  typedef enum QPaintDevice::PaintDeviceMetric source_type;
  typedef QPaintDevice_PaintDeviceMetric_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QPalette::ColorRole>
class QPalette_ColorRole_Enums : public QFlags<enum QPalette::ColorRole> {
public:
  QPalette_ColorRole_Enums () : m_flags () { }
  QPalette_ColorRole_Enums (enum QPalette::ColorRole v) : m_flags (v) { }
  QPalette_ColorRole_Enums (const QFlags<enum QPalette::ColorRole> &v) : m_flags (v) { }
  QFlags<enum QPalette::ColorRole> flags () const { return m_flags; }
private:
  QFlags<QPalette::ColorRole> m_flags;
};

//  Wrapper class for enum QPalette::ColorRole
class QPalette_ColorRole_Enum : public QPalette_ColorRole_Enums {
public:
  QPalette_ColorRole_Enum () { }
  QPalette_ColorRole_Enum (enum QPalette::ColorRole v) : QPalette_ColorRole_Enums (v) { }
  enum QPalette::ColorRole value () const { return (enum QPalette::ColorRole) flags ().operator int (); }
};

//  Converter for QFlags<enum QPalette::ColorRole>
template <>
struct Converter<QFlags<enum QPalette::ColorRole> >
{
public:
  typedef QFlags<enum QPalette::ColorRole> source_type;
  typedef QPalette_ColorRole_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QPalette::ColorRole
template <>
struct Converter<enum QPalette::ColorRole>
{
public:
  typedef enum QPalette::ColorRole source_type;
  typedef QPalette_ColorRole_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSizePolicy::Policy>
class QSizePolicy_Policy_Enums : public QFlags<enum QSizePolicy::Policy> {
public:
  QSizePolicy_Policy_Enums () : m_flags () { }
  QSizePolicy_Policy_Enums (enum QSizePolicy::Policy v) : m_flags (v) { }
  QSizePolicy_Policy_Enums (const QFlags<enum QSizePolicy::Policy> &v) : m_flags (v) { }
  QFlags<enum QSizePolicy::Policy> flags () const { return m_flags; }
private:
  QFlags<QSizePolicy::Policy> m_flags;
};

//  Wrapper class for enum QSizePolicy::Policy
class QSizePolicy_Policy_Enum : public QSizePolicy_Policy_Enums {
public:
  QSizePolicy_Policy_Enum () { }
  QSizePolicy_Policy_Enum (enum QSizePolicy::Policy v) : QSizePolicy_Policy_Enums (v) { }
  enum QSizePolicy::Policy value () const { return (enum QSizePolicy::Policy) flags ().operator int (); }
};

//  Converter for QFlags<enum QSizePolicy::Policy>
template <>
struct Converter<QFlags<enum QSizePolicy::Policy> >
{
public:
  typedef QFlags<enum QSizePolicy::Policy> source_type;
  typedef QSizePolicy_Policy_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSizePolicy::Policy
template <>
struct Converter<enum QSizePolicy::Policy>
{
public:
  typedef enum QSizePolicy::Policy source_type;
  typedef QSizePolicy_Policy_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QWidget::RenderFlag>
class QWidget_RenderFlag_Enums : public QFlags<enum QWidget::RenderFlag> {
public:
  QWidget_RenderFlag_Enums () : m_flags () { }
  QWidget_RenderFlag_Enums (enum QWidget::RenderFlag v) : m_flags (v) { }
  QWidget_RenderFlag_Enums (const QFlags<enum QWidget::RenderFlag> &v) : m_flags (v) { }
  QFlags<enum QWidget::RenderFlag> flags () const { return m_flags; }
private:
  QFlags<QWidget::RenderFlag> m_flags;
};

//  Wrapper class for enum QWidget::RenderFlag
class QWidget_RenderFlag_Enum : public QWidget_RenderFlag_Enums {
public:
  QWidget_RenderFlag_Enum () { }
  QWidget_RenderFlag_Enum (enum QWidget::RenderFlag v) : QWidget_RenderFlag_Enums (v) { }
  enum QWidget::RenderFlag value () const { return (enum QWidget::RenderFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum QWidget::RenderFlag>
template <>
struct Converter<QFlags<enum QWidget::RenderFlag> >
{
public:
  typedef QFlags<enum QWidget::RenderFlag> source_type;
  typedef QWidget_RenderFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QWidget::RenderFlag
template <>
struct Converter<enum QWidget::RenderFlag>
{
public:
  typedef enum QWidget::RenderFlag source_type;
  typedef QWidget_RenderFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::AlignmentFlag>
class Qt_AlignmentFlag_Enums : public QFlags<enum Qt::AlignmentFlag> {
public:
  Qt_AlignmentFlag_Enums () : m_flags () { }
  Qt_AlignmentFlag_Enums (enum Qt::AlignmentFlag v) : m_flags (v) { }
  Qt_AlignmentFlag_Enums (const QFlags<enum Qt::AlignmentFlag> &v) : m_flags (v) { }
  QFlags<enum Qt::AlignmentFlag> flags () const { return m_flags; }
private:
  QFlags<Qt::AlignmentFlag> m_flags;
};

//  Wrapper class for enum Qt::AlignmentFlag
class Qt_AlignmentFlag_Enum : public Qt_AlignmentFlag_Enums {
public:
  Qt_AlignmentFlag_Enum () { }
  Qt_AlignmentFlag_Enum (enum Qt::AlignmentFlag v) : Qt_AlignmentFlag_Enums (v) { }
  enum Qt::AlignmentFlag value () const { return (enum Qt::AlignmentFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::AlignmentFlag>
template <>
struct Converter<QFlags<enum Qt::AlignmentFlag> >
{
public:
  typedef QFlags<enum Qt::AlignmentFlag> source_type;
  typedef Qt_AlignmentFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::AlignmentFlag
template <>
struct Converter<enum Qt::AlignmentFlag>
{
public:
  typedef enum Qt::AlignmentFlag source_type;
  typedef Qt_AlignmentFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ConnectionType>
class Qt_ConnectionType_Enums : public QFlags<enum Qt::ConnectionType> {
public:
  Qt_ConnectionType_Enums () : m_flags () { }
  Qt_ConnectionType_Enums (enum Qt::ConnectionType v) : m_flags (v) { }
  Qt_ConnectionType_Enums (const QFlags<enum Qt::ConnectionType> &v) : m_flags (v) { }
  QFlags<enum Qt::ConnectionType> flags () const { return m_flags; }
private:
  QFlags<Qt::ConnectionType> m_flags;
};

//  Wrapper class for enum Qt::ConnectionType
class Qt_ConnectionType_Enum : public Qt_ConnectionType_Enums {
public:
  Qt_ConnectionType_Enum () { }
  Qt_ConnectionType_Enum (enum Qt::ConnectionType v) : Qt_ConnectionType_Enums (v) { }
  enum Qt::ConnectionType value () const { return (enum Qt::ConnectionType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ConnectionType>
template <>
struct Converter<QFlags<enum Qt::ConnectionType> >
{
public:
  typedef QFlags<enum Qt::ConnectionType> source_type;
  typedef Qt_ConnectionType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ConnectionType
template <>
struct Converter<enum Qt::ConnectionType>
{
public:
  typedef enum Qt::ConnectionType source_type;
  typedef Qt_ConnectionType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ContextMenuPolicy>
class Qt_ContextMenuPolicy_Enums : public QFlags<enum Qt::ContextMenuPolicy> {
public:
  Qt_ContextMenuPolicy_Enums () : m_flags () { }
  Qt_ContextMenuPolicy_Enums (enum Qt::ContextMenuPolicy v) : m_flags (v) { }
  Qt_ContextMenuPolicy_Enums (const QFlags<enum Qt::ContextMenuPolicy> &v) : m_flags (v) { }
  QFlags<enum Qt::ContextMenuPolicy> flags () const { return m_flags; }
private:
  QFlags<Qt::ContextMenuPolicy> m_flags;
};

//  Wrapper class for enum Qt::ContextMenuPolicy
class Qt_ContextMenuPolicy_Enum : public Qt_ContextMenuPolicy_Enums {
public:
  Qt_ContextMenuPolicy_Enum () { }
  Qt_ContextMenuPolicy_Enum (enum Qt::ContextMenuPolicy v) : Qt_ContextMenuPolicy_Enums (v) { }
  enum Qt::ContextMenuPolicy value () const { return (enum Qt::ContextMenuPolicy) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ContextMenuPolicy>
template <>
struct Converter<QFlags<enum Qt::ContextMenuPolicy> >
{
public:
  typedef QFlags<enum Qt::ContextMenuPolicy> source_type;
  typedef Qt_ContextMenuPolicy_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ContextMenuPolicy
template <>
struct Converter<enum Qt::ContextMenuPolicy>
{
public:
  typedef enum Qt::ContextMenuPolicy source_type;
  typedef Qt_ContextMenuPolicy_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::DropAction>
class Qt_DropAction_Enums : public QFlags<enum Qt::DropAction> {
public:
  Qt_DropAction_Enums () : m_flags () { }
  Qt_DropAction_Enums (enum Qt::DropAction v) : m_flags (v) { }
  Qt_DropAction_Enums (const QFlags<enum Qt::DropAction> &v) : m_flags (v) { }
  QFlags<enum Qt::DropAction> flags () const { return m_flags; }
private:
  QFlags<Qt::DropAction> m_flags;
};

//  Wrapper class for enum Qt::DropAction
class Qt_DropAction_Enum : public Qt_DropAction_Enums {
public:
  Qt_DropAction_Enum () { }
  Qt_DropAction_Enum (enum Qt::DropAction v) : Qt_DropAction_Enums (v) { }
  enum Qt::DropAction value () const { return (enum Qt::DropAction) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::DropAction>
template <>
struct Converter<QFlags<enum Qt::DropAction> >
{
public:
  typedef QFlags<enum Qt::DropAction> source_type;
  typedef Qt_DropAction_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::DropAction
template <>
struct Converter<enum Qt::DropAction>
{
public:
  typedef enum Qt::DropAction source_type;
  typedef Qt_DropAction_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::FocusPolicy>
class Qt_FocusPolicy_Enums : public QFlags<enum Qt::FocusPolicy> {
public:
  Qt_FocusPolicy_Enums () : m_flags () { }
  Qt_FocusPolicy_Enums (enum Qt::FocusPolicy v) : m_flags (v) { }
  Qt_FocusPolicy_Enums (const QFlags<enum Qt::FocusPolicy> &v) : m_flags (v) { }
  QFlags<enum Qt::FocusPolicy> flags () const { return m_flags; }
private:
  QFlags<Qt::FocusPolicy> m_flags;
};

//  Wrapper class for enum Qt::FocusPolicy
class Qt_FocusPolicy_Enum : public Qt_FocusPolicy_Enums {
public:
  Qt_FocusPolicy_Enum () { }
  Qt_FocusPolicy_Enum (enum Qt::FocusPolicy v) : Qt_FocusPolicy_Enums (v) { }
  enum Qt::FocusPolicy value () const { return (enum Qt::FocusPolicy) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::FocusPolicy>
template <>
struct Converter<QFlags<enum Qt::FocusPolicy> >
{
public:
  typedef QFlags<enum Qt::FocusPolicy> source_type;
  typedef Qt_FocusPolicy_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::FocusPolicy
template <>
struct Converter<enum Qt::FocusPolicy>
{
public:
  typedef enum Qt::FocusPolicy source_type;
  typedef Qt_FocusPolicy_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::FocusReason>
class Qt_FocusReason_Enums : public QFlags<enum Qt::FocusReason> {
public:
  Qt_FocusReason_Enums () : m_flags () { }
  Qt_FocusReason_Enums (enum Qt::FocusReason v) : m_flags (v) { }
  Qt_FocusReason_Enums (const QFlags<enum Qt::FocusReason> &v) : m_flags (v) { }
  QFlags<enum Qt::FocusReason> flags () const { return m_flags; }
private:
  QFlags<Qt::FocusReason> m_flags;
};

//  Wrapper class for enum Qt::FocusReason
class Qt_FocusReason_Enum : public Qt_FocusReason_Enums {
public:
  Qt_FocusReason_Enum () { }
  Qt_FocusReason_Enum (enum Qt::FocusReason v) : Qt_FocusReason_Enums (v) { }
  enum Qt::FocusReason value () const { return (enum Qt::FocusReason) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::FocusReason>
template <>
struct Converter<QFlags<enum Qt::FocusReason> >
{
public:
  typedef QFlags<enum Qt::FocusReason> source_type;
  typedef Qt_FocusReason_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::FocusReason
template <>
struct Converter<enum Qt::FocusReason>
{
public:
  typedef enum Qt::FocusReason source_type;
  typedef Qt_FocusReason_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::GestureFlag>
class Qt_GestureFlag_Enums : public QFlags<enum Qt::GestureFlag> {
public:
  Qt_GestureFlag_Enums () : m_flags () { }
  Qt_GestureFlag_Enums (enum Qt::GestureFlag v) : m_flags (v) { }
  Qt_GestureFlag_Enums (const QFlags<enum Qt::GestureFlag> &v) : m_flags (v) { }
  QFlags<enum Qt::GestureFlag> flags () const { return m_flags; }
private:
  QFlags<Qt::GestureFlag> m_flags;
};

//  Wrapper class for enum Qt::GestureFlag
class Qt_GestureFlag_Enum : public Qt_GestureFlag_Enums {
public:
  Qt_GestureFlag_Enum () { }
  Qt_GestureFlag_Enum (enum Qt::GestureFlag v) : Qt_GestureFlag_Enums (v) { }
  enum Qt::GestureFlag value () const { return (enum Qt::GestureFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::GestureFlag>
template <>
struct Converter<QFlags<enum Qt::GestureFlag> >
{
public:
  typedef QFlags<enum Qt::GestureFlag> source_type;
  typedef Qt_GestureFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::GestureFlag
template <>
struct Converter<enum Qt::GestureFlag>
{
public:
  typedef enum Qt::GestureFlag source_type;
  typedef Qt_GestureFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::GestureType>
class Qt_GestureType_Enums : public QFlags<enum Qt::GestureType> {
public:
  Qt_GestureType_Enums () : m_flags () { }
  Qt_GestureType_Enums (enum Qt::GestureType v) : m_flags (v) { }
  Qt_GestureType_Enums (const QFlags<enum Qt::GestureType> &v) : m_flags (v) { }
  QFlags<enum Qt::GestureType> flags () const { return m_flags; }
private:
  QFlags<Qt::GestureType> m_flags;
};

//  Wrapper class for enum Qt::GestureType
class Qt_GestureType_Enum : public Qt_GestureType_Enums {
public:
  Qt_GestureType_Enum () { }
  Qt_GestureType_Enum (enum Qt::GestureType v) : Qt_GestureType_Enums (v) { }
  enum Qt::GestureType value () const { return (enum Qt::GestureType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::GestureType>
template <>
struct Converter<QFlags<enum Qt::GestureType> >
{
public:
  typedef QFlags<enum Qt::GestureType> source_type;
  typedef Qt_GestureType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::GestureType
template <>
struct Converter<enum Qt::GestureType>
{
public:
  typedef enum Qt::GestureType source_type;
  typedef Qt_GestureType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::InputMethodHint>
class Qt_InputMethodHint_Enums : public QFlags<enum Qt::InputMethodHint> {
public:
  Qt_InputMethodHint_Enums () : m_flags () { }
  Qt_InputMethodHint_Enums (enum Qt::InputMethodHint v) : m_flags (v) { }
  Qt_InputMethodHint_Enums (const QFlags<enum Qt::InputMethodHint> &v) : m_flags (v) { }
  QFlags<enum Qt::InputMethodHint> flags () const { return m_flags; }
private:
  QFlags<Qt::InputMethodHint> m_flags;
};

//  Wrapper class for enum Qt::InputMethodHint
class Qt_InputMethodHint_Enum : public Qt_InputMethodHint_Enums {
public:
  Qt_InputMethodHint_Enum () { }
  Qt_InputMethodHint_Enum (enum Qt::InputMethodHint v) : Qt_InputMethodHint_Enums (v) { }
  enum Qt::InputMethodHint value () const { return (enum Qt::InputMethodHint) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::InputMethodHint>
template <>
struct Converter<QFlags<enum Qt::InputMethodHint> >
{
public:
  typedef QFlags<enum Qt::InputMethodHint> source_type;
  typedef Qt_InputMethodHint_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::InputMethodHint
template <>
struct Converter<enum Qt::InputMethodHint>
{
public:
  typedef enum Qt::InputMethodHint source_type;
  typedef Qt_InputMethodHint_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::InputMethodQuery>
class Qt_InputMethodQuery_Enums : public QFlags<enum Qt::InputMethodQuery> {
public:
  Qt_InputMethodQuery_Enums () : m_flags () { }
  Qt_InputMethodQuery_Enums (enum Qt::InputMethodQuery v) : m_flags (v) { }
  Qt_InputMethodQuery_Enums (const QFlags<enum Qt::InputMethodQuery> &v) : m_flags (v) { }
  QFlags<enum Qt::InputMethodQuery> flags () const { return m_flags; }
private:
  QFlags<Qt::InputMethodQuery> m_flags;
};

//  Wrapper class for enum Qt::InputMethodQuery
class Qt_InputMethodQuery_Enum : public Qt_InputMethodQuery_Enums {
public:
  Qt_InputMethodQuery_Enum () { }
  Qt_InputMethodQuery_Enum (enum Qt::InputMethodQuery v) : Qt_InputMethodQuery_Enums (v) { }
  enum Qt::InputMethodQuery value () const { return (enum Qt::InputMethodQuery) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::InputMethodQuery>
template <>
struct Converter<QFlags<enum Qt::InputMethodQuery> >
{
public:
  typedef QFlags<enum Qt::InputMethodQuery> source_type;
  typedef Qt_InputMethodQuery_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::InputMethodQuery
template <>
struct Converter<enum Qt::InputMethodQuery>
{
public:
  typedef enum Qt::InputMethodQuery source_type;
  typedef Qt_InputMethodQuery_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::KeyboardModifier>
class Qt_KeyboardModifier_Enums : public QFlags<enum Qt::KeyboardModifier> {
public:
  Qt_KeyboardModifier_Enums () : m_flags () { }
  Qt_KeyboardModifier_Enums (enum Qt::KeyboardModifier v) : m_flags (v) { }
  Qt_KeyboardModifier_Enums (const QFlags<enum Qt::KeyboardModifier> &v) : m_flags (v) { }
  QFlags<enum Qt::KeyboardModifier> flags () const { return m_flags; }
private:
  QFlags<Qt::KeyboardModifier> m_flags;
};

//  Wrapper class for enum Qt::KeyboardModifier
class Qt_KeyboardModifier_Enum : public Qt_KeyboardModifier_Enums {
public:
  Qt_KeyboardModifier_Enum () { }
  Qt_KeyboardModifier_Enum (enum Qt::KeyboardModifier v) : Qt_KeyboardModifier_Enums (v) { }
  enum Qt::KeyboardModifier value () const { return (enum Qt::KeyboardModifier) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::KeyboardModifier>
template <>
struct Converter<QFlags<enum Qt::KeyboardModifier> >
{
public:
  typedef QFlags<enum Qt::KeyboardModifier> source_type;
  typedef Qt_KeyboardModifier_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::KeyboardModifier
template <>
struct Converter<enum Qt::KeyboardModifier>
{
public:
  typedef enum Qt::KeyboardModifier source_type;
  typedef Qt_KeyboardModifier_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::LayoutDirection>
class Qt_LayoutDirection_Enums : public QFlags<enum Qt::LayoutDirection> {
public:
  Qt_LayoutDirection_Enums () : m_flags () { }
  Qt_LayoutDirection_Enums (enum Qt::LayoutDirection v) : m_flags (v) { }
  Qt_LayoutDirection_Enums (const QFlags<enum Qt::LayoutDirection> &v) : m_flags (v) { }
  QFlags<enum Qt::LayoutDirection> flags () const { return m_flags; }
private:
  QFlags<Qt::LayoutDirection> m_flags;
};

//  Wrapper class for enum Qt::LayoutDirection
class Qt_LayoutDirection_Enum : public Qt_LayoutDirection_Enums {
public:
  Qt_LayoutDirection_Enum () { }
  Qt_LayoutDirection_Enum (enum Qt::LayoutDirection v) : Qt_LayoutDirection_Enums (v) { }
  enum Qt::LayoutDirection value () const { return (enum Qt::LayoutDirection) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::LayoutDirection>
template <>
struct Converter<QFlags<enum Qt::LayoutDirection> >
{
public:
  typedef QFlags<enum Qt::LayoutDirection> source_type;
  typedef Qt_LayoutDirection_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::LayoutDirection
template <>
struct Converter<enum Qt::LayoutDirection>
{
public:
  typedef enum Qt::LayoutDirection source_type;
  typedef Qt_LayoutDirection_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::MatchFlag>
class Qt_MatchFlag_Enums : public QFlags<enum Qt::MatchFlag> {
public:
  Qt_MatchFlag_Enums () : m_flags () { }
  Qt_MatchFlag_Enums (enum Qt::MatchFlag v) : m_flags (v) { }
  Qt_MatchFlag_Enums (const QFlags<enum Qt::MatchFlag> &v) : m_flags (v) { }
  QFlags<enum Qt::MatchFlag> flags () const { return m_flags; }
private:
  QFlags<Qt::MatchFlag> m_flags;
};

//  Wrapper class for enum Qt::MatchFlag
class Qt_MatchFlag_Enum : public Qt_MatchFlag_Enums {
public:
  Qt_MatchFlag_Enum () { }
  Qt_MatchFlag_Enum (enum Qt::MatchFlag v) : Qt_MatchFlag_Enums (v) { }
  enum Qt::MatchFlag value () const { return (enum Qt::MatchFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::MatchFlag>
template <>
struct Converter<QFlags<enum Qt::MatchFlag> >
{
public:
  typedef QFlags<enum Qt::MatchFlag> source_type;
  typedef Qt_MatchFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::MatchFlag
template <>
struct Converter<enum Qt::MatchFlag>
{
public:
  typedef enum Qt::MatchFlag source_type;
  typedef Qt_MatchFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ScrollBarPolicy>
class Qt_ScrollBarPolicy_Enums : public QFlags<enum Qt::ScrollBarPolicy> {
public:
  Qt_ScrollBarPolicy_Enums () : m_flags () { }
  Qt_ScrollBarPolicy_Enums (enum Qt::ScrollBarPolicy v) : m_flags (v) { }
  Qt_ScrollBarPolicy_Enums (const QFlags<enum Qt::ScrollBarPolicy> &v) : m_flags (v) { }
  QFlags<enum Qt::ScrollBarPolicy> flags () const { return m_flags; }
private:
  QFlags<Qt::ScrollBarPolicy> m_flags;
};

//  Wrapper class for enum Qt::ScrollBarPolicy
class Qt_ScrollBarPolicy_Enum : public Qt_ScrollBarPolicy_Enums {
public:
  Qt_ScrollBarPolicy_Enum () { }
  Qt_ScrollBarPolicy_Enum (enum Qt::ScrollBarPolicy v) : Qt_ScrollBarPolicy_Enums (v) { }
  enum Qt::ScrollBarPolicy value () const { return (enum Qt::ScrollBarPolicy) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ScrollBarPolicy>
template <>
struct Converter<QFlags<enum Qt::ScrollBarPolicy> >
{
public:
  typedef QFlags<enum Qt::ScrollBarPolicy> source_type;
  typedef Qt_ScrollBarPolicy_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ScrollBarPolicy
template <>
struct Converter<enum Qt::ScrollBarPolicy>
{
public:
  typedef enum Qt::ScrollBarPolicy source_type;
  typedef Qt_ScrollBarPolicy_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ShortcutContext>
class Qt_ShortcutContext_Enums : public QFlags<enum Qt::ShortcutContext> {
public:
  Qt_ShortcutContext_Enums () : m_flags () { }
  Qt_ShortcutContext_Enums (enum Qt::ShortcutContext v) : m_flags (v) { }
  Qt_ShortcutContext_Enums (const QFlags<enum Qt::ShortcutContext> &v) : m_flags (v) { }
  QFlags<enum Qt::ShortcutContext> flags () const { return m_flags; }
private:
  QFlags<Qt::ShortcutContext> m_flags;
};

//  Wrapper class for enum Qt::ShortcutContext
class Qt_ShortcutContext_Enum : public Qt_ShortcutContext_Enums {
public:
  Qt_ShortcutContext_Enum () { }
  Qt_ShortcutContext_Enum (enum Qt::ShortcutContext v) : Qt_ShortcutContext_Enums (v) { }
  enum Qt::ShortcutContext value () const { return (enum Qt::ShortcutContext) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ShortcutContext>
template <>
struct Converter<QFlags<enum Qt::ShortcutContext> >
{
public:
  typedef QFlags<enum Qt::ShortcutContext> source_type;
  typedef Qt_ShortcutContext_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ShortcutContext
template <>
struct Converter<enum Qt::ShortcutContext>
{
public:
  typedef enum Qt::ShortcutContext source_type;
  typedef Qt_ShortcutContext_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::SortOrder>
class Qt_SortOrder_Enums : public QFlags<enum Qt::SortOrder> {
public:
  Qt_SortOrder_Enums () : m_flags () { }
  Qt_SortOrder_Enums (enum Qt::SortOrder v) : m_flags (v) { }
  Qt_SortOrder_Enums (const QFlags<enum Qt::SortOrder> &v) : m_flags (v) { }
  QFlags<enum Qt::SortOrder> flags () const { return m_flags; }
private:
  QFlags<Qt::SortOrder> m_flags;
};

//  Wrapper class for enum Qt::SortOrder
class Qt_SortOrder_Enum : public Qt_SortOrder_Enums {
public:
  Qt_SortOrder_Enum () { }
  Qt_SortOrder_Enum (enum Qt::SortOrder v) : Qt_SortOrder_Enums (v) { }
  enum Qt::SortOrder value () const { return (enum Qt::SortOrder) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::SortOrder>
template <>
struct Converter<QFlags<enum Qt::SortOrder> >
{
public:
  typedef QFlags<enum Qt::SortOrder> source_type;
  typedef Qt_SortOrder_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::SortOrder
template <>
struct Converter<enum Qt::SortOrder>
{
public:
  typedef enum Qt::SortOrder source_type;
  typedef Qt_SortOrder_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::TextElideMode>
class Qt_TextElideMode_Enums : public QFlags<enum Qt::TextElideMode> {
public:
  Qt_TextElideMode_Enums () : m_flags () { }
  Qt_TextElideMode_Enums (enum Qt::TextElideMode v) : m_flags (v) { }
  Qt_TextElideMode_Enums (const QFlags<enum Qt::TextElideMode> &v) : m_flags (v) { }
  QFlags<enum Qt::TextElideMode> flags () const { return m_flags; }
private:
  QFlags<Qt::TextElideMode> m_flags;
};

//  Wrapper class for enum Qt::TextElideMode
class Qt_TextElideMode_Enum : public Qt_TextElideMode_Enums {
public:
  Qt_TextElideMode_Enum () { }
  Qt_TextElideMode_Enum (enum Qt::TextElideMode v) : Qt_TextElideMode_Enums (v) { }
  enum Qt::TextElideMode value () const { return (enum Qt::TextElideMode) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::TextElideMode>
template <>
struct Converter<QFlags<enum Qt::TextElideMode> >
{
public:
  typedef QFlags<enum Qt::TextElideMode> source_type;
  typedef Qt_TextElideMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::TextElideMode
template <>
struct Converter<enum Qt::TextElideMode>
{
public:
  typedef enum Qt::TextElideMode source_type;
  typedef Qt_TextElideMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::WidgetAttribute>
class Qt_WidgetAttribute_Enums : public QFlags<enum Qt::WidgetAttribute> {
public:
  Qt_WidgetAttribute_Enums () : m_flags () { }
  Qt_WidgetAttribute_Enums (enum Qt::WidgetAttribute v) : m_flags (v) { }
  Qt_WidgetAttribute_Enums (const QFlags<enum Qt::WidgetAttribute> &v) : m_flags (v) { }
  QFlags<enum Qt::WidgetAttribute> flags () const { return m_flags; }
private:
  QFlags<Qt::WidgetAttribute> m_flags;
};

//  Wrapper class for enum Qt::WidgetAttribute
class Qt_WidgetAttribute_Enum : public Qt_WidgetAttribute_Enums {
public:
  Qt_WidgetAttribute_Enum () { }
  Qt_WidgetAttribute_Enum (enum Qt::WidgetAttribute v) : Qt_WidgetAttribute_Enums (v) { }
  enum Qt::WidgetAttribute value () const { return (enum Qt::WidgetAttribute) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::WidgetAttribute>
template <>
struct Converter<QFlags<enum Qt::WidgetAttribute> >
{
public:
  typedef QFlags<enum Qt::WidgetAttribute> source_type;
  typedef Qt_WidgetAttribute_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::WidgetAttribute
template <>
struct Converter<enum Qt::WidgetAttribute>
{
public:
  typedef enum Qt::WidgetAttribute source_type;
  typedef Qt_WidgetAttribute_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::WindowModality>
class Qt_WindowModality_Enums : public QFlags<enum Qt::WindowModality> {
public:
  Qt_WindowModality_Enums () : m_flags () { }
  Qt_WindowModality_Enums (enum Qt::WindowModality v) : m_flags (v) { }
  Qt_WindowModality_Enums (const QFlags<enum Qt::WindowModality> &v) : m_flags (v) { }
  QFlags<enum Qt::WindowModality> flags () const { return m_flags; }
private:
  QFlags<Qt::WindowModality> m_flags;
};

//  Wrapper class for enum Qt::WindowModality
class Qt_WindowModality_Enum : public Qt_WindowModality_Enums {
public:
  Qt_WindowModality_Enum () { }
  Qt_WindowModality_Enum (enum Qt::WindowModality v) : Qt_WindowModality_Enums (v) { }
  enum Qt::WindowModality value () const { return (enum Qt::WindowModality) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::WindowModality>
template <>
struct Converter<QFlags<enum Qt::WindowModality> >
{
public:
  typedef QFlags<enum Qt::WindowModality> source_type;
  typedef Qt_WindowModality_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::WindowModality
template <>
struct Converter<enum Qt::WindowModality>
{
public:
  typedef enum Qt::WindowModality source_type;
  typedef Qt_WindowModality_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::WindowState>
class Qt_WindowState_Enums : public QFlags<enum Qt::WindowState> {
public:
  Qt_WindowState_Enums () : m_flags () { }
  Qt_WindowState_Enums (enum Qt::WindowState v) : m_flags (v) { }
  Qt_WindowState_Enums (const QFlags<enum Qt::WindowState> &v) : m_flags (v) { }
  QFlags<enum Qt::WindowState> flags () const { return m_flags; }
private:
  QFlags<Qt::WindowState> m_flags;
};

//  Wrapper class for enum Qt::WindowState
class Qt_WindowState_Enum : public Qt_WindowState_Enums {
public:
  Qt_WindowState_Enum () { }
  Qt_WindowState_Enum (enum Qt::WindowState v) : Qt_WindowState_Enums (v) { }
  enum Qt::WindowState value () const { return (enum Qt::WindowState) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::WindowState>
template <>
struct Converter<QFlags<enum Qt::WindowState> >
{
public:
  typedef QFlags<enum Qt::WindowState> source_type;
  typedef Qt_WindowState_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::WindowState
template <>
struct Converter<enum Qt::WindowState>
{
public:
  typedef enum Qt::WindowState source_type;
  typedef Qt_WindowState_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::WindowType>
class Qt_WindowType_Enums : public QFlags<enum Qt::WindowType> {
public:
  Qt_WindowType_Enums () : m_flags () { }
  Qt_WindowType_Enums (enum Qt::WindowType v) : m_flags (v) { }
  Qt_WindowType_Enums (const QFlags<enum Qt::WindowType> &v) : m_flags (v) { }
  QFlags<enum Qt::WindowType> flags () const { return m_flags; }
private:
  QFlags<Qt::WindowType> m_flags;
};

//  Wrapper class for enum Qt::WindowType
class Qt_WindowType_Enum : public Qt_WindowType_Enums {
public:
  Qt_WindowType_Enum () { }
  Qt_WindowType_Enum (enum Qt::WindowType v) : Qt_WindowType_Enums (v) { }
  enum Qt::WindowType value () const { return (enum Qt::WindowType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::WindowType>
template <>
struct Converter<QFlags<enum Qt::WindowType> >
{
public:
  typedef QFlags<enum Qt::WindowType> source_type;
  typedef Qt_WindowType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::WindowType
template <>
struct Converter<enum Qt::WindowType>
{
public:
  typedef enum Qt::WindowType source_type;
  typedef Qt_WindowType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
