
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQTextCodec_ConverterState.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtCore.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQTextCodec_ConverterState_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QTextCodec::ConverterState

//  Constructor QTextCodec::ConverterState::ConverterState(QFlags<QTextCodec::ConversionFlag> f)


static void _init_ctor_QTextCodec_ConverterState_3668 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("f", true, "QTextCodec::DefaultConversion");
  decl->add_arg<const qt_gsi::Converter<QFlags<QTextCodec::ConversionFlag> >::target_type & > (argspec_0);
  decl->set_return_new<QTextCodec::ConverterState *> ();
}

static void _call_ctor_QTextCodec_ConverterState_3668 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  tl::Heap heap;
  const qt_gsi::Converter<QFlags<QTextCodec::ConversionFlag> >::target_type & arg1 = args ? args.read<const qt_gsi::Converter<QFlags<QTextCodec::ConversionFlag> >::target_type & > () : (const qt_gsi::Converter<QFlags<QTextCodec::ConversionFlag> >::target_type &)(qt_gsi::CppToQtReadAdaptor<QFlags<QTextCodec::ConversionFlag> >(heap, QTextCodec::DefaultConversion));
  ret.write<QTextCodec::ConverterState *> (new QTextCodec::ConverterState (qt_gsi::QtToCppAdaptor<QFlags<QTextCodec::ConversionFlag> >(arg1).cref()));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QTextCodec_ConverterState_3668 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QTextCodec::ConverterState::ConverterState(QFlags<QTextCodec::ConversionFlag> f)\nThis method creates an object of class QTextCodec::ConverterState.", &_init_ctor_QTextCodec_ConverterState_3668, &_call_ctor_QTextCodec_ConverterState_3668);
}


namespace gsi
{
gsi::Class<QTextCodec::ConverterState> decl_QTextCodec_ConverterState ("QTextCodec_ConverterState",
  gsi::Methods(_create_ctor_QTextCodec_ConverterState_3668 ()),
  "@qt\n@brief Binding of QTextCodec::ConverterState");

gsi::ClassExt<QTextCodec> decl_QTextCodec_ConverterState_as_child (decl_QTextCodec_ConverterState, "ConverterState");
}

