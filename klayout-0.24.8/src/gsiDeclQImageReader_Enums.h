
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQImageReader_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQImageReader_Enums
#define _HDR_gsiDeclQImageReader_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QImage::Format>
class QImage_Format_Enums : public QFlags<enum QImage::Format> {
public:
  QImage_Format_Enums () : m_flags () { }
  QImage_Format_Enums (enum QImage::Format v) : m_flags (v) { }
  QImage_Format_Enums (const QFlags<enum QImage::Format> &v) : m_flags (v) { }
  QFlags<enum QImage::Format> flags () const { return m_flags; }
private:
  QFlags<QImage::Format> m_flags;
};

//  Wrapper class for enum QImage::Format
class QImage_Format_Enum : public QImage_Format_Enums {
public:
  QImage_Format_Enum () { }
  QImage_Format_Enum (enum QImage::Format v) : QImage_Format_Enums (v) { }
  enum QImage::Format value () const { return (enum QImage::Format) flags ().operator int (); }
};

//  Converter for QFlags<enum QImage::Format>
template <>
struct Converter<QFlags<enum QImage::Format> >
{
public:
  typedef QFlags<enum QImage::Format> source_type;
  typedef QImage_Format_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QImage::Format
template <>
struct Converter<enum QImage::Format>
{
public:
  typedef enum QImage::Format source_type;
  typedef QImage_Format_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QImageIOHandler::ImageOption>
class QImageIOHandler_ImageOption_Enums : public QFlags<enum QImageIOHandler::ImageOption> {
public:
  QImageIOHandler_ImageOption_Enums () : m_flags () { }
  QImageIOHandler_ImageOption_Enums (enum QImageIOHandler::ImageOption v) : m_flags (v) { }
  QImageIOHandler_ImageOption_Enums (const QFlags<enum QImageIOHandler::ImageOption> &v) : m_flags (v) { }
  QFlags<enum QImageIOHandler::ImageOption> flags () const { return m_flags; }
private:
  QFlags<QImageIOHandler::ImageOption> m_flags;
};

//  Wrapper class for enum QImageIOHandler::ImageOption
class QImageIOHandler_ImageOption_Enum : public QImageIOHandler_ImageOption_Enums {
public:
  QImageIOHandler_ImageOption_Enum () { }
  QImageIOHandler_ImageOption_Enum (enum QImageIOHandler::ImageOption v) : QImageIOHandler_ImageOption_Enums (v) { }
  enum QImageIOHandler::ImageOption value () const { return (enum QImageIOHandler::ImageOption) flags ().operator int (); }
};

//  Converter for QFlags<enum QImageIOHandler::ImageOption>
template <>
struct Converter<QFlags<enum QImageIOHandler::ImageOption> >
{
public:
  typedef QFlags<enum QImageIOHandler::ImageOption> source_type;
  typedef QImageIOHandler_ImageOption_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QImageIOHandler::ImageOption
template <>
struct Converter<enum QImageIOHandler::ImageOption>
{
public:
  typedef enum QImageIOHandler::ImageOption source_type;
  typedef QImageIOHandler_ImageOption_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QImageReader::ImageReaderError>
class QImageReader_ImageReaderError_Enums : public QFlags<enum QImageReader::ImageReaderError> {
public:
  QImageReader_ImageReaderError_Enums () : m_flags () { }
  QImageReader_ImageReaderError_Enums (enum QImageReader::ImageReaderError v) : m_flags (v) { }
  QImageReader_ImageReaderError_Enums (const QFlags<enum QImageReader::ImageReaderError> &v) : m_flags (v) { }
  QFlags<enum QImageReader::ImageReaderError> flags () const { return m_flags; }
private:
  QFlags<QImageReader::ImageReaderError> m_flags;
};

//  Wrapper class for enum QImageReader::ImageReaderError
class QImageReader_ImageReaderError_Enum : public QImageReader_ImageReaderError_Enums {
public:
  QImageReader_ImageReaderError_Enum () { }
  QImageReader_ImageReaderError_Enum (enum QImageReader::ImageReaderError v) : QImageReader_ImageReaderError_Enums (v) { }
  enum QImageReader::ImageReaderError value () const { return (enum QImageReader::ImageReaderError) flags ().operator int (); }
};

//  Converter for QFlags<enum QImageReader::ImageReaderError>
template <>
struct Converter<QFlags<enum QImageReader::ImageReaderError> >
{
public:
  typedef QFlags<enum QImageReader::ImageReaderError> source_type;
  typedef QImageReader_ImageReaderError_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QImageReader::ImageReaderError
template <>
struct Converter<enum QImageReader::ImageReaderError>
{
public:
  typedef enum QImageReader::ImageReaderError source_type;
  typedef QImageReader_ImageReaderError_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
