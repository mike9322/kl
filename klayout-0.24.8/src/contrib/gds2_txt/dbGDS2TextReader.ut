
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/


#include "contrib/gds2_txt/dbGDS2TextReader.h"
#include "utHead.h"

#include <iostream>

TEST(1) 
{
  std::string fn (getenv ("TESTSRC"));

  FILE *f = fopen ((fn + "/testdata/gds2_txt/read.txt").c_str (), "r");
  EXPECT_NE (f, NULL);
  if (f != NULL) {
    fclose (f);

    db::Manager m;
    db::Layout layout (&m);
    tl::InputStream stream ((fn + "/testdata/gds2_txt/read.txt").c_str ());
    db::GDS2ReaderText reader (stream);
    db::LayerMap map = reader.read (layout);

    EXPECT_EQ (fabs (layout.dbu () / 1e-3 - 1.0) < 1e-6, true);
    EXPECT_EQ (reader.libname (), "LIB");

    EXPECT_EQ (layout.layers (), 11);
    EXPECT_EQ (map.mapping_str (0), "2/0 : 2/0");
    EXPECT_EQ (map.mapping (10).layer, 8);
    EXPECT_EQ (map.mapping (10).datatype, 1);

    EXPECT_EQ (layout.cells (), 3);
    EXPECT_EQ (std::string (layout.cell_name (0)), "TRANS");
    EXPECT_EQ (std::string (layout.cell_name (1)), "INV");
    EXPECT_EQ (std::string (layout.cell_name (2)), "RINGO");
  }
}

TEST(2) 
{
  std::string fn (getenv ("TESTSRC"));

  FILE *f = fopen ((fn + "/testdata/gds2_txt/read2.txt").c_str (), "r");
  EXPECT_NE (f, NULL);
  if (f != NULL) {
    fclose (f);

    db::Manager m;
    db::Layout layout (&m);
    tl::InputStream stream ((fn + "/testdata/gds2_txt/read2.txt").c_str ());
    db::Reader reader (stream);
    db::LayerMap map = reader.read (layout);

    EXPECT_EQ (fabs (layout.dbu () / 1e-3 - 1.0) < 1e-6, true);

    EXPECT_EQ (layout.layers (), 11);
    EXPECT_EQ (map.mapping_str (0), "2/0 : 2/0");
    EXPECT_EQ (map.mapping (10).layer, 8);
    EXPECT_EQ (map.mapping (10).datatype, 1);

    EXPECT_EQ (layout.cells (), 3);
    EXPECT_EQ (std::string (layout.cell_name (0)), "TRANS");
    EXPECT_EQ (std::string (layout.cell_name (1)), "INV");
    EXPECT_EQ (std::string (layout.cell_name (2)), "RINGO");
  }
}

