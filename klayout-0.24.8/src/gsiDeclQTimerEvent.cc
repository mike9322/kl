
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQTimerEvent.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtCore.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQTimerEvent_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QTimerEvent

// int QTimerEvent::timerId()


static void _init_f_timerId_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_timerId_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QTimerEvent *)cls)->timerId ());
}

static qt_gsi::GenericMethod *_create_f_timerId_c0 ()
{
  return new qt_gsi::GenericMethod ("timerId", "@brief Method int QTimerEvent::timerId()\n", true, &_init_f_timerId_c0, &_call_f_timerId_c0);
}

namespace gsi
{
extern gsi::Class<QEvent> decl_QEvent;

gsi::Class<QTimerEvent> decl_QTimerEvent (decl_QEvent, "QTimerEvent_Native",
  gsi::Methods(_create_f_timerId_c0 ()),
  "@hide\n@alias QTimerEvent");
}


class QTimerEvent_Adaptor : public QTimerEvent, public qt_gsi::QtObjectBase
{
public:

  virtual ~QTimerEvent_Adaptor();

  //  [adaptor ctor] QTimerEvent::QTimerEvent(int timerId)
  QTimerEvent_Adaptor(int timerId) : QTimerEvent(timerId)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  
};

QTimerEvent_Adaptor::~QTimerEvent_Adaptor() { }

//  Constructor QTimerEvent::QTimerEvent(int timerId) (adaptor class)

static void _init_ctor_QTimerEvent_Adaptor_767 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("timerId");
  decl->add_arg<int > (argspec_0);
  decl->set_return_new<QTimerEvent_Adaptor *> ();
}

static void _call_ctor_QTimerEvent_Adaptor_767 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ret.write<QTimerEvent_Adaptor *> (new QTimerEvent_Adaptor (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QTimerEvent_Adaptor_767 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QTimerEvent::QTimerEvent(int timerId)\nThis method creates an object of class QTimerEvent.", &_init_ctor_QTimerEvent_Adaptor_767, &_call_ctor_QTimerEvent_Adaptor_767);
}

namespace gsi
{

extern gsi::Class<QTimerEvent> decl_QTimerEvent;

gsi::Class<QTimerEvent_Adaptor> decl_QTimerEvent_Adaptor (decl_QTimerEvent, "QTimerEvent",
  gsi::Methods(_create_ctor_QTimerEvent_Adaptor_767 ()),
  "@qt\n@brief Binding of QTimerEvent");

}

