
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQBitmap_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQBitmap_Enums
#define _HDR_gsiDeclQBitmap_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QImage::Format>
class QImage_Format_Enums : public QFlags<enum QImage::Format> {
public:
  QImage_Format_Enums () : m_flags () { }
  QImage_Format_Enums (enum QImage::Format v) : m_flags (v) { }
  QImage_Format_Enums (const QFlags<enum QImage::Format> &v) : m_flags (v) { }
  QFlags<enum QImage::Format> flags () const { return m_flags; }
private:
  QFlags<QImage::Format> m_flags;
};

//  Wrapper class for enum QImage::Format
class QImage_Format_Enum : public QImage_Format_Enums {
public:
  QImage_Format_Enum () { }
  QImage_Format_Enum (enum QImage::Format v) : QImage_Format_Enums (v) { }
  enum QImage::Format value () const { return (enum QImage::Format) flags ().operator int (); }
};

//  Converter for QFlags<enum QImage::Format>
template <>
struct Converter<QFlags<enum QImage::Format> >
{
public:
  typedef QFlags<enum QImage::Format> source_type;
  typedef QImage_Format_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QImage::Format
template <>
struct Converter<enum QImage::Format>
{
public:
  typedef enum QImage::Format source_type;
  typedef QImage_Format_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QPaintDevice::PaintDeviceMetric>
class QPaintDevice_PaintDeviceMetric_Enums : public QFlags<enum QPaintDevice::PaintDeviceMetric> {
public:
  QPaintDevice_PaintDeviceMetric_Enums () : m_flags () { }
  QPaintDevice_PaintDeviceMetric_Enums (enum QPaintDevice::PaintDeviceMetric v) : m_flags (v) { }
  QPaintDevice_PaintDeviceMetric_Enums (const QFlags<enum QPaintDevice::PaintDeviceMetric> &v) : m_flags (v) { }
  QFlags<enum QPaintDevice::PaintDeviceMetric> flags () const { return m_flags; }
private:
  QFlags<QPaintDevice::PaintDeviceMetric> m_flags;
};

//  Wrapper class for enum QPaintDevice::PaintDeviceMetric
class QPaintDevice_PaintDeviceMetric_Enum : public QPaintDevice_PaintDeviceMetric_Enums {
public:
  QPaintDevice_PaintDeviceMetric_Enum () { }
  QPaintDevice_PaintDeviceMetric_Enum (enum QPaintDevice::PaintDeviceMetric v) : QPaintDevice_PaintDeviceMetric_Enums (v) { }
  enum QPaintDevice::PaintDeviceMetric value () const { return (enum QPaintDevice::PaintDeviceMetric) flags ().operator int (); }
};

//  Converter for QFlags<enum QPaintDevice::PaintDeviceMetric>
template <>
struct Converter<QFlags<enum QPaintDevice::PaintDeviceMetric> >
{
public:
  typedef QFlags<enum QPaintDevice::PaintDeviceMetric> source_type;
  typedef QPaintDevice_PaintDeviceMetric_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QPaintDevice::PaintDeviceMetric
template <>
struct Converter<enum QPaintDevice::PaintDeviceMetric>
{
public:
  typedef enum QPaintDevice::PaintDeviceMetric source_type;
  typedef QPaintDevice_PaintDeviceMetric_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::AspectRatioMode>
class Qt_AspectRatioMode_Enums : public QFlags<enum Qt::AspectRatioMode> {
public:
  Qt_AspectRatioMode_Enums () : m_flags () { }
  Qt_AspectRatioMode_Enums (enum Qt::AspectRatioMode v) : m_flags (v) { }
  Qt_AspectRatioMode_Enums (const QFlags<enum Qt::AspectRatioMode> &v) : m_flags (v) { }
  QFlags<enum Qt::AspectRatioMode> flags () const { return m_flags; }
private:
  QFlags<Qt::AspectRatioMode> m_flags;
};

//  Wrapper class for enum Qt::AspectRatioMode
class Qt_AspectRatioMode_Enum : public Qt_AspectRatioMode_Enums {
public:
  Qt_AspectRatioMode_Enum () { }
  Qt_AspectRatioMode_Enum (enum Qt::AspectRatioMode v) : Qt_AspectRatioMode_Enums (v) { }
  enum Qt::AspectRatioMode value () const { return (enum Qt::AspectRatioMode) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::AspectRatioMode>
template <>
struct Converter<QFlags<enum Qt::AspectRatioMode> >
{
public:
  typedef QFlags<enum Qt::AspectRatioMode> source_type;
  typedef Qt_AspectRatioMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::AspectRatioMode
template <>
struct Converter<enum Qt::AspectRatioMode>
{
public:
  typedef enum Qt::AspectRatioMode source_type;
  typedef Qt_AspectRatioMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ImageConversionFlag>
class Qt_ImageConversionFlag_Enums : public QFlags<enum Qt::ImageConversionFlag> {
public:
  Qt_ImageConversionFlag_Enums () : m_flags () { }
  Qt_ImageConversionFlag_Enums (enum Qt::ImageConversionFlag v) : m_flags (v) { }
  Qt_ImageConversionFlag_Enums (const QFlags<enum Qt::ImageConversionFlag> &v) : m_flags (v) { }
  QFlags<enum Qt::ImageConversionFlag> flags () const { return m_flags; }
private:
  QFlags<Qt::ImageConversionFlag> m_flags;
};

//  Wrapper class for enum Qt::ImageConversionFlag
class Qt_ImageConversionFlag_Enum : public Qt_ImageConversionFlag_Enums {
public:
  Qt_ImageConversionFlag_Enum () { }
  Qt_ImageConversionFlag_Enum (enum Qt::ImageConversionFlag v) : Qt_ImageConversionFlag_Enums (v) { }
  enum Qt::ImageConversionFlag value () const { return (enum Qt::ImageConversionFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ImageConversionFlag>
template <>
struct Converter<QFlags<enum Qt::ImageConversionFlag> >
{
public:
  typedef QFlags<enum Qt::ImageConversionFlag> source_type;
  typedef Qt_ImageConversionFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ImageConversionFlag
template <>
struct Converter<enum Qt::ImageConversionFlag>
{
public:
  typedef enum Qt::ImageConversionFlag source_type;
  typedef Qt_ImageConversionFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::MaskMode>
class Qt_MaskMode_Enums : public QFlags<enum Qt::MaskMode> {
public:
  Qt_MaskMode_Enums () : m_flags () { }
  Qt_MaskMode_Enums (enum Qt::MaskMode v) : m_flags (v) { }
  Qt_MaskMode_Enums (const QFlags<enum Qt::MaskMode> &v) : m_flags (v) { }
  QFlags<enum Qt::MaskMode> flags () const { return m_flags; }
private:
  QFlags<Qt::MaskMode> m_flags;
};

//  Wrapper class for enum Qt::MaskMode
class Qt_MaskMode_Enum : public Qt_MaskMode_Enums {
public:
  Qt_MaskMode_Enum () { }
  Qt_MaskMode_Enum (enum Qt::MaskMode v) : Qt_MaskMode_Enums (v) { }
  enum Qt::MaskMode value () const { return (enum Qt::MaskMode) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::MaskMode>
template <>
struct Converter<QFlags<enum Qt::MaskMode> >
{
public:
  typedef QFlags<enum Qt::MaskMode> source_type;
  typedef Qt_MaskMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::MaskMode
template <>
struct Converter<enum Qt::MaskMode>
{
public:
  typedef enum Qt::MaskMode source_type;
  typedef Qt_MaskMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::TransformationMode>
class Qt_TransformationMode_Enums : public QFlags<enum Qt::TransformationMode> {
public:
  Qt_TransformationMode_Enums () : m_flags () { }
  Qt_TransformationMode_Enums (enum Qt::TransformationMode v) : m_flags (v) { }
  Qt_TransformationMode_Enums (const QFlags<enum Qt::TransformationMode> &v) : m_flags (v) { }
  QFlags<enum Qt::TransformationMode> flags () const { return m_flags; }
private:
  QFlags<Qt::TransformationMode> m_flags;
};

//  Wrapper class for enum Qt::TransformationMode
class Qt_TransformationMode_Enum : public Qt_TransformationMode_Enums {
public:
  Qt_TransformationMode_Enum () { }
  Qt_TransformationMode_Enum (enum Qt::TransformationMode v) : Qt_TransformationMode_Enums (v) { }
  enum Qt::TransformationMode value () const { return (enum Qt::TransformationMode) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::TransformationMode>
template <>
struct Converter<QFlags<enum Qt::TransformationMode> >
{
public:
  typedef QFlags<enum Qt::TransformationMode> source_type;
  typedef Qt_TransformationMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::TransformationMode
template <>
struct Converter<enum Qt::TransformationMode>
{
public:
  typedef enum Qt::TransformationMode source_type;
  typedef Qt_TransformationMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
