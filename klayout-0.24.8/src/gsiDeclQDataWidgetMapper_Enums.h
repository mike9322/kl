
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQDataWidgetMapper_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQDataWidgetMapper_Enums
#define _HDR_gsiDeclQDataWidgetMapper_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QDataWidgetMapper::SubmitPolicy>
class QDataWidgetMapper_SubmitPolicy_Enums : public QFlags<enum QDataWidgetMapper::SubmitPolicy> {
public:
  QDataWidgetMapper_SubmitPolicy_Enums () : m_flags () { }
  QDataWidgetMapper_SubmitPolicy_Enums (enum QDataWidgetMapper::SubmitPolicy v) : m_flags (v) { }
  QDataWidgetMapper_SubmitPolicy_Enums (const QFlags<enum QDataWidgetMapper::SubmitPolicy> &v) : m_flags (v) { }
  QFlags<enum QDataWidgetMapper::SubmitPolicy> flags () const { return m_flags; }
private:
  QFlags<QDataWidgetMapper::SubmitPolicy> m_flags;
};

//  Wrapper class for enum QDataWidgetMapper::SubmitPolicy
class QDataWidgetMapper_SubmitPolicy_Enum : public QDataWidgetMapper_SubmitPolicy_Enums {
public:
  QDataWidgetMapper_SubmitPolicy_Enum () { }
  QDataWidgetMapper_SubmitPolicy_Enum (enum QDataWidgetMapper::SubmitPolicy v) : QDataWidgetMapper_SubmitPolicy_Enums (v) { }
  enum QDataWidgetMapper::SubmitPolicy value () const { return (enum QDataWidgetMapper::SubmitPolicy) flags ().operator int (); }
};

//  Converter for QFlags<enum QDataWidgetMapper::SubmitPolicy>
template <>
struct Converter<QFlags<enum QDataWidgetMapper::SubmitPolicy> >
{
public:
  typedef QFlags<enum QDataWidgetMapper::SubmitPolicy> source_type;
  typedef QDataWidgetMapper_SubmitPolicy_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QDataWidgetMapper::SubmitPolicy
template <>
struct Converter<enum QDataWidgetMapper::SubmitPolicy>
{
public:
  typedef enum QDataWidgetMapper::SubmitPolicy source_type;
  typedef QDataWidgetMapper_SubmitPolicy_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ConnectionType>
class Qt_ConnectionType_Enums : public QFlags<enum Qt::ConnectionType> {
public:
  Qt_ConnectionType_Enums () : m_flags () { }
  Qt_ConnectionType_Enums (enum Qt::ConnectionType v) : m_flags (v) { }
  Qt_ConnectionType_Enums (const QFlags<enum Qt::ConnectionType> &v) : m_flags (v) { }
  QFlags<enum Qt::ConnectionType> flags () const { return m_flags; }
private:
  QFlags<Qt::ConnectionType> m_flags;
};

//  Wrapper class for enum Qt::ConnectionType
class Qt_ConnectionType_Enum : public Qt_ConnectionType_Enums {
public:
  Qt_ConnectionType_Enum () { }
  Qt_ConnectionType_Enum (enum Qt::ConnectionType v) : Qt_ConnectionType_Enums (v) { }
  enum Qt::ConnectionType value () const { return (enum Qt::ConnectionType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ConnectionType>
template <>
struct Converter<QFlags<enum Qt::ConnectionType> >
{
public:
  typedef QFlags<enum Qt::ConnectionType> source_type;
  typedef Qt_ConnectionType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ConnectionType
template <>
struct Converter<enum Qt::ConnectionType>
{
public:
  typedef enum Qt::ConnectionType source_type;
  typedef Qt_ConnectionType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::Orientation>
class Qt_Orientation_Enums : public QFlags<enum Qt::Orientation> {
public:
  Qt_Orientation_Enums () : m_flags () { }
  Qt_Orientation_Enums (enum Qt::Orientation v) : m_flags (v) { }
  Qt_Orientation_Enums (const QFlags<enum Qt::Orientation> &v) : m_flags (v) { }
  QFlags<enum Qt::Orientation> flags () const { return m_flags; }
private:
  QFlags<Qt::Orientation> m_flags;
};

//  Wrapper class for enum Qt::Orientation
class Qt_Orientation_Enum : public Qt_Orientation_Enums {
public:
  Qt_Orientation_Enum () { }
  Qt_Orientation_Enum (enum Qt::Orientation v) : Qt_Orientation_Enums (v) { }
  enum Qt::Orientation value () const { return (enum Qt::Orientation) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::Orientation>
template <>
struct Converter<QFlags<enum Qt::Orientation> >
{
public:
  typedef QFlags<enum Qt::Orientation> source_type;
  typedef Qt_Orientation_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::Orientation
template <>
struct Converter<enum Qt::Orientation>
{
public:
  typedef enum Qt::Orientation source_type;
  typedef Qt_Orientation_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
