
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQTextCharFormat_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQTextCharFormat_Enums
#define _HDR_gsiDeclQTextCharFormat_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QFont::Capitalization>
class QFont_Capitalization_Enums : public QFlags<enum QFont::Capitalization> {
public:
  QFont_Capitalization_Enums () : m_flags () { }
  QFont_Capitalization_Enums (enum QFont::Capitalization v) : m_flags (v) { }
  QFont_Capitalization_Enums (const QFlags<enum QFont::Capitalization> &v) : m_flags (v) { }
  QFlags<enum QFont::Capitalization> flags () const { return m_flags; }
private:
  QFlags<QFont::Capitalization> m_flags;
};

//  Wrapper class for enum QFont::Capitalization
class QFont_Capitalization_Enum : public QFont_Capitalization_Enums {
public:
  QFont_Capitalization_Enum () { }
  QFont_Capitalization_Enum (enum QFont::Capitalization v) : QFont_Capitalization_Enums (v) { }
  enum QFont::Capitalization value () const { return (enum QFont::Capitalization) flags ().operator int (); }
};

//  Converter for QFlags<enum QFont::Capitalization>
template <>
struct Converter<QFlags<enum QFont::Capitalization> >
{
public:
  typedef QFlags<enum QFont::Capitalization> source_type;
  typedef QFont_Capitalization_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QFont::Capitalization
template <>
struct Converter<enum QFont::Capitalization>
{
public:
  typedef enum QFont::Capitalization source_type;
  typedef QFont_Capitalization_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QFont::StyleHint>
class QFont_StyleHint_Enums : public QFlags<enum QFont::StyleHint> {
public:
  QFont_StyleHint_Enums () : m_flags () { }
  QFont_StyleHint_Enums (enum QFont::StyleHint v) : m_flags (v) { }
  QFont_StyleHint_Enums (const QFlags<enum QFont::StyleHint> &v) : m_flags (v) { }
  QFlags<enum QFont::StyleHint> flags () const { return m_flags; }
private:
  QFlags<QFont::StyleHint> m_flags;
};

//  Wrapper class for enum QFont::StyleHint
class QFont_StyleHint_Enum : public QFont_StyleHint_Enums {
public:
  QFont_StyleHint_Enum () { }
  QFont_StyleHint_Enum (enum QFont::StyleHint v) : QFont_StyleHint_Enums (v) { }
  enum QFont::StyleHint value () const { return (enum QFont::StyleHint) flags ().operator int (); }
};

//  Converter for QFlags<enum QFont::StyleHint>
template <>
struct Converter<QFlags<enum QFont::StyleHint> >
{
public:
  typedef QFlags<enum QFont::StyleHint> source_type;
  typedef QFont_StyleHint_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QFont::StyleHint
template <>
struct Converter<enum QFont::StyleHint>
{
public:
  typedef enum QFont::StyleHint source_type;
  typedef QFont_StyleHint_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QFont::StyleStrategy>
class QFont_StyleStrategy_Enums : public QFlags<enum QFont::StyleStrategy> {
public:
  QFont_StyleStrategy_Enums () : m_flags () { }
  QFont_StyleStrategy_Enums (enum QFont::StyleStrategy v) : m_flags (v) { }
  QFont_StyleStrategy_Enums (const QFlags<enum QFont::StyleStrategy> &v) : m_flags (v) { }
  QFlags<enum QFont::StyleStrategy> flags () const { return m_flags; }
private:
  QFlags<QFont::StyleStrategy> m_flags;
};

//  Wrapper class for enum QFont::StyleStrategy
class QFont_StyleStrategy_Enum : public QFont_StyleStrategy_Enums {
public:
  QFont_StyleStrategy_Enum () { }
  QFont_StyleStrategy_Enum (enum QFont::StyleStrategy v) : QFont_StyleStrategy_Enums (v) { }
  enum QFont::StyleStrategy value () const { return (enum QFont::StyleStrategy) flags ().operator int (); }
};

//  Converter for QFlags<enum QFont::StyleStrategy>
template <>
struct Converter<QFlags<enum QFont::StyleStrategy> >
{
public:
  typedef QFlags<enum QFont::StyleStrategy> source_type;
  typedef QFont_StyleStrategy_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QFont::StyleStrategy
template <>
struct Converter<enum QFont::StyleStrategy>
{
public:
  typedef enum QFont::StyleStrategy source_type;
  typedef QFont_StyleStrategy_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QTextCharFormat::UnderlineStyle>
class QTextCharFormat_UnderlineStyle_Enums : public QFlags<enum QTextCharFormat::UnderlineStyle> {
public:
  QTextCharFormat_UnderlineStyle_Enums () : m_flags () { }
  QTextCharFormat_UnderlineStyle_Enums (enum QTextCharFormat::UnderlineStyle v) : m_flags (v) { }
  QTextCharFormat_UnderlineStyle_Enums (const QFlags<enum QTextCharFormat::UnderlineStyle> &v) : m_flags (v) { }
  QFlags<enum QTextCharFormat::UnderlineStyle> flags () const { return m_flags; }
private:
  QFlags<QTextCharFormat::UnderlineStyle> m_flags;
};

//  Wrapper class for enum QTextCharFormat::UnderlineStyle
class QTextCharFormat_UnderlineStyle_Enum : public QTextCharFormat_UnderlineStyle_Enums {
public:
  QTextCharFormat_UnderlineStyle_Enum () { }
  QTextCharFormat_UnderlineStyle_Enum (enum QTextCharFormat::UnderlineStyle v) : QTextCharFormat_UnderlineStyle_Enums (v) { }
  enum QTextCharFormat::UnderlineStyle value () const { return (enum QTextCharFormat::UnderlineStyle) flags ().operator int (); }
};

//  Converter for QFlags<enum QTextCharFormat::UnderlineStyle>
template <>
struct Converter<QFlags<enum QTextCharFormat::UnderlineStyle> >
{
public:
  typedef QFlags<enum QTextCharFormat::UnderlineStyle> source_type;
  typedef QTextCharFormat_UnderlineStyle_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QTextCharFormat::UnderlineStyle
template <>
struct Converter<enum QTextCharFormat::UnderlineStyle>
{
public:
  typedef enum QTextCharFormat::UnderlineStyle source_type;
  typedef QTextCharFormat_UnderlineStyle_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QTextCharFormat::VerticalAlignment>
class QTextCharFormat_VerticalAlignment_Enums : public QFlags<enum QTextCharFormat::VerticalAlignment> {
public:
  QTextCharFormat_VerticalAlignment_Enums () : m_flags () { }
  QTextCharFormat_VerticalAlignment_Enums (enum QTextCharFormat::VerticalAlignment v) : m_flags (v) { }
  QTextCharFormat_VerticalAlignment_Enums (const QFlags<enum QTextCharFormat::VerticalAlignment> &v) : m_flags (v) { }
  QFlags<enum QTextCharFormat::VerticalAlignment> flags () const { return m_flags; }
private:
  QFlags<QTextCharFormat::VerticalAlignment> m_flags;
};

//  Wrapper class for enum QTextCharFormat::VerticalAlignment
class QTextCharFormat_VerticalAlignment_Enum : public QTextCharFormat_VerticalAlignment_Enums {
public:
  QTextCharFormat_VerticalAlignment_Enum () { }
  QTextCharFormat_VerticalAlignment_Enum (enum QTextCharFormat::VerticalAlignment v) : QTextCharFormat_VerticalAlignment_Enums (v) { }
  enum QTextCharFormat::VerticalAlignment value () const { return (enum QTextCharFormat::VerticalAlignment) flags ().operator int (); }
};

//  Converter for QFlags<enum QTextCharFormat::VerticalAlignment>
template <>
struct Converter<QFlags<enum QTextCharFormat::VerticalAlignment> >
{
public:
  typedef QFlags<enum QTextCharFormat::VerticalAlignment> source_type;
  typedef QTextCharFormat_VerticalAlignment_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QTextCharFormat::VerticalAlignment
template <>
struct Converter<enum QTextCharFormat::VerticalAlignment>
{
public:
  typedef enum QTextCharFormat::VerticalAlignment source_type;
  typedef QTextCharFormat_VerticalAlignment_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::LayoutDirection>
class Qt_LayoutDirection_Enums : public QFlags<enum Qt::LayoutDirection> {
public:
  Qt_LayoutDirection_Enums () : m_flags () { }
  Qt_LayoutDirection_Enums (enum Qt::LayoutDirection v) : m_flags (v) { }
  Qt_LayoutDirection_Enums (const QFlags<enum Qt::LayoutDirection> &v) : m_flags (v) { }
  QFlags<enum Qt::LayoutDirection> flags () const { return m_flags; }
private:
  QFlags<Qt::LayoutDirection> m_flags;
};

//  Wrapper class for enum Qt::LayoutDirection
class Qt_LayoutDirection_Enum : public Qt_LayoutDirection_Enums {
public:
  Qt_LayoutDirection_Enum () { }
  Qt_LayoutDirection_Enum (enum Qt::LayoutDirection v) : Qt_LayoutDirection_Enums (v) { }
  enum Qt::LayoutDirection value () const { return (enum Qt::LayoutDirection) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::LayoutDirection>
template <>
struct Converter<QFlags<enum Qt::LayoutDirection> >
{
public:
  typedef QFlags<enum Qt::LayoutDirection> source_type;
  typedef Qt_LayoutDirection_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::LayoutDirection
template <>
struct Converter<enum Qt::LayoutDirection>
{
public:
  typedef enum Qt::LayoutDirection source_type;
  typedef Qt_LayoutDirection_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
