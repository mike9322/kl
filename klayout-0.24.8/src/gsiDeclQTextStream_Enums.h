
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQTextStream_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQTextStream_Enums
#define _HDR_gsiDeclQTextStream_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QIODevice::OpenModeFlag>
class QIODevice_OpenModeFlag_Enums : public QFlags<enum QIODevice::OpenModeFlag> {
public:
  QIODevice_OpenModeFlag_Enums () : m_flags () { }
  QIODevice_OpenModeFlag_Enums (enum QIODevice::OpenModeFlag v) : m_flags (v) { }
  QIODevice_OpenModeFlag_Enums (const QFlags<enum QIODevice::OpenModeFlag> &v) : m_flags (v) { }
  QFlags<enum QIODevice::OpenModeFlag> flags () const { return m_flags; }
private:
  QFlags<QIODevice::OpenModeFlag> m_flags;
};

//  Wrapper class for enum QIODevice::OpenModeFlag
class QIODevice_OpenModeFlag_Enum : public QIODevice_OpenModeFlag_Enums {
public:
  QIODevice_OpenModeFlag_Enum () { }
  QIODevice_OpenModeFlag_Enum (enum QIODevice::OpenModeFlag v) : QIODevice_OpenModeFlag_Enums (v) { }
  enum QIODevice::OpenModeFlag value () const { return (enum QIODevice::OpenModeFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum QIODevice::OpenModeFlag>
template <>
struct Converter<QFlags<enum QIODevice::OpenModeFlag> >
{
public:
  typedef QFlags<enum QIODevice::OpenModeFlag> source_type;
  typedef QIODevice_OpenModeFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QIODevice::OpenModeFlag
template <>
struct Converter<enum QIODevice::OpenModeFlag>
{
public:
  typedef enum QIODevice::OpenModeFlag source_type;
  typedef QIODevice_OpenModeFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QTextStream::FieldAlignment>
class QTextStream_FieldAlignment_Enums : public QFlags<enum QTextStream::FieldAlignment> {
public:
  QTextStream_FieldAlignment_Enums () : m_flags () { }
  QTextStream_FieldAlignment_Enums (enum QTextStream::FieldAlignment v) : m_flags (v) { }
  QTextStream_FieldAlignment_Enums (const QFlags<enum QTextStream::FieldAlignment> &v) : m_flags (v) { }
  QFlags<enum QTextStream::FieldAlignment> flags () const { return m_flags; }
private:
  QFlags<QTextStream::FieldAlignment> m_flags;
};

//  Wrapper class for enum QTextStream::FieldAlignment
class QTextStream_FieldAlignment_Enum : public QTextStream_FieldAlignment_Enums {
public:
  QTextStream_FieldAlignment_Enum () { }
  QTextStream_FieldAlignment_Enum (enum QTextStream::FieldAlignment v) : QTextStream_FieldAlignment_Enums (v) { }
  enum QTextStream::FieldAlignment value () const { return (enum QTextStream::FieldAlignment) flags ().operator int (); }
};

//  Converter for QFlags<enum QTextStream::FieldAlignment>
template <>
struct Converter<QFlags<enum QTextStream::FieldAlignment> >
{
public:
  typedef QFlags<enum QTextStream::FieldAlignment> source_type;
  typedef QTextStream_FieldAlignment_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QTextStream::FieldAlignment
template <>
struct Converter<enum QTextStream::FieldAlignment>
{
public:
  typedef enum QTextStream::FieldAlignment source_type;
  typedef QTextStream_FieldAlignment_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QTextStream::NumberFlag>
class QTextStream_NumberFlag_Enums : public QFlags<enum QTextStream::NumberFlag> {
public:
  QTextStream_NumberFlag_Enums () : m_flags () { }
  QTextStream_NumberFlag_Enums (enum QTextStream::NumberFlag v) : m_flags (v) { }
  QTextStream_NumberFlag_Enums (const QFlags<enum QTextStream::NumberFlag> &v) : m_flags (v) { }
  QFlags<enum QTextStream::NumberFlag> flags () const { return m_flags; }
private:
  QFlags<QTextStream::NumberFlag> m_flags;
};

//  Wrapper class for enum QTextStream::NumberFlag
class QTextStream_NumberFlag_Enum : public QTextStream_NumberFlag_Enums {
public:
  QTextStream_NumberFlag_Enum () { }
  QTextStream_NumberFlag_Enum (enum QTextStream::NumberFlag v) : QTextStream_NumberFlag_Enums (v) { }
  enum QTextStream::NumberFlag value () const { return (enum QTextStream::NumberFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum QTextStream::NumberFlag>
template <>
struct Converter<QFlags<enum QTextStream::NumberFlag> >
{
public:
  typedef QFlags<enum QTextStream::NumberFlag> source_type;
  typedef QTextStream_NumberFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QTextStream::NumberFlag
template <>
struct Converter<enum QTextStream::NumberFlag>
{
public:
  typedef enum QTextStream::NumberFlag source_type;
  typedef QTextStream_NumberFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QTextStream::RealNumberNotation>
class QTextStream_RealNumberNotation_Enums : public QFlags<enum QTextStream::RealNumberNotation> {
public:
  QTextStream_RealNumberNotation_Enums () : m_flags () { }
  QTextStream_RealNumberNotation_Enums (enum QTextStream::RealNumberNotation v) : m_flags (v) { }
  QTextStream_RealNumberNotation_Enums (const QFlags<enum QTextStream::RealNumberNotation> &v) : m_flags (v) { }
  QFlags<enum QTextStream::RealNumberNotation> flags () const { return m_flags; }
private:
  QFlags<QTextStream::RealNumberNotation> m_flags;
};

//  Wrapper class for enum QTextStream::RealNumberNotation
class QTextStream_RealNumberNotation_Enum : public QTextStream_RealNumberNotation_Enums {
public:
  QTextStream_RealNumberNotation_Enum () { }
  QTextStream_RealNumberNotation_Enum (enum QTextStream::RealNumberNotation v) : QTextStream_RealNumberNotation_Enums (v) { }
  enum QTextStream::RealNumberNotation value () const { return (enum QTextStream::RealNumberNotation) flags ().operator int (); }
};

//  Converter for QFlags<enum QTextStream::RealNumberNotation>
template <>
struct Converter<QFlags<enum QTextStream::RealNumberNotation> >
{
public:
  typedef QFlags<enum QTextStream::RealNumberNotation> source_type;
  typedef QTextStream_RealNumberNotation_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QTextStream::RealNumberNotation
template <>
struct Converter<enum QTextStream::RealNumberNotation>
{
public:
  typedef enum QTextStream::RealNumberNotation source_type;
  typedef QTextStream_RealNumberNotation_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QTextStream::Status>
class QTextStream_Status_Enums : public QFlags<enum QTextStream::Status> {
public:
  QTextStream_Status_Enums () : m_flags () { }
  QTextStream_Status_Enums (enum QTextStream::Status v) : m_flags (v) { }
  QTextStream_Status_Enums (const QFlags<enum QTextStream::Status> &v) : m_flags (v) { }
  QFlags<enum QTextStream::Status> flags () const { return m_flags; }
private:
  QFlags<QTextStream::Status> m_flags;
};

//  Wrapper class for enum QTextStream::Status
class QTextStream_Status_Enum : public QTextStream_Status_Enums {
public:
  QTextStream_Status_Enum () { }
  QTextStream_Status_Enum (enum QTextStream::Status v) : QTextStream_Status_Enums (v) { }
  enum QTextStream::Status value () const { return (enum QTextStream::Status) flags ().operator int (); }
};

//  Converter for QFlags<enum QTextStream::Status>
template <>
struct Converter<QFlags<enum QTextStream::Status> >
{
public:
  typedef QFlags<enum QTextStream::Status> source_type;
  typedef QTextStream_Status_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QTextStream::Status
template <>
struct Converter<enum QTextStream::Status>
{
public:
  typedef enum QTextStream::Status source_type;
  typedef QTextStream_Status_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
