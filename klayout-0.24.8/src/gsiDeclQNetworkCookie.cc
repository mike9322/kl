
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQNetworkCookie.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtNetwork.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQNetworkCookie_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QNetworkCookie

//  Constructor QNetworkCookie::QNetworkCookie(const QByteArray &name, const QByteArray &value)


static void _init_ctor_QNetworkCookie_4510 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name", true, "QByteArray()");
  decl->add_arg<const QByteArray & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("value", true, "QByteArray()");
  decl->add_arg<const QByteArray & > (argspec_1);
  decl->set_return_new<QNetworkCookie *> ();
}

static void _call_ctor_QNetworkCookie_4510 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QByteArray &arg1 = args ? args.read<const QByteArray & > () : (const QByteArray &)(QByteArray());
  const QByteArray &arg2 = args ? args.read<const QByteArray & > () : (const QByteArray &)(QByteArray());
  ret.write<QNetworkCookie *> (new QNetworkCookie (arg1, arg2));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QNetworkCookie_4510 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNetworkCookie::QNetworkCookie(const QByteArray &name, const QByteArray &value)\nThis method creates an object of class QNetworkCookie.", &_init_ctor_QNetworkCookie_4510, &_call_ctor_QNetworkCookie_4510);
}

//  Constructor QNetworkCookie::QNetworkCookie(const QNetworkCookie &other)


static void _init_ctor_QNetworkCookie_2742 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkCookie & > (argspec_0);
  decl->set_return_new<QNetworkCookie *> ();
}

static void _call_ctor_QNetworkCookie_2742 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkCookie &arg1 = args.read<const QNetworkCookie & > ();
  ret.write<QNetworkCookie *> (new QNetworkCookie (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QNetworkCookie_2742 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNetworkCookie::QNetworkCookie(const QNetworkCookie &other)\nThis method creates an object of class QNetworkCookie.", &_init_ctor_QNetworkCookie_2742, &_call_ctor_QNetworkCookie_2742);
}

// QString QNetworkCookie::domain()


static void _init_f_domain_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_domain_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QNetworkCookie *)cls)->domain ());
}

static qt_gsi::GenericMethod *_create_f_domain_c0 ()
{
  return new qt_gsi::GenericMethod (":domain", "@brief Method QString QNetworkCookie::domain()\n", true, &_init_f_domain_c0, &_call_f_domain_c0);
}

// QDateTime QNetworkCookie::expirationDate()


static void _init_f_expirationDate_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QDateTime > ();
}

static void _call_f_expirationDate_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QDateTime > ((QDateTime)((QNetworkCookie *)cls)->expirationDate ());
}

static qt_gsi::GenericMethod *_create_f_expirationDate_c0 ()
{
  return new qt_gsi::GenericMethod (":expirationDate", "@brief Method QDateTime QNetworkCookie::expirationDate()\n", true, &_init_f_expirationDate_c0, &_call_f_expirationDate_c0);
}

// bool QNetworkCookie::isHttpOnly()


static void _init_f_isHttpOnly_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isHttpOnly_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QNetworkCookie *)cls)->isHttpOnly ());
}

static qt_gsi::GenericMethod *_create_f_isHttpOnly_c0 ()
{
  return new qt_gsi::GenericMethod ("isHttpOnly?|:httpOnly", "@brief Method bool QNetworkCookie::isHttpOnly()\n", true, &_init_f_isHttpOnly_c0, &_call_f_isHttpOnly_c0);
}

// bool QNetworkCookie::isSecure()


static void _init_f_isSecure_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isSecure_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QNetworkCookie *)cls)->isSecure ());
}

static qt_gsi::GenericMethod *_create_f_isSecure_c0 ()
{
  return new qt_gsi::GenericMethod ("isSecure?|:secure", "@brief Method bool QNetworkCookie::isSecure()\n", true, &_init_f_isSecure_c0, &_call_f_isSecure_c0);
}

// bool QNetworkCookie::isSessionCookie()


static void _init_f_isSessionCookie_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isSessionCookie_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QNetworkCookie *)cls)->isSessionCookie ());
}

static qt_gsi::GenericMethod *_create_f_isSessionCookie_c0 ()
{
  return new qt_gsi::GenericMethod ("isSessionCookie?", "@brief Method bool QNetworkCookie::isSessionCookie()\n", true, &_init_f_isSessionCookie_c0, &_call_f_isSessionCookie_c0);
}

// QByteArray QNetworkCookie::name()


static void _init_f_name_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QByteArray > ();
}

static void _call_f_name_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QByteArray > ((QByteArray)((QNetworkCookie *)cls)->name ());
}

static qt_gsi::GenericMethod *_create_f_name_c0 ()
{
  return new qt_gsi::GenericMethod (":name", "@brief Method QByteArray QNetworkCookie::name()\n", true, &_init_f_name_c0, &_call_f_name_c0);
}

// bool QNetworkCookie::operator!=(const QNetworkCookie &other)


static void _init_f_operator_excl__eq__c2742 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkCookie & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_operator_excl__eq__c2742 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkCookie &arg1 = args.read<const QNetworkCookie & > ();
  ret.write<bool > ((bool)((QNetworkCookie *)cls)->operator!= (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_excl__eq__c2742 ()
{
  return new qt_gsi::GenericMethod ("!=", "@brief Method bool QNetworkCookie::operator!=(const QNetworkCookie &other)\n", true, &_init_f_operator_excl__eq__c2742, &_call_f_operator_excl__eq__c2742);
}

// QNetworkCookie &QNetworkCookie::operator=(const QNetworkCookie &other)


static void _init_f_operator_eq__2742 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkCookie & > (argspec_0);
  decl->set_return<QNetworkCookie & > ();
}

static void _call_f_operator_eq__2742 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkCookie &arg1 = args.read<const QNetworkCookie & > ();
  ret.write<QNetworkCookie & > ((QNetworkCookie &)((QNetworkCookie *)cls)->operator= (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_eq__2742 ()
{
  return new qt_gsi::GenericMethod ("assign", "@brief Method QNetworkCookie &QNetworkCookie::operator=(const QNetworkCookie &other)\n", false, &_init_f_operator_eq__2742, &_call_f_operator_eq__2742);
}

// bool QNetworkCookie::operator==(const QNetworkCookie &other)


static void _init_f_operator_eq__eq__c2742 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkCookie & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_operator_eq__eq__c2742 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkCookie &arg1 = args.read<const QNetworkCookie & > ();
  ret.write<bool > ((bool)((QNetworkCookie *)cls)->operator== (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_eq__eq__c2742 ()
{
  return new qt_gsi::GenericMethod ("==", "@brief Method bool QNetworkCookie::operator==(const QNetworkCookie &other)\n", true, &_init_f_operator_eq__eq__c2742, &_call_f_operator_eq__eq__c2742);
}

// QString QNetworkCookie::path()


static void _init_f_path_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_path_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QNetworkCookie *)cls)->path ());
}

static qt_gsi::GenericMethod *_create_f_path_c0 ()
{
  return new qt_gsi::GenericMethod (":path", "@brief Method QString QNetworkCookie::path()\n", true, &_init_f_path_c0, &_call_f_path_c0);
}

// void QNetworkCookie::setDomain(const QString &domain)


static void _init_f_setDomain_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("domain");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setDomain_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QNetworkCookie *)cls)->setDomain (arg1);
}

static qt_gsi::GenericMethod *_create_f_setDomain_2025 ()
{
  return new qt_gsi::GenericMethod ("setDomain|domain=", "@brief Method void QNetworkCookie::setDomain(const QString &domain)\n", false, &_init_f_setDomain_2025, &_call_f_setDomain_2025);
}

// void QNetworkCookie::setExpirationDate(const QDateTime &date)


static void _init_f_setExpirationDate_2175 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("date");
  decl->add_arg<const QDateTime & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setExpirationDate_2175 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QDateTime &arg1 = args.read<const QDateTime & > ();
  ((QNetworkCookie *)cls)->setExpirationDate (arg1);
}

static qt_gsi::GenericMethod *_create_f_setExpirationDate_2175 ()
{
  return new qt_gsi::GenericMethod ("setExpirationDate|expirationDate=", "@brief Method void QNetworkCookie::setExpirationDate(const QDateTime &date)\n", false, &_init_f_setExpirationDate_2175, &_call_f_setExpirationDate_2175);
}

// void QNetworkCookie::setHttpOnly(bool enable)


static void _init_f_setHttpOnly_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("enable");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setHttpOnly_864 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QNetworkCookie *)cls)->setHttpOnly (arg1);
}

static qt_gsi::GenericMethod *_create_f_setHttpOnly_864 ()
{
  return new qt_gsi::GenericMethod ("setHttpOnly|httpOnly=", "@brief Method void QNetworkCookie::setHttpOnly(bool enable)\n", false, &_init_f_setHttpOnly_864, &_call_f_setHttpOnly_864);
}

// void QNetworkCookie::setName(const QByteArray &cookieName)


static void _init_f_setName_2309 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("cookieName");
  decl->add_arg<const QByteArray & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setName_2309 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QByteArray &arg1 = args.read<const QByteArray & > ();
  ((QNetworkCookie *)cls)->setName (arg1);
}

static qt_gsi::GenericMethod *_create_f_setName_2309 ()
{
  return new qt_gsi::GenericMethod ("setName|name=", "@brief Method void QNetworkCookie::setName(const QByteArray &cookieName)\n", false, &_init_f_setName_2309, &_call_f_setName_2309);
}

// void QNetworkCookie::setPath(const QString &path)


static void _init_f_setPath_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("path");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPath_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QNetworkCookie *)cls)->setPath (arg1);
}

static qt_gsi::GenericMethod *_create_f_setPath_2025 ()
{
  return new qt_gsi::GenericMethod ("setPath|path=", "@brief Method void QNetworkCookie::setPath(const QString &path)\n", false, &_init_f_setPath_2025, &_call_f_setPath_2025);
}

// void QNetworkCookie::setSecure(bool enable)


static void _init_f_setSecure_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("enable");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setSecure_864 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QNetworkCookie *)cls)->setSecure (arg1);
}

static qt_gsi::GenericMethod *_create_f_setSecure_864 ()
{
  return new qt_gsi::GenericMethod ("setSecure|secure=", "@brief Method void QNetworkCookie::setSecure(bool enable)\n", false, &_init_f_setSecure_864, &_call_f_setSecure_864);
}

// void QNetworkCookie::setValue(const QByteArray &value)


static void _init_f_setValue_2309 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("value");
  decl->add_arg<const QByteArray & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setValue_2309 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QByteArray &arg1 = args.read<const QByteArray & > ();
  ((QNetworkCookie *)cls)->setValue (arg1);
}

static qt_gsi::GenericMethod *_create_f_setValue_2309 ()
{
  return new qt_gsi::GenericMethod ("setValue|value=", "@brief Method void QNetworkCookie::setValue(const QByteArray &value)\n", false, &_init_f_setValue_2309, &_call_f_setValue_2309);
}

// QByteArray QNetworkCookie::toRawForm(QNetworkCookie::RawForm form)


static void _init_f_toRawForm_c2683 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("form", true, "QNetworkCookie::Full");
  decl->add_arg<const qt_gsi::Converter<QNetworkCookie::RawForm>::target_type & > (argspec_0);
  decl->set_return<QByteArray > ();
}

static void _call_f_toRawForm_c2683 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  tl::Heap heap;
  const qt_gsi::Converter<QNetworkCookie::RawForm>::target_type & arg1 = args ? args.read<const qt_gsi::Converter<QNetworkCookie::RawForm>::target_type & > () : (const qt_gsi::Converter<QNetworkCookie::RawForm>::target_type &)(qt_gsi::CppToQtReadAdaptor<QNetworkCookie::RawForm>(heap, QNetworkCookie::Full));
  ret.write<QByteArray > ((QByteArray)((QNetworkCookie *)cls)->toRawForm (qt_gsi::QtToCppAdaptor<QNetworkCookie::RawForm>(arg1).cref()));
}

static qt_gsi::GenericMethod *_create_f_toRawForm_c2683 ()
{
  return new qt_gsi::GenericMethod ("toRawForm", "@brief Method QByteArray QNetworkCookie::toRawForm(QNetworkCookie::RawForm form)\n", true, &_init_f_toRawForm_c2683, &_call_f_toRawForm_c2683);
}

// QByteArray QNetworkCookie::value()


static void _init_f_value_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QByteArray > ();
}

static void _call_f_value_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QByteArray > ((QByteArray)((QNetworkCookie *)cls)->value ());
}

static qt_gsi::GenericMethod *_create_f_value_c0 ()
{
  return new qt_gsi::GenericMethod (":value", "@brief Method QByteArray QNetworkCookie::value()\n", true, &_init_f_value_c0, &_call_f_value_c0);
}

// static QList<QNetworkCookie> QNetworkCookie::parseCookies(const QByteArray &cookieString)


static void _init_f_parseCookies_2309 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("cookieString");
  decl->add_arg<const QByteArray & > (argspec_0);
  decl->set_return<qt_gsi::Converter<QList<QNetworkCookie> >::target_type > ();
}

static void _call_f_parseCookies_2309 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QByteArray &arg1 = args.read<const QByteArray & > ();
  ret.write<qt_gsi::Converter<QList<QNetworkCookie> >::target_type > ((qt_gsi::Converter<QList<QNetworkCookie> >::target_type)qt_gsi::CppToQtAdaptor<QList<QNetworkCookie> >(QNetworkCookie::parseCookies (arg1)));
}

static qt_gsi::GenericStaticMethod *_create_f_parseCookies_2309 ()
{
  return new qt_gsi::GenericStaticMethod ("parseCookies", "@brief Static method QList<QNetworkCookie> QNetworkCookie::parseCookies(const QByteArray &cookieString)\nThis method is static and can be called without an instance.", &_init_f_parseCookies_2309, &_call_f_parseCookies_2309);
}


namespace gsi
{
gsi::Class<QNetworkCookie> decl_QNetworkCookie ("QNetworkCookie",
  gsi::Methods(_create_ctor_QNetworkCookie_4510 ()) +
  gsi::Methods(_create_ctor_QNetworkCookie_2742 ()) +
  gsi::Methods(_create_f_domain_c0 ()) +
  gsi::Methods(_create_f_expirationDate_c0 ()) +
  gsi::Methods(_create_f_isHttpOnly_c0 ()) +
  gsi::Methods(_create_f_isSecure_c0 ()) +
  gsi::Methods(_create_f_isSessionCookie_c0 ()) +
  gsi::Methods(_create_f_name_c0 ()) +
  gsi::Methods(_create_f_operator_excl__eq__c2742 ()) +
  gsi::Methods(_create_f_operator_eq__2742 ()) +
  gsi::Methods(_create_f_operator_eq__eq__c2742 ()) +
  gsi::Methods(_create_f_path_c0 ()) +
  gsi::Methods(_create_f_setDomain_2025 ()) +
  gsi::Methods(_create_f_setExpirationDate_2175 ()) +
  gsi::Methods(_create_f_setHttpOnly_864 ()) +
  gsi::Methods(_create_f_setName_2309 ()) +
  gsi::Methods(_create_f_setPath_2025 ()) +
  gsi::Methods(_create_f_setSecure_864 ()) +
  gsi::Methods(_create_f_setValue_2309 ()) +
  gsi::Methods(_create_f_toRawForm_c2683 ()) +
  gsi::Methods(_create_f_value_c0 ()) +
  gsi::Methods(_create_f_parseCookies_2309 ()),
  "@qt\n@brief Binding of QNetworkCookie");

}


//  Implementation of the enum wrapper class for QNetworkCookie::RawForm
namespace qt_gsi
{

static QNetworkCookie_RawForm_Enum *c_1_QNetworkCookie_RawForm_Enum () { return new QNetworkCookie_RawForm_Enum (QNetworkCookie::NameAndValueOnly); }
static QNetworkCookie_RawForm_Enum *c_2_QNetworkCookie_RawForm_Enum () { return new QNetworkCookie_RawForm_Enum (QNetworkCookie::Full); }

static gsi::Methods mkdefs_QNetworkCookie_RawForm () {
  return
    gsi::constant ("NameAndValueOnly", &qt_gsi::c_1_QNetworkCookie_RawForm_Enum, "@brief Enum constant QNetworkCookie::NameAndValueOnly") +
    gsi::constant ("Full", &qt_gsi::c_2_QNetworkCookie_RawForm_Enum, "@brief Enum constant QNetworkCookie::Full");
}

static std::string to_s_QNetworkCookie_RawForm_Enum (const QNetworkCookie_RawForm_Enum *e)
{
  if (e->value () == QNetworkCookie::NameAndValueOnly) { return tl::sprintf ("NameAndValueOnly (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkCookie::Full) { return tl::sprintf ("Full (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QNetworkCookie_RawForm_Enum (const QNetworkCookie_RawForm_Enum *e)
{
  return (unsigned int) e->value ();
}

static QNetworkCookie_RawForm_Enum *from_i_QNetworkCookie_RawForm_Enum (unsigned int i)
{
  return new QNetworkCookie_RawForm_Enum ((QNetworkCookie::RawForm) i);
}

static bool equalQNetworkCookie_RawForm_Enum (const QNetworkCookie_RawForm_Enum *e, QNetworkCookie_RawForm_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QNetworkCookie_RawForm_Enum (const QNetworkCookie_RawForm_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QNetworkCookie_RawForm_Enums oropQNetworkCookie_RawForm_Enums (const QNetworkCookie_RawForm_Enums *e, const QNetworkCookie_RawForm_Enums &d)
{
  return e->flags () | d.flags ();
}

static QNetworkCookie_RawForm_Enums andopQNetworkCookie_RawForm_Enums (const QNetworkCookie_RawForm_Enums *e, const QNetworkCookie_RawForm_Enums &d)
{
  return e->flags () & d.flags ();
}

static QNetworkCookie_RawForm_Enums xoropQNetworkCookie_RawForm_Enums (const QNetworkCookie_RawForm_Enums *e, const QNetworkCookie_RawForm_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QNetworkCookie_RawForm_Enums (const QNetworkCookie_RawForm_Enums *e)
{
  std::string l;
  if (e->testFlag (QNetworkCookie::NameAndValueOnly)) { if (!l.empty ()) l += "|"; l += "NameAndValueOnly"; }
  if (e->testFlag (QNetworkCookie::Full)) { if (!l.empty ()) l += "|"; l += "Full"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QNetworkCookie_RawForm_Enums (const QNetworkCookie_RawForm_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QNetworkCookie_RawForm_Enums (const QNetworkCookie_RawForm_Enums *e, const QNetworkCookie_RawForm_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QNetworkCookie_RawForm_Enums> decl_QNetworkCookie_RawForm_Enums ("QNetworkCookie_QFlags_RawForm",
  gsi::method_ext ("|", &qt_gsi::oropQNetworkCookie_RawForm_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQNetworkCookie_RawForm_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQNetworkCookie_RawForm_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QNetworkCookie_RawForm_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QNetworkCookie_RawForm_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QNetworkCookie_RawForm_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QNetworkCookie::RawForm> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QNetworkCookie_RawForm_Enum> decl_QNetworkCookie_RawForm_Enum (decl_QNetworkCookie_RawForm_Enums, "QNetworkCookie_RawForm",
  qt_gsi::mkdefs_QNetworkCookie_RawForm () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QNetworkCookie_RawForm_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QNetworkCookie_RawForm_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQNetworkCookie_RawForm_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QNetworkCookie_RawForm_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QNetworkCookie_RawForm_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QNetworkCookie::RawForm enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QNetworkCookie> inject_QNetworkCookie_RawForm_Enum_in_parent (qt_gsi::mkdefs_QNetworkCookie_RawForm ());
static gsi::ClassExt<QNetworkCookie> decl_QNetworkCookie_RawForm_Enum_as_child (decl_QNetworkCookie_RawForm_Enum, "RawForm");

}

