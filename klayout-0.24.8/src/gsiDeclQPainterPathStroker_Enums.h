
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQPainterPathStroker_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQPainterPathStroker_Enums
#define _HDR_gsiDeclQPainterPathStroker_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum Qt::PenCapStyle>
class Qt_PenCapStyle_Enums : public QFlags<enum Qt::PenCapStyle> {
public:
  Qt_PenCapStyle_Enums () : m_flags () { }
  Qt_PenCapStyle_Enums (enum Qt::PenCapStyle v) : m_flags (v) { }
  Qt_PenCapStyle_Enums (const QFlags<enum Qt::PenCapStyle> &v) : m_flags (v) { }
  QFlags<enum Qt::PenCapStyle> flags () const { return m_flags; }
private:
  QFlags<Qt::PenCapStyle> m_flags;
};

//  Wrapper class for enum Qt::PenCapStyle
class Qt_PenCapStyle_Enum : public Qt_PenCapStyle_Enums {
public:
  Qt_PenCapStyle_Enum () { }
  Qt_PenCapStyle_Enum (enum Qt::PenCapStyle v) : Qt_PenCapStyle_Enums (v) { }
  enum Qt::PenCapStyle value () const { return (enum Qt::PenCapStyle) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::PenCapStyle>
template <>
struct Converter<QFlags<enum Qt::PenCapStyle> >
{
public:
  typedef QFlags<enum Qt::PenCapStyle> source_type;
  typedef Qt_PenCapStyle_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::PenCapStyle
template <>
struct Converter<enum Qt::PenCapStyle>
{
public:
  typedef enum Qt::PenCapStyle source_type;
  typedef Qt_PenCapStyle_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::PenJoinStyle>
class Qt_PenJoinStyle_Enums : public QFlags<enum Qt::PenJoinStyle> {
public:
  Qt_PenJoinStyle_Enums () : m_flags () { }
  Qt_PenJoinStyle_Enums (enum Qt::PenJoinStyle v) : m_flags (v) { }
  Qt_PenJoinStyle_Enums (const QFlags<enum Qt::PenJoinStyle> &v) : m_flags (v) { }
  QFlags<enum Qt::PenJoinStyle> flags () const { return m_flags; }
private:
  QFlags<Qt::PenJoinStyle> m_flags;
};

//  Wrapper class for enum Qt::PenJoinStyle
class Qt_PenJoinStyle_Enum : public Qt_PenJoinStyle_Enums {
public:
  Qt_PenJoinStyle_Enum () { }
  Qt_PenJoinStyle_Enum (enum Qt::PenJoinStyle v) : Qt_PenJoinStyle_Enums (v) { }
  enum Qt::PenJoinStyle value () const { return (enum Qt::PenJoinStyle) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::PenJoinStyle>
template <>
struct Converter<QFlags<enum Qt::PenJoinStyle> >
{
public:
  typedef QFlags<enum Qt::PenJoinStyle> source_type;
  typedef Qt_PenJoinStyle_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::PenJoinStyle
template <>
struct Converter<enum Qt::PenJoinStyle>
{
public:
  typedef enum Qt::PenJoinStyle source_type;
  typedef Qt_PenJoinStyle_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::PenStyle>
class Qt_PenStyle_Enums : public QFlags<enum Qt::PenStyle> {
public:
  Qt_PenStyle_Enums () : m_flags () { }
  Qt_PenStyle_Enums (enum Qt::PenStyle v) : m_flags (v) { }
  Qt_PenStyle_Enums (const QFlags<enum Qt::PenStyle> &v) : m_flags (v) { }
  QFlags<enum Qt::PenStyle> flags () const { return m_flags; }
private:
  QFlags<Qt::PenStyle> m_flags;
};

//  Wrapper class for enum Qt::PenStyle
class Qt_PenStyle_Enum : public Qt_PenStyle_Enums {
public:
  Qt_PenStyle_Enum () { }
  Qt_PenStyle_Enum (enum Qt::PenStyle v) : Qt_PenStyle_Enums (v) { }
  enum Qt::PenStyle value () const { return (enum Qt::PenStyle) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::PenStyle>
template <>
struct Converter<QFlags<enum Qt::PenStyle> >
{
public:
  typedef QFlags<enum Qt::PenStyle> source_type;
  typedef Qt_PenStyle_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::PenStyle
template <>
struct Converter<enum Qt::PenStyle>
{
public:
  typedef enum Qt::PenStyle source_type;
  typedef Qt_PenStyle_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
