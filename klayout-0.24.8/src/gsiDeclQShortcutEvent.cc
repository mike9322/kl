
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQShortcutEvent.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQShortcutEvent_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QShortcutEvent

// bool QShortcutEvent::isAmbiguous()


static void _init_f_isAmbiguous_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isAmbiguous_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QShortcutEvent *)cls)->isAmbiguous ());
}

static qt_gsi::GenericMethod *_create_f_isAmbiguous_0 ()
{
  return new qt_gsi::GenericMethod ("isAmbiguous?", "@brief Method bool QShortcutEvent::isAmbiguous()\n", false, &_init_f_isAmbiguous_0, &_call_f_isAmbiguous_0);
}

// bool QShortcutEvent::isAmbiguous()


static void _init_f_isAmbiguous_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isAmbiguous_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QShortcutEvent *)cls)->isAmbiguous ());
}

static qt_gsi::GenericMethod *_create_f_isAmbiguous_c0 ()
{
  return new qt_gsi::GenericMethod ("isAmbiguous?", "@brief Method bool QShortcutEvent::isAmbiguous()\n", true, &_init_f_isAmbiguous_c0, &_call_f_isAmbiguous_c0);
}

// const QKeySequence &QShortcutEvent::key()


static void _init_f_key_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QKeySequence & > ();
}

static void _call_f_key_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<const QKeySequence & > ((const QKeySequence &)((QShortcutEvent *)cls)->key ());
}

static qt_gsi::GenericMethod *_create_f_key_0 ()
{
  return new qt_gsi::GenericMethod ("key", "@brief Method const QKeySequence &QShortcutEvent::key()\n", false, &_init_f_key_0, &_call_f_key_0);
}

// const QKeySequence &QShortcutEvent::key()


static void _init_f_key_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QKeySequence & > ();
}

static void _call_f_key_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<const QKeySequence & > ((const QKeySequence &)((QShortcutEvent *)cls)->key ());
}

static qt_gsi::GenericMethod *_create_f_key_c0 ()
{
  return new qt_gsi::GenericMethod ("key", "@brief Method const QKeySequence &QShortcutEvent::key()\n", true, &_init_f_key_c0, &_call_f_key_c0);
}

// int QShortcutEvent::shortcutId()


static void _init_f_shortcutId_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_shortcutId_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QShortcutEvent *)cls)->shortcutId ());
}

static qt_gsi::GenericMethod *_create_f_shortcutId_0 ()
{
  return new qt_gsi::GenericMethod ("shortcutId", "@brief Method int QShortcutEvent::shortcutId()\n", false, &_init_f_shortcutId_0, &_call_f_shortcutId_0);
}

// int QShortcutEvent::shortcutId()


static void _init_f_shortcutId_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_shortcutId_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QShortcutEvent *)cls)->shortcutId ());
}

static qt_gsi::GenericMethod *_create_f_shortcutId_c0 ()
{
  return new qt_gsi::GenericMethod ("shortcutId", "@brief Method int QShortcutEvent::shortcutId()\n", true, &_init_f_shortcutId_c0, &_call_f_shortcutId_c0);
}

namespace gsi
{
extern gsi::Class<QEvent> decl_QEvent;

gsi::Class<QShortcutEvent> decl_QShortcutEvent (decl_QEvent, "QShortcutEvent_Native",
  gsi::Methods(_create_f_isAmbiguous_0 ()) +
  gsi::Methods(_create_f_isAmbiguous_c0 ()) +
  gsi::Methods(_create_f_key_0 ()) +
  gsi::Methods(_create_f_key_c0 ()) +
  gsi::Methods(_create_f_shortcutId_0 ()) +
  gsi::Methods(_create_f_shortcutId_c0 ()),
  "@hide\n@alias QShortcutEvent");
}


class QShortcutEvent_Adaptor : public QShortcutEvent, public qt_gsi::QtObjectBase
{
public:

  virtual ~QShortcutEvent_Adaptor();

  //  [adaptor ctor] QShortcutEvent::QShortcutEvent(const QKeySequence &key, int id, bool ambiguous)
  QShortcutEvent_Adaptor(const QKeySequence &key, int id) : QShortcutEvent(key, id)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QShortcutEvent::QShortcutEvent(const QKeySequence &key, int id, bool ambiguous)
  QShortcutEvent_Adaptor(const QKeySequence &key, int id, bool ambiguous) : QShortcutEvent(key, id, ambiguous)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  
};

QShortcutEvent_Adaptor::~QShortcutEvent_Adaptor() { }

//  Constructor QShortcutEvent::QShortcutEvent(const QKeySequence &key, int id, bool ambiguous) (adaptor class)

static void _init_ctor_QShortcutEvent_Adaptor_3931 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<const QKeySequence & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("id");
  decl->add_arg<int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("ambiguous", true, "false");
  decl->add_arg<bool > (argspec_2);
  decl->set_return_new<QShortcutEvent_Adaptor *> ();
}

static void _call_ctor_QShortcutEvent_Adaptor_3931 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QKeySequence &arg1 = args.read<const QKeySequence & > ();
  int arg2 = args.read<int > ();
  bool arg3 = args ? args.read<bool > () : (bool)(false);
  ret.write<QShortcutEvent_Adaptor *> (new QShortcutEvent_Adaptor (arg1, arg2, arg3));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QShortcutEvent_Adaptor_3931 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QShortcutEvent::QShortcutEvent(const QKeySequence &key, int id, bool ambiguous)\nThis method creates an object of class QShortcutEvent.", &_init_ctor_QShortcutEvent_Adaptor_3931, &_call_ctor_QShortcutEvent_Adaptor_3931);
}

namespace gsi
{

extern gsi::Class<QShortcutEvent> decl_QShortcutEvent;

gsi::Class<QShortcutEvent_Adaptor> decl_QShortcutEvent_Adaptor (decl_QShortcutEvent, "QShortcutEvent",
  gsi::Methods(_create_ctor_QShortcutEvent_Adaptor_3931 ()),
  "@qt\n@brief Binding of QShortcutEvent");

}

