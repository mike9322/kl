
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQFontInfo.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQFontInfo_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QFontInfo

//  Constructor QFontInfo::QFontInfo(const QFont &)


static void _init_ctor_QFontInfo_1801 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QFont & > (argspec_0);
  decl->set_return_new<QFontInfo *> ();
}

static void _call_ctor_QFontInfo_1801 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QFont &arg1 = args.read<const QFont & > ();
  ret.write<QFontInfo *> (new QFontInfo (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QFontInfo_1801 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QFontInfo::QFontInfo(const QFont &)\nThis method creates an object of class QFontInfo.", &_init_ctor_QFontInfo_1801, &_call_ctor_QFontInfo_1801);
}

//  Constructor QFontInfo::QFontInfo(const QFontInfo &)


static void _init_ctor_QFontInfo_2197 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QFontInfo & > (argspec_0);
  decl->set_return_new<QFontInfo *> ();
}

static void _call_ctor_QFontInfo_2197 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QFontInfo &arg1 = args.read<const QFontInfo & > ();
  ret.write<QFontInfo *> (new QFontInfo (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QFontInfo_2197 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QFontInfo::QFontInfo(const QFontInfo &)\nThis method creates an object of class QFontInfo.", &_init_ctor_QFontInfo_2197, &_call_ctor_QFontInfo_2197);
}

// bool QFontInfo::bold()


static void _init_f_bold_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_bold_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QFontInfo *)cls)->bold ());
}

static qt_gsi::GenericMethod *_create_f_bold_c0 ()
{
  return new qt_gsi::GenericMethod ("bold", "@brief Method bool QFontInfo::bold()\n", true, &_init_f_bold_c0, &_call_f_bold_c0);
}

// bool QFontInfo::exactMatch()


static void _init_f_exactMatch_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_exactMatch_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QFontInfo *)cls)->exactMatch ());
}

static qt_gsi::GenericMethod *_create_f_exactMatch_c0 ()
{
  return new qt_gsi::GenericMethod ("exactMatch", "@brief Method bool QFontInfo::exactMatch()\n", true, &_init_f_exactMatch_c0, &_call_f_exactMatch_c0);
}

// QString QFontInfo::family()


static void _init_f_family_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_family_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QFontInfo *)cls)->family ());
}

static qt_gsi::GenericMethod *_create_f_family_c0 ()
{
  return new qt_gsi::GenericMethod ("family", "@brief Method QString QFontInfo::family()\n", true, &_init_f_family_c0, &_call_f_family_c0);
}

// bool QFontInfo::fixedPitch()


static void _init_f_fixedPitch_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_fixedPitch_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QFontInfo *)cls)->fixedPitch ());
}

static qt_gsi::GenericMethod *_create_f_fixedPitch_c0 ()
{
  return new qt_gsi::GenericMethod ("fixedPitch", "@brief Method bool QFontInfo::fixedPitch()\n", true, &_init_f_fixedPitch_c0, &_call_f_fixedPitch_c0);
}

// bool QFontInfo::italic()


static void _init_f_italic_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_italic_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QFontInfo *)cls)->italic ());
}

static qt_gsi::GenericMethod *_create_f_italic_c0 ()
{
  return new qt_gsi::GenericMethod ("italic", "@brief Method bool QFontInfo::italic()\n", true, &_init_f_italic_c0, &_call_f_italic_c0);
}

// QFontInfo &QFontInfo::operator=(const QFontInfo &)


static void _init_f_operator_eq__2197 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QFontInfo & > (argspec_0);
  decl->set_return<QFontInfo & > ();
}

static void _call_f_operator_eq__2197 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QFontInfo &arg1 = args.read<const QFontInfo & > ();
  ret.write<QFontInfo & > ((QFontInfo &)((QFontInfo *)cls)->operator= (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_eq__2197 ()
{
  return new qt_gsi::GenericMethod ("assign", "@brief Method QFontInfo &QFontInfo::operator=(const QFontInfo &)\n", false, &_init_f_operator_eq__2197, &_call_f_operator_eq__2197);
}

// bool QFontInfo::overline()


static void _init_f_overline_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_overline_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QFontInfo *)cls)->overline ());
}

static qt_gsi::GenericMethod *_create_f_overline_c0 ()
{
  return new qt_gsi::GenericMethod ("overline", "@brief Method bool QFontInfo::overline()\n", true, &_init_f_overline_c0, &_call_f_overline_c0);
}

// int QFontInfo::pixelSize()


static void _init_f_pixelSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_pixelSize_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QFontInfo *)cls)->pixelSize ());
}

static qt_gsi::GenericMethod *_create_f_pixelSize_c0 ()
{
  return new qt_gsi::GenericMethod ("pixelSize", "@brief Method int QFontInfo::pixelSize()\n", true, &_init_f_pixelSize_c0, &_call_f_pixelSize_c0);
}

// int QFontInfo::pointSize()


static void _init_f_pointSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_pointSize_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QFontInfo *)cls)->pointSize ());
}

static qt_gsi::GenericMethod *_create_f_pointSize_c0 ()
{
  return new qt_gsi::GenericMethod ("pointSize", "@brief Method int QFontInfo::pointSize()\n", true, &_init_f_pointSize_c0, &_call_f_pointSize_c0);
}

// double QFontInfo::pointSizeF()


static void _init_f_pointSizeF_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<double > ();
}

static void _call_f_pointSizeF_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<double > ((double)((QFontInfo *)cls)->pointSizeF ());
}

static qt_gsi::GenericMethod *_create_f_pointSizeF_c0 ()
{
  return new qt_gsi::GenericMethod ("pointSizeF", "@brief Method double QFontInfo::pointSizeF()\n", true, &_init_f_pointSizeF_c0, &_call_f_pointSizeF_c0);
}

// bool QFontInfo::rawMode()


static void _init_f_rawMode_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_rawMode_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QFontInfo *)cls)->rawMode ());
}

static qt_gsi::GenericMethod *_create_f_rawMode_c0 ()
{
  return new qt_gsi::GenericMethod ("rawMode", "@brief Method bool QFontInfo::rawMode()\n", true, &_init_f_rawMode_c0, &_call_f_rawMode_c0);
}

// bool QFontInfo::strikeOut()


static void _init_f_strikeOut_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_strikeOut_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QFontInfo *)cls)->strikeOut ());
}

static qt_gsi::GenericMethod *_create_f_strikeOut_c0 ()
{
  return new qt_gsi::GenericMethod ("strikeOut", "@brief Method bool QFontInfo::strikeOut()\n", true, &_init_f_strikeOut_c0, &_call_f_strikeOut_c0);
}

// QFont::Style QFontInfo::style()


static void _init_f_style_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QFont::Style>::target_type > ();
}

static void _call_f_style_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QFont::Style>::target_type > ((qt_gsi::Converter<QFont::Style>::target_type)qt_gsi::CppToQtAdaptor<QFont::Style>(((QFontInfo *)cls)->style ()));
}

static qt_gsi::GenericMethod *_create_f_style_c0 ()
{
  return new qt_gsi::GenericMethod ("style", "@brief Method QFont::Style QFontInfo::style()\n", true, &_init_f_style_c0, &_call_f_style_c0);
}

// QFont::StyleHint QFontInfo::styleHint()


static void _init_f_styleHint_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QFont::StyleHint>::target_type > ();
}

static void _call_f_styleHint_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QFont::StyleHint>::target_type > ((qt_gsi::Converter<QFont::StyleHint>::target_type)qt_gsi::CppToQtAdaptor<QFont::StyleHint>(((QFontInfo *)cls)->styleHint ()));
}

static qt_gsi::GenericMethod *_create_f_styleHint_c0 ()
{
  return new qt_gsi::GenericMethod ("styleHint", "@brief Method QFont::StyleHint QFontInfo::styleHint()\n", true, &_init_f_styleHint_c0, &_call_f_styleHint_c0);
}

// bool QFontInfo::underline()


static void _init_f_underline_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_underline_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QFontInfo *)cls)->underline ());
}

static qt_gsi::GenericMethod *_create_f_underline_c0 ()
{
  return new qt_gsi::GenericMethod ("underline", "@brief Method bool QFontInfo::underline()\n", true, &_init_f_underline_c0, &_call_f_underline_c0);
}

// int QFontInfo::weight()


static void _init_f_weight_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_weight_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QFontInfo *)cls)->weight ());
}

static qt_gsi::GenericMethod *_create_f_weight_c0 ()
{
  return new qt_gsi::GenericMethod ("weight", "@brief Method int QFontInfo::weight()\n", true, &_init_f_weight_c0, &_call_f_weight_c0);
}


namespace gsi
{
gsi::Class<QFontInfo> decl_QFontInfo ("QFontInfo",
  gsi::Methods(_create_ctor_QFontInfo_1801 ()) +
  gsi::Methods(_create_ctor_QFontInfo_2197 ()) +
  gsi::Methods(_create_f_bold_c0 ()) +
  gsi::Methods(_create_f_exactMatch_c0 ()) +
  gsi::Methods(_create_f_family_c0 ()) +
  gsi::Methods(_create_f_fixedPitch_c0 ()) +
  gsi::Methods(_create_f_italic_c0 ()) +
  gsi::Methods(_create_f_operator_eq__2197 ()) +
  gsi::Methods(_create_f_overline_c0 ()) +
  gsi::Methods(_create_f_pixelSize_c0 ()) +
  gsi::Methods(_create_f_pointSize_c0 ()) +
  gsi::Methods(_create_f_pointSizeF_c0 ()) +
  gsi::Methods(_create_f_rawMode_c0 ()) +
  gsi::Methods(_create_f_strikeOut_c0 ()) +
  gsi::Methods(_create_f_style_c0 ()) +
  gsi::Methods(_create_f_styleHint_c0 ()) +
  gsi::Methods(_create_f_underline_c0 ()) +
  gsi::Methods(_create_f_weight_c0 ()),
  "@qt\n@brief Binding of QFontInfo");

}

