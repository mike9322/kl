
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQTreeWidgetItemIterator.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQTreeWidgetItemIterator_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QTreeWidgetItemIterator

//  Constructor QTreeWidgetItemIterator::QTreeWidgetItemIterator(const QTreeWidgetItemIterator &it)


static void _init_ctor_QTreeWidgetItemIterator_3647 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("it");
  decl->add_arg<const QTreeWidgetItemIterator & > (argspec_0);
  decl->set_return_new<QTreeWidgetItemIterator *> ();
}

static void _call_ctor_QTreeWidgetItemIterator_3647 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QTreeWidgetItemIterator &arg1 = args.read<const QTreeWidgetItemIterator & > ();
  ret.write<QTreeWidgetItemIterator *> (new QTreeWidgetItemIterator (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QTreeWidgetItemIterator_3647 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QTreeWidgetItemIterator::QTreeWidgetItemIterator(const QTreeWidgetItemIterator &it)\nThis method creates an object of class QTreeWidgetItemIterator.", &_init_ctor_QTreeWidgetItemIterator_3647, &_call_ctor_QTreeWidgetItemIterator_3647);
}

//  Constructor QTreeWidgetItemIterator::QTreeWidgetItemIterator(QTreeWidget *widget, QFlags<QTreeWidgetItemIterator::IteratorFlag> flags)


static void _init_ctor_QTreeWidgetItemIterator_6409 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("widget");
  decl->add_arg<QTreeWidget * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("flags", true, "QTreeWidgetItemIterator::All");
  decl->add_arg<const qt_gsi::Converter<QFlags<QTreeWidgetItemIterator::IteratorFlag> >::target_type & > (argspec_1);
  decl->set_return_new<QTreeWidgetItemIterator *> ();
}

static void _call_ctor_QTreeWidgetItemIterator_6409 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QTreeWidget *arg1 = args.read<QTreeWidget * > ();
  tl::Heap heap;
  const qt_gsi::Converter<QFlags<QTreeWidgetItemIterator::IteratorFlag> >::target_type & arg2 = args ? args.read<const qt_gsi::Converter<QFlags<QTreeWidgetItemIterator::IteratorFlag> >::target_type & > () : (const qt_gsi::Converter<QFlags<QTreeWidgetItemIterator::IteratorFlag> >::target_type &)(qt_gsi::CppToQtReadAdaptor<QFlags<QTreeWidgetItemIterator::IteratorFlag> >(heap, QTreeWidgetItemIterator::All));
  ret.write<QTreeWidgetItemIterator *> (new QTreeWidgetItemIterator (arg1, qt_gsi::QtToCppAdaptor<QFlags<QTreeWidgetItemIterator::IteratorFlag> >(arg2).cref()));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QTreeWidgetItemIterator_6409 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QTreeWidgetItemIterator::QTreeWidgetItemIterator(QTreeWidget *widget, QFlags<QTreeWidgetItemIterator::IteratorFlag> flags)\nThis method creates an object of class QTreeWidgetItemIterator.", &_init_ctor_QTreeWidgetItemIterator_6409, &_call_ctor_QTreeWidgetItemIterator_6409);
}

//  Constructor QTreeWidgetItemIterator::QTreeWidgetItemIterator(QTreeWidgetItem *item, QFlags<QTreeWidgetItemIterator::IteratorFlag> flags)


static void _init_ctor_QTreeWidgetItemIterator_6808 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("item");
  decl->add_arg<QTreeWidgetItem * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("flags", true, "QTreeWidgetItemIterator::All");
  decl->add_arg<const qt_gsi::Converter<QFlags<QTreeWidgetItemIterator::IteratorFlag> >::target_type & > (argspec_1);
  decl->set_return_new<QTreeWidgetItemIterator *> ();
}

static void _call_ctor_QTreeWidgetItemIterator_6808 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QTreeWidgetItem *arg1 = args.read<QTreeWidgetItem * > ();
  tl::Heap heap;
  const qt_gsi::Converter<QFlags<QTreeWidgetItemIterator::IteratorFlag> >::target_type & arg2 = args ? args.read<const qt_gsi::Converter<QFlags<QTreeWidgetItemIterator::IteratorFlag> >::target_type & > () : (const qt_gsi::Converter<QFlags<QTreeWidgetItemIterator::IteratorFlag> >::target_type &)(qt_gsi::CppToQtReadAdaptor<QFlags<QTreeWidgetItemIterator::IteratorFlag> >(heap, QTreeWidgetItemIterator::All));
  ret.write<QTreeWidgetItemIterator *> (new QTreeWidgetItemIterator (arg1, qt_gsi::QtToCppAdaptor<QFlags<QTreeWidgetItemIterator::IteratorFlag> >(arg2).cref()));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QTreeWidgetItemIterator_6808 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QTreeWidgetItemIterator::QTreeWidgetItemIterator(QTreeWidgetItem *item, QFlags<QTreeWidgetItemIterator::IteratorFlag> flags)\nThis method creates an object of class QTreeWidgetItemIterator.", &_init_ctor_QTreeWidgetItemIterator_6808, &_call_ctor_QTreeWidgetItemIterator_6808);
}

// QTreeWidgetItem *QTreeWidgetItemIterator::operator*()


static void _init_f_operator_star__c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QTreeWidgetItem * > ();
}

static void _call_f_operator_star__c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QTreeWidgetItem * > ((QTreeWidgetItem *)((QTreeWidgetItemIterator *)cls)->operator* ());
}

static qt_gsi::GenericMethod *_create_f_operator_star__c0 ()
{
  return new qt_gsi::GenericMethod ("*", "@brief Method QTreeWidgetItem *QTreeWidgetItemIterator::operator*()\n", true, &_init_f_operator_star__c0, &_call_f_operator_star__c0);
}

// QTreeWidgetItemIterator &QTreeWidgetItemIterator::operator++()


static void _init_f_operator_plus__plus__0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QTreeWidgetItemIterator & > ();
}

static void _call_f_operator_plus__plus__0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QTreeWidgetItemIterator & > ((QTreeWidgetItemIterator &)((QTreeWidgetItemIterator *)cls)->operator++ ());
}

static qt_gsi::GenericMethod *_create_f_operator_plus__plus__0 ()
{
  return new qt_gsi::GenericMethod ("++", "@brief Method QTreeWidgetItemIterator &QTreeWidgetItemIterator::operator++()\n", false, &_init_f_operator_plus__plus__0, &_call_f_operator_plus__plus__0);
}

// const QTreeWidgetItemIterator QTreeWidgetItemIterator::operator++(int)


static void _init_f_operator_plus__plus__767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<int > (argspec_0);
  decl->set_return<const QTreeWidgetItemIterator > ();
}

static void _call_f_operator_plus__plus__767 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ret.write<const QTreeWidgetItemIterator > ((const QTreeWidgetItemIterator)((QTreeWidgetItemIterator *)cls)->operator++ (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_plus__plus__767 ()
{
  return new qt_gsi::GenericMethod ("++", "@brief Method const QTreeWidgetItemIterator QTreeWidgetItemIterator::operator++(int)\n", false, &_init_f_operator_plus__plus__767, &_call_f_operator_plus__plus__767);
}

// QTreeWidgetItemIterator &QTreeWidgetItemIterator::operator+=(int n)


static void _init_f_operator_plus__eq__767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("n");
  decl->add_arg<int > (argspec_0);
  decl->set_return<QTreeWidgetItemIterator & > ();
}

static void _call_f_operator_plus__eq__767 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ret.write<QTreeWidgetItemIterator & > ((QTreeWidgetItemIterator &)((QTreeWidgetItemIterator *)cls)->operator+= (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_plus__eq__767 ()
{
  return new qt_gsi::GenericMethod ("+=", "@brief Method QTreeWidgetItemIterator &QTreeWidgetItemIterator::operator+=(int n)\n", false, &_init_f_operator_plus__eq__767, &_call_f_operator_plus__eq__767);
}

// QTreeWidgetItemIterator &QTreeWidgetItemIterator::operator--()


static void _init_f_operator_minus__minus__0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QTreeWidgetItemIterator & > ();
}

static void _call_f_operator_minus__minus__0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QTreeWidgetItemIterator & > ((QTreeWidgetItemIterator &)((QTreeWidgetItemIterator *)cls)->operator-- ());
}

static qt_gsi::GenericMethod *_create_f_operator_minus__minus__0 ()
{
  return new qt_gsi::GenericMethod ("--", "@brief Method QTreeWidgetItemIterator &QTreeWidgetItemIterator::operator--()\n", false, &_init_f_operator_minus__minus__0, &_call_f_operator_minus__minus__0);
}

// const QTreeWidgetItemIterator QTreeWidgetItemIterator::operator--(int)


static void _init_f_operator_minus__minus__767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<int > (argspec_0);
  decl->set_return<const QTreeWidgetItemIterator > ();
}

static void _call_f_operator_minus__minus__767 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ret.write<const QTreeWidgetItemIterator > ((const QTreeWidgetItemIterator)((QTreeWidgetItemIterator *)cls)->operator-- (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_minus__minus__767 ()
{
  return new qt_gsi::GenericMethod ("--", "@brief Method const QTreeWidgetItemIterator QTreeWidgetItemIterator::operator--(int)\n", false, &_init_f_operator_minus__minus__767, &_call_f_operator_minus__minus__767);
}

// QTreeWidgetItemIterator &QTreeWidgetItemIterator::operator-=(int n)


static void _init_f_operator_minus__eq__767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("n");
  decl->add_arg<int > (argspec_0);
  decl->set_return<QTreeWidgetItemIterator & > ();
}

static void _call_f_operator_minus__eq__767 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ret.write<QTreeWidgetItemIterator & > ((QTreeWidgetItemIterator &)((QTreeWidgetItemIterator *)cls)->operator-= (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_minus__eq__767 ()
{
  return new qt_gsi::GenericMethod ("-=", "@brief Method QTreeWidgetItemIterator &QTreeWidgetItemIterator::operator-=(int n)\n", false, &_init_f_operator_minus__eq__767, &_call_f_operator_minus__eq__767);
}

// QTreeWidgetItemIterator &QTreeWidgetItemIterator::operator=(const QTreeWidgetItemIterator &it)


static void _init_f_operator_eq__3647 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("it");
  decl->add_arg<const QTreeWidgetItemIterator & > (argspec_0);
  decl->set_return<QTreeWidgetItemIterator & > ();
}

static void _call_f_operator_eq__3647 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QTreeWidgetItemIterator &arg1 = args.read<const QTreeWidgetItemIterator & > ();
  ret.write<QTreeWidgetItemIterator & > ((QTreeWidgetItemIterator &)((QTreeWidgetItemIterator *)cls)->operator= (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_eq__3647 ()
{
  return new qt_gsi::GenericMethod ("assign", "@brief Method QTreeWidgetItemIterator &QTreeWidgetItemIterator::operator=(const QTreeWidgetItemIterator &it)\n", false, &_init_f_operator_eq__3647, &_call_f_operator_eq__3647);
}


namespace gsi
{
gsi::Class<QTreeWidgetItemIterator> decl_QTreeWidgetItemIterator ("QTreeWidgetItemIterator",
  gsi::Methods(_create_ctor_QTreeWidgetItemIterator_3647 ()) +
  gsi::Methods(_create_ctor_QTreeWidgetItemIterator_6409 ()) +
  gsi::Methods(_create_ctor_QTreeWidgetItemIterator_6808 ()) +
  gsi::Methods(_create_f_operator_star__c0 ()) +
  gsi::Methods(_create_f_operator_plus__plus__0 ()) +
  gsi::Methods(_create_f_operator_plus__plus__767 ()) +
  gsi::Methods(_create_f_operator_plus__eq__767 ()) +
  gsi::Methods(_create_f_operator_minus__minus__0 ()) +
  gsi::Methods(_create_f_operator_minus__minus__767 ()) +
  gsi::Methods(_create_f_operator_minus__eq__767 ()) +
  gsi::Methods(_create_f_operator_eq__3647 ()),
  "@qt\n@brief Binding of QTreeWidgetItemIterator");

}


//  Implementation of the enum wrapper class for QTreeWidgetItemIterator::IteratorFlag
namespace qt_gsi
{

static QTreeWidgetItemIterator_IteratorFlag_Enum *c_1_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::All); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_2_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::Hidden); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_3_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::NotHidden); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_4_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::Selected); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_5_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::Unselected); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_6_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::Selectable); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_7_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::NotSelectable); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_8_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::DragEnabled); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_9_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::DragDisabled); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_10_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::DropEnabled); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_11_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::DropDisabled); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_12_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::HasChildren); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_13_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::NoChildren); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_14_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::Checked); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_15_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::NotChecked); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_16_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::Enabled); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_17_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::Disabled); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_18_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::Editable); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_19_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::NotEditable); }
static QTreeWidgetItemIterator_IteratorFlag_Enum *c_20_QTreeWidgetItemIterator_IteratorFlag_Enum () { return new QTreeWidgetItemIterator_IteratorFlag_Enum (QTreeWidgetItemIterator::UserFlag); }

static gsi::Methods mkdefs_QTreeWidgetItemIterator_IteratorFlag () {
  return
    gsi::constant ("All", &qt_gsi::c_1_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::All") +
    gsi::constant ("Hidden", &qt_gsi::c_2_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::Hidden") +
    gsi::constant ("NotHidden", &qt_gsi::c_3_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::NotHidden") +
    gsi::constant ("Selected", &qt_gsi::c_4_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::Selected") +
    gsi::constant ("Unselected", &qt_gsi::c_5_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::Unselected") +
    gsi::constant ("Selectable", &qt_gsi::c_6_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::Selectable") +
    gsi::constant ("NotSelectable", &qt_gsi::c_7_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::NotSelectable") +
    gsi::constant ("DragEnabled", &qt_gsi::c_8_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::DragEnabled") +
    gsi::constant ("DragDisabled", &qt_gsi::c_9_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::DragDisabled") +
    gsi::constant ("DropEnabled", &qt_gsi::c_10_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::DropEnabled") +
    gsi::constant ("DropDisabled", &qt_gsi::c_11_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::DropDisabled") +
    gsi::constant ("HasChildren", &qt_gsi::c_12_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::HasChildren") +
    gsi::constant ("NoChildren", &qt_gsi::c_13_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::NoChildren") +
    gsi::constant ("Checked", &qt_gsi::c_14_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::Checked") +
    gsi::constant ("NotChecked", &qt_gsi::c_15_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::NotChecked") +
    gsi::constant ("Enabled", &qt_gsi::c_16_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::Enabled") +
    gsi::constant ("Disabled", &qt_gsi::c_17_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::Disabled") +
    gsi::constant ("Editable", &qt_gsi::c_18_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::Editable") +
    gsi::constant ("NotEditable", &qt_gsi::c_19_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::NotEditable") +
    gsi::constant ("UserFlag", &qt_gsi::c_20_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Enum constant QTreeWidgetItemIterator::UserFlag");
}

static std::string to_s_QTreeWidgetItemIterator_IteratorFlag_Enum (const QTreeWidgetItemIterator_IteratorFlag_Enum *e)
{
  if (e->value () == QTreeWidgetItemIterator::All) { return tl::sprintf ("All (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::Hidden) { return tl::sprintf ("Hidden (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::NotHidden) { return tl::sprintf ("NotHidden (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::Selected) { return tl::sprintf ("Selected (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::Unselected) { return tl::sprintf ("Unselected (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::Selectable) { return tl::sprintf ("Selectable (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::NotSelectable) { return tl::sprintf ("NotSelectable (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::DragEnabled) { return tl::sprintf ("DragEnabled (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::DragDisabled) { return tl::sprintf ("DragDisabled (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::DropEnabled) { return tl::sprintf ("DropEnabled (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::DropDisabled) { return tl::sprintf ("DropDisabled (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::HasChildren) { return tl::sprintf ("HasChildren (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::NoChildren) { return tl::sprintf ("NoChildren (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::Checked) { return tl::sprintf ("Checked (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::NotChecked) { return tl::sprintf ("NotChecked (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::Enabled) { return tl::sprintf ("Enabled (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::Disabled) { return tl::sprintf ("Disabled (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::Editable) { return tl::sprintf ("Editable (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::NotEditable) { return tl::sprintf ("NotEditable (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTreeWidgetItemIterator::UserFlag) { return tl::sprintf ("UserFlag (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QTreeWidgetItemIterator_IteratorFlag_Enum (const QTreeWidgetItemIterator_IteratorFlag_Enum *e)
{
  return (unsigned int) e->value ();
}

static QTreeWidgetItemIterator_IteratorFlag_Enum *from_i_QTreeWidgetItemIterator_IteratorFlag_Enum (unsigned int i)
{
  return new QTreeWidgetItemIterator_IteratorFlag_Enum ((QTreeWidgetItemIterator::IteratorFlag) i);
}

static bool equalQTreeWidgetItemIterator_IteratorFlag_Enum (const QTreeWidgetItemIterator_IteratorFlag_Enum *e, QTreeWidgetItemIterator_IteratorFlag_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QTreeWidgetItemIterator_IteratorFlag_Enum (const QTreeWidgetItemIterator_IteratorFlag_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QTreeWidgetItemIterator_IteratorFlag_Enums oropQTreeWidgetItemIterator_IteratorFlag_Enums (const QTreeWidgetItemIterator_IteratorFlag_Enums *e, const QTreeWidgetItemIterator_IteratorFlag_Enums &d)
{
  return e->flags () | d.flags ();
}

static QTreeWidgetItemIterator_IteratorFlag_Enums andopQTreeWidgetItemIterator_IteratorFlag_Enums (const QTreeWidgetItemIterator_IteratorFlag_Enums *e, const QTreeWidgetItemIterator_IteratorFlag_Enums &d)
{
  return e->flags () & d.flags ();
}

static QTreeWidgetItemIterator_IteratorFlag_Enums xoropQTreeWidgetItemIterator_IteratorFlag_Enums (const QTreeWidgetItemIterator_IteratorFlag_Enums *e, const QTreeWidgetItemIterator_IteratorFlag_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QTreeWidgetItemIterator_IteratorFlag_Enums (const QTreeWidgetItemIterator_IteratorFlag_Enums *e)
{
  std::string l;
  if (e->testFlag (QTreeWidgetItemIterator::All)) { if (!l.empty ()) l += "|"; l += "All"; }
  if (e->testFlag (QTreeWidgetItemIterator::Hidden)) { if (!l.empty ()) l += "|"; l += "Hidden"; }
  if (e->testFlag (QTreeWidgetItemIterator::NotHidden)) { if (!l.empty ()) l += "|"; l += "NotHidden"; }
  if (e->testFlag (QTreeWidgetItemIterator::Selected)) { if (!l.empty ()) l += "|"; l += "Selected"; }
  if (e->testFlag (QTreeWidgetItemIterator::Unselected)) { if (!l.empty ()) l += "|"; l += "Unselected"; }
  if (e->testFlag (QTreeWidgetItemIterator::Selectable)) { if (!l.empty ()) l += "|"; l += "Selectable"; }
  if (e->testFlag (QTreeWidgetItemIterator::NotSelectable)) { if (!l.empty ()) l += "|"; l += "NotSelectable"; }
  if (e->testFlag (QTreeWidgetItemIterator::DragEnabled)) { if (!l.empty ()) l += "|"; l += "DragEnabled"; }
  if (e->testFlag (QTreeWidgetItemIterator::DragDisabled)) { if (!l.empty ()) l += "|"; l += "DragDisabled"; }
  if (e->testFlag (QTreeWidgetItemIterator::DropEnabled)) { if (!l.empty ()) l += "|"; l += "DropEnabled"; }
  if (e->testFlag (QTreeWidgetItemIterator::DropDisabled)) { if (!l.empty ()) l += "|"; l += "DropDisabled"; }
  if (e->testFlag (QTreeWidgetItemIterator::HasChildren)) { if (!l.empty ()) l += "|"; l += "HasChildren"; }
  if (e->testFlag (QTreeWidgetItemIterator::NoChildren)) { if (!l.empty ()) l += "|"; l += "NoChildren"; }
  if (e->testFlag (QTreeWidgetItemIterator::Checked)) { if (!l.empty ()) l += "|"; l += "Checked"; }
  if (e->testFlag (QTreeWidgetItemIterator::NotChecked)) { if (!l.empty ()) l += "|"; l += "NotChecked"; }
  if (e->testFlag (QTreeWidgetItemIterator::Enabled)) { if (!l.empty ()) l += "|"; l += "Enabled"; }
  if (e->testFlag (QTreeWidgetItemIterator::Disabled)) { if (!l.empty ()) l += "|"; l += "Disabled"; }
  if (e->testFlag (QTreeWidgetItemIterator::Editable)) { if (!l.empty ()) l += "|"; l += "Editable"; }
  if (e->testFlag (QTreeWidgetItemIterator::NotEditable)) { if (!l.empty ()) l += "|"; l += "NotEditable"; }
  if (e->testFlag (QTreeWidgetItemIterator::UserFlag)) { if (!l.empty ()) l += "|"; l += "UserFlag"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QTreeWidgetItemIterator_IteratorFlag_Enums (const QTreeWidgetItemIterator_IteratorFlag_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QTreeWidgetItemIterator_IteratorFlag_Enums (const QTreeWidgetItemIterator_IteratorFlag_Enums *e, const QTreeWidgetItemIterator_IteratorFlag_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QTreeWidgetItemIterator_IteratorFlag_Enums> decl_QTreeWidgetItemIterator_IteratorFlag_Enums ("QTreeWidgetItemIterator_QFlags_IteratorFlag",
  gsi::method_ext ("|", &qt_gsi::oropQTreeWidgetItemIterator_IteratorFlag_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQTreeWidgetItemIterator_IteratorFlag_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQTreeWidgetItemIterator_IteratorFlag_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QTreeWidgetItemIterator_IteratorFlag_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QTreeWidgetItemIterator_IteratorFlag_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QTreeWidgetItemIterator_IteratorFlag_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QTreeWidgetItemIterator::IteratorFlag> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QTreeWidgetItemIterator_IteratorFlag_Enum> decl_QTreeWidgetItemIterator_IteratorFlag_Enum (decl_QTreeWidgetItemIterator_IteratorFlag_Enums, "QTreeWidgetItemIterator_IteratorFlag",
  qt_gsi::mkdefs_QTreeWidgetItemIterator_IteratorFlag () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QTreeWidgetItemIterator_IteratorFlag_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQTreeWidgetItemIterator_IteratorFlag_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QTreeWidgetItemIterator_IteratorFlag_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QTreeWidgetItemIterator_IteratorFlag_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QTreeWidgetItemIterator::IteratorFlag enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QTreeWidgetItemIterator> inject_QTreeWidgetItemIterator_IteratorFlag_Enum_in_parent (qt_gsi::mkdefs_QTreeWidgetItemIterator_IteratorFlag ());
static gsi::ClassExt<QTreeWidgetItemIterator> decl_QTreeWidgetItemIterator_IteratorFlag_Enum_as_child (decl_QTreeWidgetItemIterator_IteratorFlag_Enum, "IteratorFlag");

}

