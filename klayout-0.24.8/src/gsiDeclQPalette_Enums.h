
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQPalette_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQPalette_Enums
#define _HDR_gsiDeclQPalette_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QPalette::ColorGroup>
class QPalette_ColorGroup_Enums : public QFlags<enum QPalette::ColorGroup> {
public:
  QPalette_ColorGroup_Enums () : m_flags () { }
  QPalette_ColorGroup_Enums (enum QPalette::ColorGroup v) : m_flags (v) { }
  QPalette_ColorGroup_Enums (const QFlags<enum QPalette::ColorGroup> &v) : m_flags (v) { }
  QFlags<enum QPalette::ColorGroup> flags () const { return m_flags; }
private:
  QFlags<QPalette::ColorGroup> m_flags;
};

//  Wrapper class for enum QPalette::ColorGroup
class QPalette_ColorGroup_Enum : public QPalette_ColorGroup_Enums {
public:
  QPalette_ColorGroup_Enum () { }
  QPalette_ColorGroup_Enum (enum QPalette::ColorGroup v) : QPalette_ColorGroup_Enums (v) { }
  enum QPalette::ColorGroup value () const { return (enum QPalette::ColorGroup) flags ().operator int (); }
};

//  Converter for QFlags<enum QPalette::ColorGroup>
template <>
struct Converter<QFlags<enum QPalette::ColorGroup> >
{
public:
  typedef QFlags<enum QPalette::ColorGroup> source_type;
  typedef QPalette_ColorGroup_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QPalette::ColorGroup
template <>
struct Converter<enum QPalette::ColorGroup>
{
public:
  typedef enum QPalette::ColorGroup source_type;
  typedef QPalette_ColorGroup_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QPalette::ColorRole>
class QPalette_ColorRole_Enums : public QFlags<enum QPalette::ColorRole> {
public:
  QPalette_ColorRole_Enums () : m_flags () { }
  QPalette_ColorRole_Enums (enum QPalette::ColorRole v) : m_flags (v) { }
  QPalette_ColorRole_Enums (const QFlags<enum QPalette::ColorRole> &v) : m_flags (v) { }
  QFlags<enum QPalette::ColorRole> flags () const { return m_flags; }
private:
  QFlags<QPalette::ColorRole> m_flags;
};

//  Wrapper class for enum QPalette::ColorRole
class QPalette_ColorRole_Enum : public QPalette_ColorRole_Enums {
public:
  QPalette_ColorRole_Enum () { }
  QPalette_ColorRole_Enum (enum QPalette::ColorRole v) : QPalette_ColorRole_Enums (v) { }
  enum QPalette::ColorRole value () const { return (enum QPalette::ColorRole) flags ().operator int (); }
};

//  Converter for QFlags<enum QPalette::ColorRole>
template <>
struct Converter<QFlags<enum QPalette::ColorRole> >
{
public:
  typedef QFlags<enum QPalette::ColorRole> source_type;
  typedef QPalette_ColorRole_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QPalette::ColorRole
template <>
struct Converter<enum QPalette::ColorRole>
{
public:
  typedef enum QPalette::ColorRole source_type;
  typedef QPalette_ColorRole_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::GlobalColor>
class Qt_GlobalColor_Enums : public QFlags<enum Qt::GlobalColor> {
public:
  Qt_GlobalColor_Enums () : m_flags () { }
  Qt_GlobalColor_Enums (enum Qt::GlobalColor v) : m_flags (v) { }
  Qt_GlobalColor_Enums (const QFlags<enum Qt::GlobalColor> &v) : m_flags (v) { }
  QFlags<enum Qt::GlobalColor> flags () const { return m_flags; }
private:
  QFlags<Qt::GlobalColor> m_flags;
};

//  Wrapper class for enum Qt::GlobalColor
class Qt_GlobalColor_Enum : public Qt_GlobalColor_Enums {
public:
  Qt_GlobalColor_Enum () { }
  Qt_GlobalColor_Enum (enum Qt::GlobalColor v) : Qt_GlobalColor_Enums (v) { }
  enum Qt::GlobalColor value () const { return (enum Qt::GlobalColor) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::GlobalColor>
template <>
struct Converter<QFlags<enum Qt::GlobalColor> >
{
public:
  typedef QFlags<enum Qt::GlobalColor> source_type;
  typedef Qt_GlobalColor_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::GlobalColor
template <>
struct Converter<enum Qt::GlobalColor>
{
public:
  typedef enum Qt::GlobalColor source_type;
  typedef Qt_GlobalColor_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
