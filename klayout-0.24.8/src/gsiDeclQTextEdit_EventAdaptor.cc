
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file generated/gsiDeclQTextEdit_EventAdaptor.cc
*  @brief Event adaptor implementations for QTextEdit
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQTextEdit_EventAdaptor.h"

// -----------------------------------------------------------------------
// class QTextEdit_EventAdaptor

QTextEdit_EventAdaptor::QTextEdit_EventAdaptor (QObject *host)
  : QObject ()
{
  connect (host, SIGNAL(copyAvailable(bool)), this, SLOT(copyAvailable(bool)));
  connect (host, SIGNAL(currentCharFormatChanged(const QTextCharFormat &)), this, SLOT(currentCharFormatChanged(const QTextCharFormat &)));
  connect (host, SIGNAL(cursorPositionChanged()), this, SLOT(cursorPositionChanged()));
  connect (host, SIGNAL(customContextMenuRequested(const QPoint &)), this, SLOT(customContextMenuRequested(const QPoint &)));
  connect (host, SIGNAL(destroyed(QObject *)), this, SLOT(destroyed(QObject *)));
  connect (host, SIGNAL(redoAvailable(bool)), this, SLOT(redoAvailable(bool)));
  connect (host, SIGNAL(selectionChanged()), this, SLOT(selectionChanged()));
  connect (host, SIGNAL(textChanged()), this, SLOT(textChanged()));
  connect (host, SIGNAL(undoAvailable(bool)), this, SLOT(undoAvailable(bool)));
}

//  Event QTextEdit::copyAvailable(bool b)
void QTextEdit_EventAdaptor::copyAvailable(bool b) {
BEGIN_PROTECTED
  copyAvailable_e_864(b);
END_PROTECTED
}

//  Event QTextEdit::currentCharFormatChanged(const QTextCharFormat &format)
void QTextEdit_EventAdaptor::currentCharFormatChanged(const QTextCharFormat &format) {
BEGIN_PROTECTED
  currentCharFormatChanged_e_2814(format);
END_PROTECTED
}

//  Event QTextEdit::cursorPositionChanged()
void QTextEdit_EventAdaptor::cursorPositionChanged() {
BEGIN_PROTECTED
  cursorPositionChanged_e_0();
END_PROTECTED
}

//  Event QTextEdit::customContextMenuRequested(const QPoint &pos)
void QTextEdit_EventAdaptor::customContextMenuRequested(const QPoint &pos) {
BEGIN_PROTECTED
  customContextMenuRequested_e_1916(pos);
END_PROTECTED
}

//  Event QTextEdit::destroyed(QObject *arg1)
void QTextEdit_EventAdaptor::destroyed(QObject *arg1) {
BEGIN_PROTECTED
  destroyed_e_1302(arg1);
END_PROTECTED
}

//  Event QTextEdit::redoAvailable(bool b)
void QTextEdit_EventAdaptor::redoAvailable(bool b) {
BEGIN_PROTECTED
  redoAvailable_e_864(b);
END_PROTECTED
}

//  Event QTextEdit::selectionChanged()
void QTextEdit_EventAdaptor::selectionChanged() {
BEGIN_PROTECTED
  selectionChanged_e_0();
END_PROTECTED
}

//  Event QTextEdit::textChanged()
void QTextEdit_EventAdaptor::textChanged() {
BEGIN_PROTECTED
  textChanged_e_0();
END_PROTECTED
}

//  Event QTextEdit::undoAvailable(bool b)
void QTextEdit_EventAdaptor::undoAvailable(bool b) {
BEGIN_PROTECTED
  undoAvailable_e_864(b);
END_PROTECTED
}
