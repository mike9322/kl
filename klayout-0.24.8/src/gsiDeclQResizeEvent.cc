
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQResizeEvent.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQResizeEvent_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QResizeEvent

// const QSize &QResizeEvent::oldSize()


static void _init_f_oldSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QSize & > ();
}

static void _call_f_oldSize_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<const QSize & > ((const QSize &)((QResizeEvent *)cls)->oldSize ());
}

static qt_gsi::GenericMethod *_create_f_oldSize_c0 ()
{
  return new qt_gsi::GenericMethod ("oldSize", "@brief Method const QSize &QResizeEvent::oldSize()\n", true, &_init_f_oldSize_c0, &_call_f_oldSize_c0);
}

// const QSize &QResizeEvent::size()


static void _init_f_size_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QSize & > ();
}

static void _call_f_size_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<const QSize & > ((const QSize &)((QResizeEvent *)cls)->size ());
}

static qt_gsi::GenericMethod *_create_f_size_c0 ()
{
  return new qt_gsi::GenericMethod ("size", "@brief Method const QSize &QResizeEvent::size()\n", true, &_init_f_size_c0, &_call_f_size_c0);
}

namespace gsi
{
extern gsi::Class<QEvent> decl_QEvent;

gsi::Class<QResizeEvent> decl_QResizeEvent (decl_QEvent, "QResizeEvent_Native",
  gsi::Methods(_create_f_oldSize_c0 ()) +
  gsi::Methods(_create_f_size_c0 ()),
  "@hide\n@alias QResizeEvent");
}


class QResizeEvent_Adaptor : public QResizeEvent, public qt_gsi::QtObjectBase
{
public:

  virtual ~QResizeEvent_Adaptor();

  //  [adaptor ctor] QResizeEvent::QResizeEvent(const QSize &size, const QSize &oldSize)
  QResizeEvent_Adaptor(const QSize &size, const QSize &oldSize) : QResizeEvent(size, oldSize)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  
};

QResizeEvent_Adaptor::~QResizeEvent_Adaptor() { }

//  Constructor QResizeEvent::QResizeEvent(const QSize &size, const QSize &oldSize) (adaptor class)

static void _init_ctor_QResizeEvent_Adaptor_3502 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("size");
  decl->add_arg<const QSize & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("oldSize");
  decl->add_arg<const QSize & > (argspec_1);
  decl->set_return_new<QResizeEvent_Adaptor *> ();
}

static void _call_ctor_QResizeEvent_Adaptor_3502 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QSize &arg1 = args.read<const QSize & > ();
  const QSize &arg2 = args.read<const QSize & > ();
  ret.write<QResizeEvent_Adaptor *> (new QResizeEvent_Adaptor (arg1, arg2));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QResizeEvent_Adaptor_3502 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QResizeEvent::QResizeEvent(const QSize &size, const QSize &oldSize)\nThis method creates an object of class QResizeEvent.", &_init_ctor_QResizeEvent_Adaptor_3502, &_call_ctor_QResizeEvent_Adaptor_3502);
}

namespace gsi
{

extern gsi::Class<QResizeEvent> decl_QResizeEvent;

gsi::Class<QResizeEvent_Adaptor> decl_QResizeEvent_Adaptor (decl_QResizeEvent, "QResizeEvent",
  gsi::Methods(_create_ctor_QResizeEvent_Adaptor_3502 ()),
  "@qt\n@brief Binding of QResizeEvent");

}

