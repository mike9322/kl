
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQSystemTrayIcon_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQSystemTrayIcon_Enums
#define _HDR_gsiDeclQSystemTrayIcon_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QSystemTrayIcon::ActivationReason>
class QSystemTrayIcon_ActivationReason_Enums : public QFlags<enum QSystemTrayIcon::ActivationReason> {
public:
  QSystemTrayIcon_ActivationReason_Enums () : m_flags () { }
  QSystemTrayIcon_ActivationReason_Enums (enum QSystemTrayIcon::ActivationReason v) : m_flags (v) { }
  QSystemTrayIcon_ActivationReason_Enums (const QFlags<enum QSystemTrayIcon::ActivationReason> &v) : m_flags (v) { }
  QFlags<enum QSystemTrayIcon::ActivationReason> flags () const { return m_flags; }
private:
  QFlags<QSystemTrayIcon::ActivationReason> m_flags;
};

//  Wrapper class for enum QSystemTrayIcon::ActivationReason
class QSystemTrayIcon_ActivationReason_Enum : public QSystemTrayIcon_ActivationReason_Enums {
public:
  QSystemTrayIcon_ActivationReason_Enum () { }
  QSystemTrayIcon_ActivationReason_Enum (enum QSystemTrayIcon::ActivationReason v) : QSystemTrayIcon_ActivationReason_Enums (v) { }
  enum QSystemTrayIcon::ActivationReason value () const { return (enum QSystemTrayIcon::ActivationReason) flags ().operator int (); }
};

//  Converter for QFlags<enum QSystemTrayIcon::ActivationReason>
template <>
struct Converter<QFlags<enum QSystemTrayIcon::ActivationReason> >
{
public:
  typedef QFlags<enum QSystemTrayIcon::ActivationReason> source_type;
  typedef QSystemTrayIcon_ActivationReason_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSystemTrayIcon::ActivationReason
template <>
struct Converter<enum QSystemTrayIcon::ActivationReason>
{
public:
  typedef enum QSystemTrayIcon::ActivationReason source_type;
  typedef QSystemTrayIcon_ActivationReason_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSystemTrayIcon::MessageIcon>
class QSystemTrayIcon_MessageIcon_Enums : public QFlags<enum QSystemTrayIcon::MessageIcon> {
public:
  QSystemTrayIcon_MessageIcon_Enums () : m_flags () { }
  QSystemTrayIcon_MessageIcon_Enums (enum QSystemTrayIcon::MessageIcon v) : m_flags (v) { }
  QSystemTrayIcon_MessageIcon_Enums (const QFlags<enum QSystemTrayIcon::MessageIcon> &v) : m_flags (v) { }
  QFlags<enum QSystemTrayIcon::MessageIcon> flags () const { return m_flags; }
private:
  QFlags<QSystemTrayIcon::MessageIcon> m_flags;
};

//  Wrapper class for enum QSystemTrayIcon::MessageIcon
class QSystemTrayIcon_MessageIcon_Enum : public QSystemTrayIcon_MessageIcon_Enums {
public:
  QSystemTrayIcon_MessageIcon_Enum () { }
  QSystemTrayIcon_MessageIcon_Enum (enum QSystemTrayIcon::MessageIcon v) : QSystemTrayIcon_MessageIcon_Enums (v) { }
  enum QSystemTrayIcon::MessageIcon value () const { return (enum QSystemTrayIcon::MessageIcon) flags ().operator int (); }
};

//  Converter for QFlags<enum QSystemTrayIcon::MessageIcon>
template <>
struct Converter<QFlags<enum QSystemTrayIcon::MessageIcon> >
{
public:
  typedef QFlags<enum QSystemTrayIcon::MessageIcon> source_type;
  typedef QSystemTrayIcon_MessageIcon_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSystemTrayIcon::MessageIcon
template <>
struct Converter<enum QSystemTrayIcon::MessageIcon>
{
public:
  typedef enum QSystemTrayIcon::MessageIcon source_type;
  typedef QSystemTrayIcon_MessageIcon_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ConnectionType>
class Qt_ConnectionType_Enums : public QFlags<enum Qt::ConnectionType> {
public:
  Qt_ConnectionType_Enums () : m_flags () { }
  Qt_ConnectionType_Enums (enum Qt::ConnectionType v) : m_flags (v) { }
  Qt_ConnectionType_Enums (const QFlags<enum Qt::ConnectionType> &v) : m_flags (v) { }
  QFlags<enum Qt::ConnectionType> flags () const { return m_flags; }
private:
  QFlags<Qt::ConnectionType> m_flags;
};

//  Wrapper class for enum Qt::ConnectionType
class Qt_ConnectionType_Enum : public Qt_ConnectionType_Enums {
public:
  Qt_ConnectionType_Enum () { }
  Qt_ConnectionType_Enum (enum Qt::ConnectionType v) : Qt_ConnectionType_Enums (v) { }
  enum Qt::ConnectionType value () const { return (enum Qt::ConnectionType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ConnectionType>
template <>
struct Converter<QFlags<enum Qt::ConnectionType> >
{
public:
  typedef QFlags<enum Qt::ConnectionType> source_type;
  typedef Qt_ConnectionType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ConnectionType
template <>
struct Converter<enum Qt::ConnectionType>
{
public:
  typedef enum Qt::ConnectionType source_type;
  typedef Qt_ConnectionType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
