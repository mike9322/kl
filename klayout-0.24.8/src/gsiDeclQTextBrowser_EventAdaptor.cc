
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file generated/gsiDeclQTextBrowser_EventAdaptor.cc
*  @brief Event adaptor implementations for QTextBrowser
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQTextBrowser_EventAdaptor.h"

// -----------------------------------------------------------------------
// class QTextBrowser_EventAdaptor

QTextBrowser_EventAdaptor::QTextBrowser_EventAdaptor (QObject *host)
  : QObject ()
{
  connect (host, SIGNAL(anchorClicked(const QUrl &)), this, SLOT(anchorClicked(const QUrl &)));
  connect (host, SIGNAL(backwardAvailable(bool)), this, SLOT(backwardAvailable(bool)));
  connect (host, SIGNAL(copyAvailable(bool)), this, SLOT(copyAvailable(bool)));
  connect (host, SIGNAL(currentCharFormatChanged(const QTextCharFormat &)), this, SLOT(currentCharFormatChanged(const QTextCharFormat &)));
  connect (host, SIGNAL(cursorPositionChanged()), this, SLOT(cursorPositionChanged()));
  connect (host, SIGNAL(customContextMenuRequested(const QPoint &)), this, SLOT(customContextMenuRequested(const QPoint &)));
  connect (host, SIGNAL(destroyed(QObject *)), this, SLOT(destroyed(QObject *)));
  connect (host, SIGNAL(forwardAvailable(bool)), this, SLOT(forwardAvailable(bool)));
  connect (host, SIGNAL(highlighted(const QUrl &)), this, SLOT(highlighted(const QUrl &)));
  connect (host, SIGNAL(highlighted(const QString &)), this, SLOT(highlighted(const QString &)));
  connect (host, SIGNAL(historyChanged()), this, SLOT(historyChanged()));
  connect (host, SIGNAL(redoAvailable(bool)), this, SLOT(redoAvailable(bool)));
  connect (host, SIGNAL(selectionChanged()), this, SLOT(selectionChanged()));
  connect (host, SIGNAL(sourceChanged(const QUrl &)), this, SLOT(sourceChanged(const QUrl &)));
  connect (host, SIGNAL(textChanged()), this, SLOT(textChanged()));
  connect (host, SIGNAL(undoAvailable(bool)), this, SLOT(undoAvailable(bool)));
}

//  Event QTextBrowser::anchorClicked(const QUrl &arg1)
void QTextBrowser_EventAdaptor::anchorClicked(const QUrl &arg1) {
BEGIN_PROTECTED
  anchorClicked_e_1701(arg1);
END_PROTECTED
}

//  Event QTextBrowser::backwardAvailable(bool arg1)
void QTextBrowser_EventAdaptor::backwardAvailable(bool arg1) {
BEGIN_PROTECTED
  backwardAvailable_e_864(arg1);
END_PROTECTED
}

//  Event QTextBrowser::copyAvailable(bool b)
void QTextBrowser_EventAdaptor::copyAvailable(bool b) {
BEGIN_PROTECTED
  copyAvailable_e_864(b);
END_PROTECTED
}

//  Event QTextBrowser::currentCharFormatChanged(const QTextCharFormat &format)
void QTextBrowser_EventAdaptor::currentCharFormatChanged(const QTextCharFormat &format) {
BEGIN_PROTECTED
  currentCharFormatChanged_e_2814(format);
END_PROTECTED
}

//  Event QTextBrowser::cursorPositionChanged()
void QTextBrowser_EventAdaptor::cursorPositionChanged() {
BEGIN_PROTECTED
  cursorPositionChanged_e_0();
END_PROTECTED
}

//  Event QTextBrowser::customContextMenuRequested(const QPoint &pos)
void QTextBrowser_EventAdaptor::customContextMenuRequested(const QPoint &pos) {
BEGIN_PROTECTED
  customContextMenuRequested_e_1916(pos);
END_PROTECTED
}

//  Event QTextBrowser::destroyed(QObject *arg1)
void QTextBrowser_EventAdaptor::destroyed(QObject *arg1) {
BEGIN_PROTECTED
  destroyed_e_1302(arg1);
END_PROTECTED
}

//  Event QTextBrowser::forwardAvailable(bool arg1)
void QTextBrowser_EventAdaptor::forwardAvailable(bool arg1) {
BEGIN_PROTECTED
  forwardAvailable_e_864(arg1);
END_PROTECTED
}

//  Event QTextBrowser::highlighted(const QUrl &arg1)
void QTextBrowser_EventAdaptor::highlighted(const QUrl &arg1) {
BEGIN_PROTECTED
  highlighted_e_1701(arg1);
END_PROTECTED
}

//  Event QTextBrowser::highlighted(const QString &arg1)
void QTextBrowser_EventAdaptor::highlighted(const QString &arg1) {
BEGIN_PROTECTED
  highlighted_e_2025(arg1);
END_PROTECTED
}

//  Event QTextBrowser::historyChanged()
void QTextBrowser_EventAdaptor::historyChanged() {
BEGIN_PROTECTED
  historyChanged_e_0();
END_PROTECTED
}

//  Event QTextBrowser::redoAvailable(bool b)
void QTextBrowser_EventAdaptor::redoAvailable(bool b) {
BEGIN_PROTECTED
  redoAvailable_e_864(b);
END_PROTECTED
}

//  Event QTextBrowser::selectionChanged()
void QTextBrowser_EventAdaptor::selectionChanged() {
BEGIN_PROTECTED
  selectionChanged_e_0();
END_PROTECTED
}

//  Event QTextBrowser::sourceChanged(const QUrl &arg1)
void QTextBrowser_EventAdaptor::sourceChanged(const QUrl &arg1) {
BEGIN_PROTECTED
  sourceChanged_e_1701(arg1);
END_PROTECTED
}

//  Event QTextBrowser::textChanged()
void QTextBrowser_EventAdaptor::textChanged() {
BEGIN_PROTECTED
  textChanged_e_0();
END_PROTECTED
}

//  Event QTextBrowser::undoAvailable(bool b)
void QTextBrowser_EventAdaptor::undoAvailable(bool b) {
BEGIN_PROTECTED
  undoAvailable_e_864(b);
END_PROTECTED
}
