
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQNetworkAddressEntry.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtNetwork.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQNetworkAddressEntry_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QNetworkAddressEntry

//  Constructor QNetworkAddressEntry::QNetworkAddressEntry()


static void _init_ctor_QNetworkAddressEntry_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QNetworkAddressEntry *> ();
}

static void _call_ctor_QNetworkAddressEntry_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QNetworkAddressEntry *> (new QNetworkAddressEntry ());
}

static qt_gsi::GenericStaticMethod *_create_ctor_QNetworkAddressEntry_0 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNetworkAddressEntry::QNetworkAddressEntry()\nThis method creates an object of class QNetworkAddressEntry.", &_init_ctor_QNetworkAddressEntry_0, &_call_ctor_QNetworkAddressEntry_0);
}

//  Constructor QNetworkAddressEntry::QNetworkAddressEntry(const QNetworkAddressEntry &other)


static void _init_ctor_QNetworkAddressEntry_3380 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkAddressEntry & > (argspec_0);
  decl->set_return_new<QNetworkAddressEntry *> ();
}

static void _call_ctor_QNetworkAddressEntry_3380 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkAddressEntry &arg1 = args.read<const QNetworkAddressEntry & > ();
  ret.write<QNetworkAddressEntry *> (new QNetworkAddressEntry (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QNetworkAddressEntry_3380 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNetworkAddressEntry::QNetworkAddressEntry(const QNetworkAddressEntry &other)\nThis method creates an object of class QNetworkAddressEntry.", &_init_ctor_QNetworkAddressEntry_3380, &_call_ctor_QNetworkAddressEntry_3380);
}

// QHostAddress QNetworkAddressEntry::broadcast()


static void _init_f_broadcast_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QHostAddress > ();
}

static void _call_f_broadcast_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QHostAddress > ((QHostAddress)((QNetworkAddressEntry *)cls)->broadcast ());
}

static qt_gsi::GenericMethod *_create_f_broadcast_c0 ()
{
  return new qt_gsi::GenericMethod (":broadcast", "@brief Method QHostAddress QNetworkAddressEntry::broadcast()\n", true, &_init_f_broadcast_c0, &_call_f_broadcast_c0);
}

// QHostAddress QNetworkAddressEntry::ip()


static void _init_f_ip_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QHostAddress > ();
}

static void _call_f_ip_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QHostAddress > ((QHostAddress)((QNetworkAddressEntry *)cls)->ip ());
}

static qt_gsi::GenericMethod *_create_f_ip_c0 ()
{
  return new qt_gsi::GenericMethod (":ip", "@brief Method QHostAddress QNetworkAddressEntry::ip()\n", true, &_init_f_ip_c0, &_call_f_ip_c0);
}

// QHostAddress QNetworkAddressEntry::netmask()


static void _init_f_netmask_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QHostAddress > ();
}

static void _call_f_netmask_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QHostAddress > ((QHostAddress)((QNetworkAddressEntry *)cls)->netmask ());
}

static qt_gsi::GenericMethod *_create_f_netmask_c0 ()
{
  return new qt_gsi::GenericMethod (":netmask", "@brief Method QHostAddress QNetworkAddressEntry::netmask()\n", true, &_init_f_netmask_c0, &_call_f_netmask_c0);
}

// bool QNetworkAddressEntry::operator!=(const QNetworkAddressEntry &other)


static void _init_f_operator_excl__eq__c3380 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkAddressEntry & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_operator_excl__eq__c3380 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkAddressEntry &arg1 = args.read<const QNetworkAddressEntry & > ();
  ret.write<bool > ((bool)((QNetworkAddressEntry *)cls)->operator!= (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_excl__eq__c3380 ()
{
  return new qt_gsi::GenericMethod ("!=", "@brief Method bool QNetworkAddressEntry::operator!=(const QNetworkAddressEntry &other)\n", true, &_init_f_operator_excl__eq__c3380, &_call_f_operator_excl__eq__c3380);
}

// QNetworkAddressEntry &QNetworkAddressEntry::operator=(const QNetworkAddressEntry &other)


static void _init_f_operator_eq__3380 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkAddressEntry & > (argspec_0);
  decl->set_return<QNetworkAddressEntry & > ();
}

static void _call_f_operator_eq__3380 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkAddressEntry &arg1 = args.read<const QNetworkAddressEntry & > ();
  ret.write<QNetworkAddressEntry & > ((QNetworkAddressEntry &)((QNetworkAddressEntry *)cls)->operator= (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_eq__3380 ()
{
  return new qt_gsi::GenericMethod ("assign", "@brief Method QNetworkAddressEntry &QNetworkAddressEntry::operator=(const QNetworkAddressEntry &other)\n", false, &_init_f_operator_eq__3380, &_call_f_operator_eq__3380);
}

// bool QNetworkAddressEntry::operator==(const QNetworkAddressEntry &other)


static void _init_f_operator_eq__eq__c3380 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkAddressEntry & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_operator_eq__eq__c3380 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkAddressEntry &arg1 = args.read<const QNetworkAddressEntry & > ();
  ret.write<bool > ((bool)((QNetworkAddressEntry *)cls)->operator== (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_eq__eq__c3380 ()
{
  return new qt_gsi::GenericMethod ("==", "@brief Method bool QNetworkAddressEntry::operator==(const QNetworkAddressEntry &other)\n", true, &_init_f_operator_eq__eq__c3380, &_call_f_operator_eq__eq__c3380);
}

// int QNetworkAddressEntry::prefixLength()


static void _init_f_prefixLength_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_prefixLength_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QNetworkAddressEntry *)cls)->prefixLength ());
}

static qt_gsi::GenericMethod *_create_f_prefixLength_c0 ()
{
  return new qt_gsi::GenericMethod (":prefixLength", "@brief Method int QNetworkAddressEntry::prefixLength()\n", true, &_init_f_prefixLength_c0, &_call_f_prefixLength_c0);
}

// void QNetworkAddressEntry::setBroadcast(const QHostAddress &newBroadcast)


static void _init_f_setBroadcast_2518 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("newBroadcast");
  decl->add_arg<const QHostAddress & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setBroadcast_2518 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QHostAddress &arg1 = args.read<const QHostAddress & > ();
  ((QNetworkAddressEntry *)cls)->setBroadcast (arg1);
}

static qt_gsi::GenericMethod *_create_f_setBroadcast_2518 ()
{
  return new qt_gsi::GenericMethod ("setBroadcast|broadcast=", "@brief Method void QNetworkAddressEntry::setBroadcast(const QHostAddress &newBroadcast)\n", false, &_init_f_setBroadcast_2518, &_call_f_setBroadcast_2518);
}

// void QNetworkAddressEntry::setIp(const QHostAddress &newIp)


static void _init_f_setIp_2518 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("newIp");
  decl->add_arg<const QHostAddress & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setIp_2518 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QHostAddress &arg1 = args.read<const QHostAddress & > ();
  ((QNetworkAddressEntry *)cls)->setIp (arg1);
}

static qt_gsi::GenericMethod *_create_f_setIp_2518 ()
{
  return new qt_gsi::GenericMethod ("setIp|ip=", "@brief Method void QNetworkAddressEntry::setIp(const QHostAddress &newIp)\n", false, &_init_f_setIp_2518, &_call_f_setIp_2518);
}

// void QNetworkAddressEntry::setNetmask(const QHostAddress &newNetmask)


static void _init_f_setNetmask_2518 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("newNetmask");
  decl->add_arg<const QHostAddress & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setNetmask_2518 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QHostAddress &arg1 = args.read<const QHostAddress & > ();
  ((QNetworkAddressEntry *)cls)->setNetmask (arg1);
}

static qt_gsi::GenericMethod *_create_f_setNetmask_2518 ()
{
  return new qt_gsi::GenericMethod ("setNetmask|netmask=", "@brief Method void QNetworkAddressEntry::setNetmask(const QHostAddress &newNetmask)\n", false, &_init_f_setNetmask_2518, &_call_f_setNetmask_2518);
}

// void QNetworkAddressEntry::setPrefixLength(int length)


static void _init_f_setPrefixLength_767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("length");
  decl->add_arg<int > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPrefixLength_767 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ((QNetworkAddressEntry *)cls)->setPrefixLength (arg1);
}

static qt_gsi::GenericMethod *_create_f_setPrefixLength_767 ()
{
  return new qt_gsi::GenericMethod ("setPrefixLength|prefixLength=", "@brief Method void QNetworkAddressEntry::setPrefixLength(int length)\n", false, &_init_f_setPrefixLength_767, &_call_f_setPrefixLength_767);
}


namespace gsi
{
gsi::Class<QNetworkAddressEntry> decl_QNetworkAddressEntry ("QNetworkAddressEntry",
  gsi::Methods(_create_ctor_QNetworkAddressEntry_0 ()) +
  gsi::Methods(_create_ctor_QNetworkAddressEntry_3380 ()) +
  gsi::Methods(_create_f_broadcast_c0 ()) +
  gsi::Methods(_create_f_ip_c0 ()) +
  gsi::Methods(_create_f_netmask_c0 ()) +
  gsi::Methods(_create_f_operator_excl__eq__c3380 ()) +
  gsi::Methods(_create_f_operator_eq__3380 ()) +
  gsi::Methods(_create_f_operator_eq__eq__c3380 ()) +
  gsi::Methods(_create_f_prefixLength_c0 ()) +
  gsi::Methods(_create_f_setBroadcast_2518 ()) +
  gsi::Methods(_create_f_setIp_2518 ()) +
  gsi::Methods(_create_f_setNetmask_2518 ()) +
  gsi::Methods(_create_f_setPrefixLength_767 ()),
  "@qt\n@brief Binding of QNetworkAddressEntry");

}

