
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQClipboard.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQClipboard_EventAdaptor.h"
#include "gsiDeclQClipboard_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QClipboard

//  get static meta object

static void _init_smo (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<const QMetaObject &> ();
}

static void _call_smo (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<const QMetaObject &> (QClipboard::staticMetaObject);
}

static qt_gsi::GenericStaticMethod *_create_smo ()
{
  return new qt_gsi::GenericStaticMethod ("staticMetaObject", "@brief Obtains the static MetaObject for this class.", &_init_smo, &_call_smo);
}

// void QClipboard::clear(QClipboard::Mode mode)


static void _init_f_clear_1934 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("mode", true, "QClipboard::Clipboard");
  decl->add_arg<const qt_gsi::Converter<QClipboard::Mode>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_clear_1934 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  tl::Heap heap;
  const qt_gsi::Converter<QClipboard::Mode>::target_type & arg1 = args ? args.read<const qt_gsi::Converter<QClipboard::Mode>::target_type & > () : (const qt_gsi::Converter<QClipboard::Mode>::target_type &)(qt_gsi::CppToQtReadAdaptor<QClipboard::Mode>(heap, QClipboard::Clipboard));
  ((QClipboard *)cls)->clear (qt_gsi::QtToCppAdaptor<QClipboard::Mode>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_clear_1934 ()
{
  return new qt_gsi::GenericMethod ("clear", "@brief Method void QClipboard::clear(QClipboard::Mode mode)\n", false, &_init_f_clear_1934, &_call_f_clear_1934);
}

// QImage QClipboard::image(QClipboard::Mode mode)


static void _init_f_image_c1934 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("mode", true, "QClipboard::Clipboard");
  decl->add_arg<const qt_gsi::Converter<QClipboard::Mode>::target_type & > (argspec_0);
  decl->set_return<QImage > ();
}

static void _call_f_image_c1934 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  tl::Heap heap;
  const qt_gsi::Converter<QClipboard::Mode>::target_type & arg1 = args ? args.read<const qt_gsi::Converter<QClipboard::Mode>::target_type & > () : (const qt_gsi::Converter<QClipboard::Mode>::target_type &)(qt_gsi::CppToQtReadAdaptor<QClipboard::Mode>(heap, QClipboard::Clipboard));
  ret.write<QImage > ((QImage)((QClipboard *)cls)->image (qt_gsi::QtToCppAdaptor<QClipboard::Mode>(arg1).cref()));
}

static qt_gsi::GenericMethod *_create_f_image_c1934 ()
{
  return new qt_gsi::GenericMethod ("image", "@brief Method QImage QClipboard::image(QClipboard::Mode mode)\n", true, &_init_f_image_c1934, &_call_f_image_c1934);
}

// const QMimeData *QClipboard::mimeData(QClipboard::Mode mode)


static void _init_f_mimeData_c1934 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("mode", true, "QClipboard::Clipboard");
  decl->add_arg<const qt_gsi::Converter<QClipboard::Mode>::target_type & > (argspec_0);
  decl->set_return<const QMimeData * > ();
}

static void _call_f_mimeData_c1934 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  tl::Heap heap;
  const qt_gsi::Converter<QClipboard::Mode>::target_type & arg1 = args ? args.read<const qt_gsi::Converter<QClipboard::Mode>::target_type & > () : (const qt_gsi::Converter<QClipboard::Mode>::target_type &)(qt_gsi::CppToQtReadAdaptor<QClipboard::Mode>(heap, QClipboard::Clipboard));
  ret.write<const QMimeData * > ((const QMimeData *)((QClipboard *)cls)->mimeData (qt_gsi::QtToCppAdaptor<QClipboard::Mode>(arg1).cref()));
}

static qt_gsi::GenericMethod *_create_f_mimeData_c1934 ()
{
  return new qt_gsi::GenericMethod ("mimeData", "@brief Method const QMimeData *QClipboard::mimeData(QClipboard::Mode mode)\n", true, &_init_f_mimeData_c1934, &_call_f_mimeData_c1934);
}

// bool QClipboard::ownsClipboard()


static void _init_f_ownsClipboard_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_ownsClipboard_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QClipboard *)cls)->ownsClipboard ());
}

static qt_gsi::GenericMethod *_create_f_ownsClipboard_c0 ()
{
  return new qt_gsi::GenericMethod ("ownsClipboard", "@brief Method bool QClipboard::ownsClipboard()\n", true, &_init_f_ownsClipboard_c0, &_call_f_ownsClipboard_c0);
}

// bool QClipboard::ownsFindBuffer()


static void _init_f_ownsFindBuffer_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_ownsFindBuffer_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QClipboard *)cls)->ownsFindBuffer ());
}

static qt_gsi::GenericMethod *_create_f_ownsFindBuffer_c0 ()
{
  return new qt_gsi::GenericMethod ("ownsFindBuffer", "@brief Method bool QClipboard::ownsFindBuffer()\n", true, &_init_f_ownsFindBuffer_c0, &_call_f_ownsFindBuffer_c0);
}

// bool QClipboard::ownsSelection()


static void _init_f_ownsSelection_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_ownsSelection_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QClipboard *)cls)->ownsSelection ());
}

static qt_gsi::GenericMethod *_create_f_ownsSelection_c0 ()
{
  return new qt_gsi::GenericMethod ("ownsSelection", "@brief Method bool QClipboard::ownsSelection()\n", true, &_init_f_ownsSelection_c0, &_call_f_ownsSelection_c0);
}

// QPixmap QClipboard::pixmap(QClipboard::Mode mode)


static void _init_f_pixmap_c1934 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("mode", true, "QClipboard::Clipboard");
  decl->add_arg<const qt_gsi::Converter<QClipboard::Mode>::target_type & > (argspec_0);
  decl->set_return<QPixmap > ();
}

static void _call_f_pixmap_c1934 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  tl::Heap heap;
  const qt_gsi::Converter<QClipboard::Mode>::target_type & arg1 = args ? args.read<const qt_gsi::Converter<QClipboard::Mode>::target_type & > () : (const qt_gsi::Converter<QClipboard::Mode>::target_type &)(qt_gsi::CppToQtReadAdaptor<QClipboard::Mode>(heap, QClipboard::Clipboard));
  ret.write<QPixmap > ((QPixmap)((QClipboard *)cls)->pixmap (qt_gsi::QtToCppAdaptor<QClipboard::Mode>(arg1).cref()));
}

static qt_gsi::GenericMethod *_create_f_pixmap_c1934 ()
{
  return new qt_gsi::GenericMethod ("pixmap", "@brief Method QPixmap QClipboard::pixmap(QClipboard::Mode mode)\n", true, &_init_f_pixmap_c1934, &_call_f_pixmap_c1934);
}

// void QClipboard::setImage(const QImage &, QClipboard::Mode mode)


static void _init_f_setImage_3703 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QImage & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("mode", true, "QClipboard::Clipboard");
  decl->add_arg<const qt_gsi::Converter<QClipboard::Mode>::target_type & > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_setImage_3703 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QImage &arg1 = args.read<const QImage & > ();
  tl::Heap heap;
  const qt_gsi::Converter<QClipboard::Mode>::target_type & arg2 = args ? args.read<const qt_gsi::Converter<QClipboard::Mode>::target_type & > () : (const qt_gsi::Converter<QClipboard::Mode>::target_type &)(qt_gsi::CppToQtReadAdaptor<QClipboard::Mode>(heap, QClipboard::Clipboard));
  ((QClipboard *)cls)->setImage (arg1, qt_gsi::QtToCppAdaptor<QClipboard::Mode>(arg2).cref());
}

static qt_gsi::GenericMethod *_create_f_setImage_3703 ()
{
  return new qt_gsi::GenericMethod ("setImage", "@brief Method void QClipboard::setImage(const QImage &, QClipboard::Mode mode)\n", false, &_init_f_setImage_3703, &_call_f_setImage_3703);
}

// void QClipboard::setMimeData(QMimeData *data, QClipboard::Mode mode)


static void _init_f_setMimeData_3299 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("data");
  decl->add_arg<QMimeData * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("mode", true, "QClipboard::Clipboard");
  decl->add_arg<const qt_gsi::Converter<QClipboard::Mode>::target_type & > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_setMimeData_3299 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QMimeData *arg1 = args.read<QMimeData * > ();
  tl::Heap heap;
  const qt_gsi::Converter<QClipboard::Mode>::target_type & arg2 = args ? args.read<const qt_gsi::Converter<QClipboard::Mode>::target_type & > () : (const qt_gsi::Converter<QClipboard::Mode>::target_type &)(qt_gsi::CppToQtReadAdaptor<QClipboard::Mode>(heap, QClipboard::Clipboard));
  ((QClipboard *)cls)->setMimeData (arg1, qt_gsi::QtToCppAdaptor<QClipboard::Mode>(arg2).cref());
}

static qt_gsi::GenericMethod *_create_f_setMimeData_3299 ()
{
  return new qt_gsi::GenericMethod ("setMimeData", "@brief Method void QClipboard::setMimeData(QMimeData *data, QClipboard::Mode mode)\n", false, &_init_f_setMimeData_3299, &_call_f_setMimeData_3299);
}

// void QClipboard::setPixmap(const QPixmap &, QClipboard::Mode mode)


static void _init_f_setPixmap_3843 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QPixmap & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("mode", true, "QClipboard::Clipboard");
  decl->add_arg<const qt_gsi::Converter<QClipboard::Mode>::target_type & > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_setPixmap_3843 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QPixmap &arg1 = args.read<const QPixmap & > ();
  tl::Heap heap;
  const qt_gsi::Converter<QClipboard::Mode>::target_type & arg2 = args ? args.read<const qt_gsi::Converter<QClipboard::Mode>::target_type & > () : (const qt_gsi::Converter<QClipboard::Mode>::target_type &)(qt_gsi::CppToQtReadAdaptor<QClipboard::Mode>(heap, QClipboard::Clipboard));
  ((QClipboard *)cls)->setPixmap (arg1, qt_gsi::QtToCppAdaptor<QClipboard::Mode>(arg2).cref());
}

static qt_gsi::GenericMethod *_create_f_setPixmap_3843 ()
{
  return new qt_gsi::GenericMethod ("setPixmap", "@brief Method void QClipboard::setPixmap(const QPixmap &, QClipboard::Mode mode)\n", false, &_init_f_setPixmap_3843, &_call_f_setPixmap_3843);
}

// void QClipboard::setText(const QString &, QClipboard::Mode mode)


static void _init_f_setText_3851 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("mode", true, "QClipboard::Clipboard");
  decl->add_arg<const qt_gsi::Converter<QClipboard::Mode>::target_type & > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_setText_3851 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  tl::Heap heap;
  const qt_gsi::Converter<QClipboard::Mode>::target_type & arg2 = args ? args.read<const qt_gsi::Converter<QClipboard::Mode>::target_type & > () : (const qt_gsi::Converter<QClipboard::Mode>::target_type &)(qt_gsi::CppToQtReadAdaptor<QClipboard::Mode>(heap, QClipboard::Clipboard));
  ((QClipboard *)cls)->setText (arg1, qt_gsi::QtToCppAdaptor<QClipboard::Mode>(arg2).cref());
}

static qt_gsi::GenericMethod *_create_f_setText_3851 ()
{
  return new qt_gsi::GenericMethod ("setText", "@brief Method void QClipboard::setText(const QString &, QClipboard::Mode mode)\n", false, &_init_f_setText_3851, &_call_f_setText_3851);
}

// bool QClipboard::supportsFindBuffer()


static void _init_f_supportsFindBuffer_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_supportsFindBuffer_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QClipboard *)cls)->supportsFindBuffer ());
}

static qt_gsi::GenericMethod *_create_f_supportsFindBuffer_c0 ()
{
  return new qt_gsi::GenericMethod ("supportsFindBuffer", "@brief Method bool QClipboard::supportsFindBuffer()\n", true, &_init_f_supportsFindBuffer_c0, &_call_f_supportsFindBuffer_c0);
}

// bool QClipboard::supportsSelection()


static void _init_f_supportsSelection_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_supportsSelection_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QClipboard *)cls)->supportsSelection ());
}

static qt_gsi::GenericMethod *_create_f_supportsSelection_c0 ()
{
  return new qt_gsi::GenericMethod ("supportsSelection", "@brief Method bool QClipboard::supportsSelection()\n", true, &_init_f_supportsSelection_c0, &_call_f_supportsSelection_c0);
}

// QString QClipboard::text(QClipboard::Mode mode)


static void _init_f_text_c1934 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("mode", true, "QClipboard::Clipboard");
  decl->add_arg<const qt_gsi::Converter<QClipboard::Mode>::target_type & > (argspec_0);
  decl->set_return<QString > ();
}

static void _call_f_text_c1934 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  tl::Heap heap;
  const qt_gsi::Converter<QClipboard::Mode>::target_type & arg1 = args ? args.read<const qt_gsi::Converter<QClipboard::Mode>::target_type & > () : (const qt_gsi::Converter<QClipboard::Mode>::target_type &)(qt_gsi::CppToQtReadAdaptor<QClipboard::Mode>(heap, QClipboard::Clipboard));
  ret.write<QString > ((QString)((QClipboard *)cls)->text (qt_gsi::QtToCppAdaptor<QClipboard::Mode>(arg1).cref()));
}

static qt_gsi::GenericMethod *_create_f_text_c1934 ()
{
  return new qt_gsi::GenericMethod ("text", "@brief Method QString QClipboard::text(QClipboard::Mode mode)\n", true, &_init_f_text_c1934, &_call_f_text_c1934);
}

// QString QClipboard::text(QString &subtype, QClipboard::Mode mode)


static void _init_f_text_c3156 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("subtype");
  decl->add_arg<QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("mode", true, "QClipboard::Clipboard");
  decl->add_arg<const qt_gsi::Converter<QClipboard::Mode>::target_type & > (argspec_1);
  decl->set_return<QString > ();
}

static void _call_f_text_c3156 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QString &arg1 = args.read<QString & > ();
  tl::Heap heap;
  const qt_gsi::Converter<QClipboard::Mode>::target_type & arg2 = args ? args.read<const qt_gsi::Converter<QClipboard::Mode>::target_type & > () : (const qt_gsi::Converter<QClipboard::Mode>::target_type &)(qt_gsi::CppToQtReadAdaptor<QClipboard::Mode>(heap, QClipboard::Clipboard));
  ret.write<QString > ((QString)((QClipboard *)cls)->text (arg1, qt_gsi::QtToCppAdaptor<QClipboard::Mode>(arg2).cref()));
}

static qt_gsi::GenericMethod *_create_f_text_c3156 ()
{
  return new qt_gsi::GenericMethod ("text", "@brief Method QString QClipboard::text(QString &subtype, QClipboard::Mode mode)\n", true, &_init_f_text_c3156, &_call_f_text_c3156);
}

// static QString QClipboard::tr(const char *s, const char *c)


static void _init_f_tr_3354 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c", true, "0");
  decl->add_arg<const char * > (argspec_1);
  decl->set_return<QString > ();
}

static void _call_f_tr_3354 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args ? args.read<const char * > () : (const char *)(0);
  ret.write<QString > ((QString)QClipboard::tr (arg1, arg2));
}

static qt_gsi::GenericStaticMethod *_create_f_tr_3354 ()
{
  return new qt_gsi::GenericStaticMethod ("tr", "@brief Static method QString QClipboard::tr(const char *s, const char *c)\nThis method is static and can be called without an instance.", &_init_f_tr_3354, &_call_f_tr_3354);
}

// static QString QClipboard::tr(const char *s, const char *c, int n)


static void _init_f_tr_4013 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c");
  decl->add_arg<const char * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("n");
  decl->add_arg<int > (argspec_2);
  decl->set_return<QString > ();
}

static void _call_f_tr_4013 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args.read<const char * > ();
  int arg3 = args.read<int > ();
  ret.write<QString > ((QString)QClipboard::tr (arg1, arg2, arg3));
}

static qt_gsi::GenericStaticMethod *_create_f_tr_4013 ()
{
  return new qt_gsi::GenericStaticMethod ("tr", "@brief Static method QString QClipboard::tr(const char *s, const char *c, int n)\nThis method is static and can be called without an instance.", &_init_f_tr_4013, &_call_f_tr_4013);
}

// static QString QClipboard::trUtf8(const char *s, const char *c)


static void _init_f_trUtf8_3354 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c", true, "0");
  decl->add_arg<const char * > (argspec_1);
  decl->set_return<QString > ();
}

static void _call_f_trUtf8_3354 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args ? args.read<const char * > () : (const char *)(0);
  ret.write<QString > ((QString)QClipboard::trUtf8 (arg1, arg2));
}

static qt_gsi::GenericStaticMethod *_create_f_trUtf8_3354 ()
{
  return new qt_gsi::GenericStaticMethod ("trUtf8", "@brief Static method QString QClipboard::trUtf8(const char *s, const char *c)\nThis method is static and can be called without an instance.", &_init_f_trUtf8_3354, &_call_f_trUtf8_3354);
}

// static QString QClipboard::trUtf8(const char *s, const char *c, int n)


static void _init_f_trUtf8_4013 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c");
  decl->add_arg<const char * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("n");
  decl->add_arg<int > (argspec_2);
  decl->set_return<QString > ();
}

static void _call_f_trUtf8_4013 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args.read<const char * > ();
  int arg3 = args.read<int > ();
  ret.write<QString > ((QString)QClipboard::trUtf8 (arg1, arg2, arg3));
}

static qt_gsi::GenericStaticMethod *_create_f_trUtf8_4013 ()
{
  return new qt_gsi::GenericStaticMethod ("trUtf8", "@brief Static method QString QClipboard::trUtf8(const char *s, const char *c, int n)\nThis method is static and can be called without an instance.", &_init_f_trUtf8_4013, &_call_f_trUtf8_4013);
}

static qt_gsi::QObjectConnector<QClipboard, QClipboard_EventAdaptor> ea_QClipboard;


namespace gsi
{
extern gsi::Class<QObject> decl_QObject;

gsi::Class<QClipboard> decl_QClipboard (ea_QClipboard, decl_QObject, "QClipboard",
  gsi::Methods(_create_smo ()) +
  gsi::Methods(_create_f_clear_1934 ()) +
  gsi::Methods(_create_f_image_c1934 ()) +
  gsi::Methods(_create_f_mimeData_c1934 ()) +
  gsi::Methods(_create_f_ownsClipboard_c0 ()) +
  gsi::Methods(_create_f_ownsFindBuffer_c0 ()) +
  gsi::Methods(_create_f_ownsSelection_c0 ()) +
  gsi::Methods(_create_f_pixmap_c1934 ()) +
  gsi::Methods(_create_f_setImage_3703 ()) +
  gsi::Methods(_create_f_setMimeData_3299 ()) +
  gsi::Methods(_create_f_setPixmap_3843 ()) +
  gsi::Methods(_create_f_setText_3851 ()) +
  gsi::Methods(_create_f_supportsFindBuffer_c0 ()) +
  gsi::Methods(_create_f_supportsSelection_c0 ()) +
  gsi::Methods(_create_f_text_c1934 ()) +
  gsi::Methods(_create_f_text_c3156 ()) +
  qt_gsi::qt_signal<QClipboard, QClipboard_EventAdaptor, const qt_gsi::Converter<QClipboard::Mode>::target_type &> ("changed", &QClipboard_EventAdaptor::changed_e_1934, gsi::arg("mode"), "@brief Signal declaration for QClipboard::changed(QClipboard::Mode mode)\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QClipboard, QClipboard_EventAdaptor> ("dataChanged", &QClipboard_EventAdaptor::dataChanged_e_0, "@brief Signal declaration for QClipboard::dataChanged()\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QClipboard, QClipboard_EventAdaptor, QObject *> ("destroyed", &QClipboard_EventAdaptor::destroyed_e_1302, gsi::arg("arg1"), "@brief Signal declaration for QClipboard::destroyed(QObject *)\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QClipboard, QClipboard_EventAdaptor> ("findBufferChanged", &QClipboard_EventAdaptor::findBufferChanged_e_0, "@brief Signal declaration for QClipboard::findBufferChanged()\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QClipboard, QClipboard_EventAdaptor> ("selectionChanged", &QClipboard_EventAdaptor::selectionChanged_e_0, "@brief Signal declaration for QClipboard::selectionChanged()\nYou can bind a procedure to this signal.") +
  gsi::Methods(_create_f_tr_3354 ()) +
  gsi::Methods(_create_f_tr_4013 ()) +
  gsi::Methods(_create_f_trUtf8_3354 ()) +
  gsi::Methods(_create_f_trUtf8_4013 ()),
  "@qt\n@brief Binding of QClipboard");

}


//  Implementation of the enum wrapper class for QClipboard::Mode
namespace qt_gsi
{

static QClipboard_Mode_Enum *c_1_QClipboard_Mode_Enum () { return new QClipboard_Mode_Enum (QClipboard::Clipboard); }
static QClipboard_Mode_Enum *c_2_QClipboard_Mode_Enum () { return new QClipboard_Mode_Enum (QClipboard::Selection); }
static QClipboard_Mode_Enum *c_3_QClipboard_Mode_Enum () { return new QClipboard_Mode_Enum (QClipboard::FindBuffer); }
static QClipboard_Mode_Enum *c_4_QClipboard_Mode_Enum () { return new QClipboard_Mode_Enum (QClipboard::LastMode); }

static gsi::Methods mkdefs_QClipboard_Mode () {
  return
    gsi::constant ("Clipboard", &qt_gsi::c_1_QClipboard_Mode_Enum, "@brief Enum constant QClipboard::Clipboard") +
    gsi::constant ("Selection", &qt_gsi::c_2_QClipboard_Mode_Enum, "@brief Enum constant QClipboard::Selection") +
    gsi::constant ("FindBuffer", &qt_gsi::c_3_QClipboard_Mode_Enum, "@brief Enum constant QClipboard::FindBuffer") +
    gsi::constant ("LastMode", &qt_gsi::c_4_QClipboard_Mode_Enum, "@brief Enum constant QClipboard::LastMode");
}

static std::string to_s_QClipboard_Mode_Enum (const QClipboard_Mode_Enum *e)
{
  if (e->value () == QClipboard::Clipboard) { return tl::sprintf ("Clipboard (%u)", (unsigned int) e->value ()); }
  if (e->value () == QClipboard::Selection) { return tl::sprintf ("Selection (%u)", (unsigned int) e->value ()); }
  if (e->value () == QClipboard::FindBuffer) { return tl::sprintf ("FindBuffer (%u)", (unsigned int) e->value ()); }
  if (e->value () == QClipboard::LastMode) { return tl::sprintf ("LastMode (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QClipboard_Mode_Enum (const QClipboard_Mode_Enum *e)
{
  return (unsigned int) e->value ();
}

static QClipboard_Mode_Enum *from_i_QClipboard_Mode_Enum (unsigned int i)
{
  return new QClipboard_Mode_Enum ((QClipboard::Mode) i);
}

static bool equalQClipboard_Mode_Enum (const QClipboard_Mode_Enum *e, QClipboard_Mode_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QClipboard_Mode_Enum (const QClipboard_Mode_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QClipboard_Mode_Enums oropQClipboard_Mode_Enums (const QClipboard_Mode_Enums *e, const QClipboard_Mode_Enums &d)
{
  return e->flags () | d.flags ();
}

static QClipboard_Mode_Enums andopQClipboard_Mode_Enums (const QClipboard_Mode_Enums *e, const QClipboard_Mode_Enums &d)
{
  return e->flags () & d.flags ();
}

static QClipboard_Mode_Enums xoropQClipboard_Mode_Enums (const QClipboard_Mode_Enums *e, const QClipboard_Mode_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QClipboard_Mode_Enums (const QClipboard_Mode_Enums *e)
{
  std::string l;
  if (e->testFlag (QClipboard::Clipboard)) { if (!l.empty ()) l += "|"; l += "Clipboard"; }
  if (e->testFlag (QClipboard::Selection)) { if (!l.empty ()) l += "|"; l += "Selection"; }
  if (e->testFlag (QClipboard::FindBuffer)) { if (!l.empty ()) l += "|"; l += "FindBuffer"; }
  if (e->testFlag (QClipboard::LastMode)) { if (!l.empty ()) l += "|"; l += "LastMode"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QClipboard_Mode_Enums (const QClipboard_Mode_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QClipboard_Mode_Enums (const QClipboard_Mode_Enums *e, const QClipboard_Mode_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QClipboard_Mode_Enums> decl_QClipboard_Mode_Enums ("QClipboard_QFlags_Mode",
  gsi::method_ext ("|", &qt_gsi::oropQClipboard_Mode_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQClipboard_Mode_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQClipboard_Mode_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QClipboard_Mode_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QClipboard_Mode_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QClipboard_Mode_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QClipboard::Mode> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QClipboard_Mode_Enum> decl_QClipboard_Mode_Enum (decl_QClipboard_Mode_Enums, "QClipboard_Mode",
  qt_gsi::mkdefs_QClipboard_Mode () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QClipboard_Mode_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QClipboard_Mode_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQClipboard_Mode_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QClipboard_Mode_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QClipboard_Mode_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QClipboard::Mode enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QClipboard> inject_QClipboard_Mode_Enum_in_parent (qt_gsi::mkdefs_QClipboard_Mode ());
static gsi::ClassExt<QClipboard> decl_QClipboard_Mode_Enum_as_child (decl_QClipboard_Mode_Enum, "Mode");

}

