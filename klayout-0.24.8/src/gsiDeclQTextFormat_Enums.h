
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQTextFormat_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQTextFormat_Enums
#define _HDR_gsiDeclQTextFormat_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QTextFormat::PageBreakFlag>
class QTextFormat_PageBreakFlag_Enums : public QFlags<enum QTextFormat::PageBreakFlag> {
public:
  QTextFormat_PageBreakFlag_Enums () : m_flags () { }
  QTextFormat_PageBreakFlag_Enums (enum QTextFormat::PageBreakFlag v) : m_flags (v) { }
  QTextFormat_PageBreakFlag_Enums (const QFlags<enum QTextFormat::PageBreakFlag> &v) : m_flags (v) { }
  QFlags<enum QTextFormat::PageBreakFlag> flags () const { return m_flags; }
private:
  QFlags<QTextFormat::PageBreakFlag> m_flags;
};

//  Wrapper class for enum QTextFormat::PageBreakFlag
class QTextFormat_PageBreakFlag_Enum : public QTextFormat_PageBreakFlag_Enums {
public:
  QTextFormat_PageBreakFlag_Enum () { }
  QTextFormat_PageBreakFlag_Enum (enum QTextFormat::PageBreakFlag v) : QTextFormat_PageBreakFlag_Enums (v) { }
  enum QTextFormat::PageBreakFlag value () const { return (enum QTextFormat::PageBreakFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum QTextFormat::PageBreakFlag>
template <>
struct Converter<QFlags<enum QTextFormat::PageBreakFlag> >
{
public:
  typedef QFlags<enum QTextFormat::PageBreakFlag> source_type;
  typedef QTextFormat_PageBreakFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QTextFormat::PageBreakFlag
template <>
struct Converter<enum QTextFormat::PageBreakFlag>
{
public:
  typedef enum QTextFormat::PageBreakFlag source_type;
  typedef QTextFormat_PageBreakFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::LayoutDirection>
class Qt_LayoutDirection_Enums : public QFlags<enum Qt::LayoutDirection> {
public:
  Qt_LayoutDirection_Enums () : m_flags () { }
  Qt_LayoutDirection_Enums (enum Qt::LayoutDirection v) : m_flags (v) { }
  Qt_LayoutDirection_Enums (const QFlags<enum Qt::LayoutDirection> &v) : m_flags (v) { }
  QFlags<enum Qt::LayoutDirection> flags () const { return m_flags; }
private:
  QFlags<Qt::LayoutDirection> m_flags;
};

//  Wrapper class for enum Qt::LayoutDirection
class Qt_LayoutDirection_Enum : public Qt_LayoutDirection_Enums {
public:
  Qt_LayoutDirection_Enum () { }
  Qt_LayoutDirection_Enum (enum Qt::LayoutDirection v) : Qt_LayoutDirection_Enums (v) { }
  enum Qt::LayoutDirection value () const { return (enum Qt::LayoutDirection) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::LayoutDirection>
template <>
struct Converter<QFlags<enum Qt::LayoutDirection> >
{
public:
  typedef QFlags<enum Qt::LayoutDirection> source_type;
  typedef Qt_LayoutDirection_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::LayoutDirection
template <>
struct Converter<enum Qt::LayoutDirection>
{
public:
  typedef enum Qt::LayoutDirection source_type;
  typedef Qt_LayoutDirection_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
