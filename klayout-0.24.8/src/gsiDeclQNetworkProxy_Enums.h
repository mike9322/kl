
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQNetworkProxy_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQNetworkProxy_Enums
#define _HDR_gsiDeclQNetworkProxy_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QNetworkProxy::Capability>
class QNetworkProxy_Capability_Enums : public QFlags<enum QNetworkProxy::Capability> {
public:
  QNetworkProxy_Capability_Enums () : m_flags () { }
  QNetworkProxy_Capability_Enums (enum QNetworkProxy::Capability v) : m_flags (v) { }
  QNetworkProxy_Capability_Enums (const QFlags<enum QNetworkProxy::Capability> &v) : m_flags (v) { }
  QFlags<enum QNetworkProxy::Capability> flags () const { return m_flags; }
private:
  QFlags<QNetworkProxy::Capability> m_flags;
};

//  Wrapper class for enum QNetworkProxy::Capability
class QNetworkProxy_Capability_Enum : public QNetworkProxy_Capability_Enums {
public:
  QNetworkProxy_Capability_Enum () { }
  QNetworkProxy_Capability_Enum (enum QNetworkProxy::Capability v) : QNetworkProxy_Capability_Enums (v) { }
  enum QNetworkProxy::Capability value () const { return (enum QNetworkProxy::Capability) flags ().operator int (); }
};

//  Converter for QFlags<enum QNetworkProxy::Capability>
template <>
struct Converter<QFlags<enum QNetworkProxy::Capability> >
{
public:
  typedef QFlags<enum QNetworkProxy::Capability> source_type;
  typedef QNetworkProxy_Capability_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QNetworkProxy::Capability
template <>
struct Converter<enum QNetworkProxy::Capability>
{
public:
  typedef enum QNetworkProxy::Capability source_type;
  typedef QNetworkProxy_Capability_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QNetworkProxy::ProxyType>
class QNetworkProxy_ProxyType_Enums : public QFlags<enum QNetworkProxy::ProxyType> {
public:
  QNetworkProxy_ProxyType_Enums () : m_flags () { }
  QNetworkProxy_ProxyType_Enums (enum QNetworkProxy::ProxyType v) : m_flags (v) { }
  QNetworkProxy_ProxyType_Enums (const QFlags<enum QNetworkProxy::ProxyType> &v) : m_flags (v) { }
  QFlags<enum QNetworkProxy::ProxyType> flags () const { return m_flags; }
private:
  QFlags<QNetworkProxy::ProxyType> m_flags;
};

//  Wrapper class for enum QNetworkProxy::ProxyType
class QNetworkProxy_ProxyType_Enum : public QNetworkProxy_ProxyType_Enums {
public:
  QNetworkProxy_ProxyType_Enum () { }
  QNetworkProxy_ProxyType_Enum (enum QNetworkProxy::ProxyType v) : QNetworkProxy_ProxyType_Enums (v) { }
  enum QNetworkProxy::ProxyType value () const { return (enum QNetworkProxy::ProxyType) flags ().operator int (); }
};

//  Converter for QFlags<enum QNetworkProxy::ProxyType>
template <>
struct Converter<QFlags<enum QNetworkProxy::ProxyType> >
{
public:
  typedef QFlags<enum QNetworkProxy::ProxyType> source_type;
  typedef QNetworkProxy_ProxyType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QNetworkProxy::ProxyType
template <>
struct Converter<enum QNetworkProxy::ProxyType>
{
public:
  typedef enum QNetworkProxy::ProxyType source_type;
  typedef QNetworkProxy_ProxyType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
