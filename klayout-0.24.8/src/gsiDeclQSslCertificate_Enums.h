
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQSslCertificate_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQSslCertificate_Enums
#define _HDR_gsiDeclQSslCertificate_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QCryptographicHash::Algorithm>
class QCryptographicHash_Algorithm_Enums : public QFlags<enum QCryptographicHash::Algorithm> {
public:
  QCryptographicHash_Algorithm_Enums () : m_flags () { }
  QCryptographicHash_Algorithm_Enums (enum QCryptographicHash::Algorithm v) : m_flags (v) { }
  QCryptographicHash_Algorithm_Enums (const QFlags<enum QCryptographicHash::Algorithm> &v) : m_flags (v) { }
  QFlags<enum QCryptographicHash::Algorithm> flags () const { return m_flags; }
private:
  QFlags<QCryptographicHash::Algorithm> m_flags;
};

//  Wrapper class for enum QCryptographicHash::Algorithm
class QCryptographicHash_Algorithm_Enum : public QCryptographicHash_Algorithm_Enums {
public:
  QCryptographicHash_Algorithm_Enum () { }
  QCryptographicHash_Algorithm_Enum (enum QCryptographicHash::Algorithm v) : QCryptographicHash_Algorithm_Enums (v) { }
  enum QCryptographicHash::Algorithm value () const { return (enum QCryptographicHash::Algorithm) flags ().operator int (); }
};

//  Converter for QFlags<enum QCryptographicHash::Algorithm>
template <>
struct Converter<QFlags<enum QCryptographicHash::Algorithm> >
{
public:
  typedef QFlags<enum QCryptographicHash::Algorithm> source_type;
  typedef QCryptographicHash_Algorithm_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QCryptographicHash::Algorithm
template <>
struct Converter<enum QCryptographicHash::Algorithm>
{
public:
  typedef enum QCryptographicHash::Algorithm source_type;
  typedef QCryptographicHash_Algorithm_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QRegExp::PatternSyntax>
class QRegExp_PatternSyntax_Enums : public QFlags<enum QRegExp::PatternSyntax> {
public:
  QRegExp_PatternSyntax_Enums () : m_flags () { }
  QRegExp_PatternSyntax_Enums (enum QRegExp::PatternSyntax v) : m_flags (v) { }
  QRegExp_PatternSyntax_Enums (const QFlags<enum QRegExp::PatternSyntax> &v) : m_flags (v) { }
  QFlags<enum QRegExp::PatternSyntax> flags () const { return m_flags; }
private:
  QFlags<QRegExp::PatternSyntax> m_flags;
};

//  Wrapper class for enum QRegExp::PatternSyntax
class QRegExp_PatternSyntax_Enum : public QRegExp_PatternSyntax_Enums {
public:
  QRegExp_PatternSyntax_Enum () { }
  QRegExp_PatternSyntax_Enum (enum QRegExp::PatternSyntax v) : QRegExp_PatternSyntax_Enums (v) { }
  enum QRegExp::PatternSyntax value () const { return (enum QRegExp::PatternSyntax) flags ().operator int (); }
};

//  Converter for QFlags<enum QRegExp::PatternSyntax>
template <>
struct Converter<QFlags<enum QRegExp::PatternSyntax> >
{
public:
  typedef QFlags<enum QRegExp::PatternSyntax> source_type;
  typedef QRegExp_PatternSyntax_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QRegExp::PatternSyntax
template <>
struct Converter<enum QRegExp::PatternSyntax>
{
public:
  typedef enum QRegExp::PatternSyntax source_type;
  typedef QRegExp_PatternSyntax_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSsl::EncodingFormat>
class QSsl_EncodingFormat_Enums : public QFlags<enum QSsl::EncodingFormat> {
public:
  QSsl_EncodingFormat_Enums () : m_flags () { }
  QSsl_EncodingFormat_Enums (enum QSsl::EncodingFormat v) : m_flags (v) { }
  QSsl_EncodingFormat_Enums (const QFlags<enum QSsl::EncodingFormat> &v) : m_flags (v) { }
  QFlags<enum QSsl::EncodingFormat> flags () const { return m_flags; }
private:
  QFlags<QSsl::EncodingFormat> m_flags;
};

//  Wrapper class for enum QSsl::EncodingFormat
class QSsl_EncodingFormat_Enum : public QSsl_EncodingFormat_Enums {
public:
  QSsl_EncodingFormat_Enum () { }
  QSsl_EncodingFormat_Enum (enum QSsl::EncodingFormat v) : QSsl_EncodingFormat_Enums (v) { }
  enum QSsl::EncodingFormat value () const { return (enum QSsl::EncodingFormat) flags ().operator int (); }
};

//  Converter for QFlags<enum QSsl::EncodingFormat>
template <>
struct Converter<QFlags<enum QSsl::EncodingFormat> >
{
public:
  typedef QFlags<enum QSsl::EncodingFormat> source_type;
  typedef QSsl_EncodingFormat_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSsl::EncodingFormat
template <>
struct Converter<enum QSsl::EncodingFormat>
{
public:
  typedef enum QSsl::EncodingFormat source_type;
  typedef QSsl_EncodingFormat_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSslCertificate::SubjectInfo>
class QSslCertificate_SubjectInfo_Enums : public QFlags<enum QSslCertificate::SubjectInfo> {
public:
  QSslCertificate_SubjectInfo_Enums () : m_flags () { }
  QSslCertificate_SubjectInfo_Enums (enum QSslCertificate::SubjectInfo v) : m_flags (v) { }
  QSslCertificate_SubjectInfo_Enums (const QFlags<enum QSslCertificate::SubjectInfo> &v) : m_flags (v) { }
  QFlags<enum QSslCertificate::SubjectInfo> flags () const { return m_flags; }
private:
  QFlags<QSslCertificate::SubjectInfo> m_flags;
};

//  Wrapper class for enum QSslCertificate::SubjectInfo
class QSslCertificate_SubjectInfo_Enum : public QSslCertificate_SubjectInfo_Enums {
public:
  QSslCertificate_SubjectInfo_Enum () { }
  QSslCertificate_SubjectInfo_Enum (enum QSslCertificate::SubjectInfo v) : QSslCertificate_SubjectInfo_Enums (v) { }
  enum QSslCertificate::SubjectInfo value () const { return (enum QSslCertificate::SubjectInfo) flags ().operator int (); }
};

//  Converter for QFlags<enum QSslCertificate::SubjectInfo>
template <>
struct Converter<QFlags<enum QSslCertificate::SubjectInfo> >
{
public:
  typedef QFlags<enum QSslCertificate::SubjectInfo> source_type;
  typedef QSslCertificate_SubjectInfo_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSslCertificate::SubjectInfo
template <>
struct Converter<enum QSslCertificate::SubjectInfo>
{
public:
  typedef enum QSslCertificate::SubjectInfo source_type;
  typedef QSslCertificate_SubjectInfo_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
