
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQIcon_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQIcon_Enums
#define _HDR_gsiDeclQIcon_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QIcon::Mode>
class QIcon_Mode_Enums : public QFlags<enum QIcon::Mode> {
public:
  QIcon_Mode_Enums () : m_flags () { }
  QIcon_Mode_Enums (enum QIcon::Mode v) : m_flags (v) { }
  QIcon_Mode_Enums (const QFlags<enum QIcon::Mode> &v) : m_flags (v) { }
  QFlags<enum QIcon::Mode> flags () const { return m_flags; }
private:
  QFlags<QIcon::Mode> m_flags;
};

//  Wrapper class for enum QIcon::Mode
class QIcon_Mode_Enum : public QIcon_Mode_Enums {
public:
  QIcon_Mode_Enum () { }
  QIcon_Mode_Enum (enum QIcon::Mode v) : QIcon_Mode_Enums (v) { }
  enum QIcon::Mode value () const { return (enum QIcon::Mode) flags ().operator int (); }
};

//  Converter for QFlags<enum QIcon::Mode>
template <>
struct Converter<QFlags<enum QIcon::Mode> >
{
public:
  typedef QFlags<enum QIcon::Mode> source_type;
  typedef QIcon_Mode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QIcon::Mode
template <>
struct Converter<enum QIcon::Mode>
{
public:
  typedef enum QIcon::Mode source_type;
  typedef QIcon_Mode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QIcon::State>
class QIcon_State_Enums : public QFlags<enum QIcon::State> {
public:
  QIcon_State_Enums () : m_flags () { }
  QIcon_State_Enums (enum QIcon::State v) : m_flags (v) { }
  QIcon_State_Enums (const QFlags<enum QIcon::State> &v) : m_flags (v) { }
  QFlags<enum QIcon::State> flags () const { return m_flags; }
private:
  QFlags<QIcon::State> m_flags;
};

//  Wrapper class for enum QIcon::State
class QIcon_State_Enum : public QIcon_State_Enums {
public:
  QIcon_State_Enum () { }
  QIcon_State_Enum (enum QIcon::State v) : QIcon_State_Enums (v) { }
  enum QIcon::State value () const { return (enum QIcon::State) flags ().operator int (); }
};

//  Converter for QFlags<enum QIcon::State>
template <>
struct Converter<QFlags<enum QIcon::State> >
{
public:
  typedef QFlags<enum QIcon::State> source_type;
  typedef QIcon_State_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QIcon::State
template <>
struct Converter<enum QIcon::State>
{
public:
  typedef enum QIcon::State source_type;
  typedef QIcon_State_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::AlignmentFlag>
class Qt_AlignmentFlag_Enums : public QFlags<enum Qt::AlignmentFlag> {
public:
  Qt_AlignmentFlag_Enums () : m_flags () { }
  Qt_AlignmentFlag_Enums (enum Qt::AlignmentFlag v) : m_flags (v) { }
  Qt_AlignmentFlag_Enums (const QFlags<enum Qt::AlignmentFlag> &v) : m_flags (v) { }
  QFlags<enum Qt::AlignmentFlag> flags () const { return m_flags; }
private:
  QFlags<Qt::AlignmentFlag> m_flags;
};

//  Wrapper class for enum Qt::AlignmentFlag
class Qt_AlignmentFlag_Enum : public Qt_AlignmentFlag_Enums {
public:
  Qt_AlignmentFlag_Enum () { }
  Qt_AlignmentFlag_Enum (enum Qt::AlignmentFlag v) : Qt_AlignmentFlag_Enums (v) { }
  enum Qt::AlignmentFlag value () const { return (enum Qt::AlignmentFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::AlignmentFlag>
template <>
struct Converter<QFlags<enum Qt::AlignmentFlag> >
{
public:
  typedef QFlags<enum Qt::AlignmentFlag> source_type;
  typedef Qt_AlignmentFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::AlignmentFlag
template <>
struct Converter<enum Qt::AlignmentFlag>
{
public:
  typedef enum Qt::AlignmentFlag source_type;
  typedef Qt_AlignmentFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
