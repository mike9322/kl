
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQPaintEngine_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQPaintEngine_Enums
#define _HDR_gsiDeclQPaintEngine_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QPaintEngine::DirtyFlag>
class QPaintEngine_DirtyFlag_Enums : public QFlags<enum QPaintEngine::DirtyFlag> {
public:
  QPaintEngine_DirtyFlag_Enums () : m_flags () { }
  QPaintEngine_DirtyFlag_Enums (enum QPaintEngine::DirtyFlag v) : m_flags (v) { }
  QPaintEngine_DirtyFlag_Enums (const QFlags<enum QPaintEngine::DirtyFlag> &v) : m_flags (v) { }
  QFlags<enum QPaintEngine::DirtyFlag> flags () const { return m_flags; }
private:
  QFlags<QPaintEngine::DirtyFlag> m_flags;
};

//  Wrapper class for enum QPaintEngine::DirtyFlag
class QPaintEngine_DirtyFlag_Enum : public QPaintEngine_DirtyFlag_Enums {
public:
  QPaintEngine_DirtyFlag_Enum () { }
  QPaintEngine_DirtyFlag_Enum (enum QPaintEngine::DirtyFlag v) : QPaintEngine_DirtyFlag_Enums (v) { }
  enum QPaintEngine::DirtyFlag value () const { return (enum QPaintEngine::DirtyFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum QPaintEngine::DirtyFlag>
template <>
struct Converter<QFlags<enum QPaintEngine::DirtyFlag> >
{
public:
  typedef QFlags<enum QPaintEngine::DirtyFlag> source_type;
  typedef QPaintEngine_DirtyFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QPaintEngine::DirtyFlag
template <>
struct Converter<enum QPaintEngine::DirtyFlag>
{
public:
  typedef enum QPaintEngine::DirtyFlag source_type;
  typedef QPaintEngine_DirtyFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QPaintEngine::PaintEngineFeature>
class QPaintEngine_PaintEngineFeature_Enums : public QFlags<enum QPaintEngine::PaintEngineFeature> {
public:
  QPaintEngine_PaintEngineFeature_Enums () : m_flags () { }
  QPaintEngine_PaintEngineFeature_Enums (enum QPaintEngine::PaintEngineFeature v) : m_flags (v) { }
  QPaintEngine_PaintEngineFeature_Enums (const QFlags<enum QPaintEngine::PaintEngineFeature> &v) : m_flags (v) { }
  QFlags<enum QPaintEngine::PaintEngineFeature> flags () const { return m_flags; }
private:
  QFlags<QPaintEngine::PaintEngineFeature> m_flags;
};

//  Wrapper class for enum QPaintEngine::PaintEngineFeature
class QPaintEngine_PaintEngineFeature_Enum : public QPaintEngine_PaintEngineFeature_Enums {
public:
  QPaintEngine_PaintEngineFeature_Enum () { }
  QPaintEngine_PaintEngineFeature_Enum (enum QPaintEngine::PaintEngineFeature v) : QPaintEngine_PaintEngineFeature_Enums (v) { }
  enum QPaintEngine::PaintEngineFeature value () const { return (enum QPaintEngine::PaintEngineFeature) flags ().operator int (); }
};

//  Converter for QFlags<enum QPaintEngine::PaintEngineFeature>
template <>
struct Converter<QFlags<enum QPaintEngine::PaintEngineFeature> >
{
public:
  typedef QFlags<enum QPaintEngine::PaintEngineFeature> source_type;
  typedef QPaintEngine_PaintEngineFeature_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QPaintEngine::PaintEngineFeature
template <>
struct Converter<enum QPaintEngine::PaintEngineFeature>
{
public:
  typedef enum QPaintEngine::PaintEngineFeature source_type;
  typedef QPaintEngine_PaintEngineFeature_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QPaintEngine::Type>
class QPaintEngine_Type_Enums : public QFlags<enum QPaintEngine::Type> {
public:
  QPaintEngine_Type_Enums () : m_flags () { }
  QPaintEngine_Type_Enums (enum QPaintEngine::Type v) : m_flags (v) { }
  QPaintEngine_Type_Enums (const QFlags<enum QPaintEngine::Type> &v) : m_flags (v) { }
  QFlags<enum QPaintEngine::Type> flags () const { return m_flags; }
private:
  QFlags<QPaintEngine::Type> m_flags;
};

//  Wrapper class for enum QPaintEngine::Type
class QPaintEngine_Type_Enum : public QPaintEngine_Type_Enums {
public:
  QPaintEngine_Type_Enum () { }
  QPaintEngine_Type_Enum (enum QPaintEngine::Type v) : QPaintEngine_Type_Enums (v) { }
  enum QPaintEngine::Type value () const { return (enum QPaintEngine::Type) flags ().operator int (); }
};

//  Converter for QFlags<enum QPaintEngine::Type>
template <>
struct Converter<QFlags<enum QPaintEngine::Type> >
{
public:
  typedef QFlags<enum QPaintEngine::Type> source_type;
  typedef QPaintEngine_Type_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QPaintEngine::Type
template <>
struct Converter<enum QPaintEngine::Type>
{
public:
  typedef enum QPaintEngine::Type source_type;
  typedef QPaintEngine_Type_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ImageConversionFlag>
class Qt_ImageConversionFlag_Enums : public QFlags<enum Qt::ImageConversionFlag> {
public:
  Qt_ImageConversionFlag_Enums () : m_flags () { }
  Qt_ImageConversionFlag_Enums (enum Qt::ImageConversionFlag v) : m_flags (v) { }
  Qt_ImageConversionFlag_Enums (const QFlags<enum Qt::ImageConversionFlag> &v) : m_flags (v) { }
  QFlags<enum Qt::ImageConversionFlag> flags () const { return m_flags; }
private:
  QFlags<Qt::ImageConversionFlag> m_flags;
};

//  Wrapper class for enum Qt::ImageConversionFlag
class Qt_ImageConversionFlag_Enum : public Qt_ImageConversionFlag_Enums {
public:
  Qt_ImageConversionFlag_Enum () { }
  Qt_ImageConversionFlag_Enum (enum Qt::ImageConversionFlag v) : Qt_ImageConversionFlag_Enums (v) { }
  enum Qt::ImageConversionFlag value () const { return (enum Qt::ImageConversionFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ImageConversionFlag>
template <>
struct Converter<QFlags<enum Qt::ImageConversionFlag> >
{
public:
  typedef QFlags<enum Qt::ImageConversionFlag> source_type;
  typedef Qt_ImageConversionFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ImageConversionFlag
template <>
struct Converter<enum Qt::ImageConversionFlag>
{
public:
  typedef enum Qt::ImageConversionFlag source_type;
  typedef Qt_ImageConversionFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
