
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQStringListModel_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQStringListModel_Enums
#define _HDR_gsiDeclQStringListModel_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum Qt::ConnectionType>
class Qt_ConnectionType_Enums : public QFlags<enum Qt::ConnectionType> {
public:
  Qt_ConnectionType_Enums () : m_flags () { }
  Qt_ConnectionType_Enums (enum Qt::ConnectionType v) : m_flags (v) { }
  Qt_ConnectionType_Enums (const QFlags<enum Qt::ConnectionType> &v) : m_flags (v) { }
  QFlags<enum Qt::ConnectionType> flags () const { return m_flags; }
private:
  QFlags<Qt::ConnectionType> m_flags;
};

//  Wrapper class for enum Qt::ConnectionType
class Qt_ConnectionType_Enum : public Qt_ConnectionType_Enums {
public:
  Qt_ConnectionType_Enum () { }
  Qt_ConnectionType_Enum (enum Qt::ConnectionType v) : Qt_ConnectionType_Enums (v) { }
  enum Qt::ConnectionType value () const { return (enum Qt::ConnectionType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ConnectionType>
template <>
struct Converter<QFlags<enum Qt::ConnectionType> >
{
public:
  typedef QFlags<enum Qt::ConnectionType> source_type;
  typedef Qt_ConnectionType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ConnectionType
template <>
struct Converter<enum Qt::ConnectionType>
{
public:
  typedef enum Qt::ConnectionType source_type;
  typedef Qt_ConnectionType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::DropAction>
class Qt_DropAction_Enums : public QFlags<enum Qt::DropAction> {
public:
  Qt_DropAction_Enums () : m_flags () { }
  Qt_DropAction_Enums (enum Qt::DropAction v) : m_flags (v) { }
  Qt_DropAction_Enums (const QFlags<enum Qt::DropAction> &v) : m_flags (v) { }
  QFlags<enum Qt::DropAction> flags () const { return m_flags; }
private:
  QFlags<Qt::DropAction> m_flags;
};

//  Wrapper class for enum Qt::DropAction
class Qt_DropAction_Enum : public Qt_DropAction_Enums {
public:
  Qt_DropAction_Enum () { }
  Qt_DropAction_Enum (enum Qt::DropAction v) : Qt_DropAction_Enums (v) { }
  enum Qt::DropAction value () const { return (enum Qt::DropAction) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::DropAction>
template <>
struct Converter<QFlags<enum Qt::DropAction> >
{
public:
  typedef QFlags<enum Qt::DropAction> source_type;
  typedef Qt_DropAction_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::DropAction
template <>
struct Converter<enum Qt::DropAction>
{
public:
  typedef enum Qt::DropAction source_type;
  typedef Qt_DropAction_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ItemFlag>
class Qt_ItemFlag_Enums : public QFlags<enum Qt::ItemFlag> {
public:
  Qt_ItemFlag_Enums () : m_flags () { }
  Qt_ItemFlag_Enums (enum Qt::ItemFlag v) : m_flags (v) { }
  Qt_ItemFlag_Enums (const QFlags<enum Qt::ItemFlag> &v) : m_flags (v) { }
  QFlags<enum Qt::ItemFlag> flags () const { return m_flags; }
private:
  QFlags<Qt::ItemFlag> m_flags;
};

//  Wrapper class for enum Qt::ItemFlag
class Qt_ItemFlag_Enum : public Qt_ItemFlag_Enums {
public:
  Qt_ItemFlag_Enum () { }
  Qt_ItemFlag_Enum (enum Qt::ItemFlag v) : Qt_ItemFlag_Enums (v) { }
  enum Qt::ItemFlag value () const { return (enum Qt::ItemFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ItemFlag>
template <>
struct Converter<QFlags<enum Qt::ItemFlag> >
{
public:
  typedef QFlags<enum Qt::ItemFlag> source_type;
  typedef Qt_ItemFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ItemFlag
template <>
struct Converter<enum Qt::ItemFlag>
{
public:
  typedef enum Qt::ItemFlag source_type;
  typedef Qt_ItemFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::MatchFlag>
class Qt_MatchFlag_Enums : public QFlags<enum Qt::MatchFlag> {
public:
  Qt_MatchFlag_Enums () : m_flags () { }
  Qt_MatchFlag_Enums (enum Qt::MatchFlag v) : m_flags (v) { }
  Qt_MatchFlag_Enums (const QFlags<enum Qt::MatchFlag> &v) : m_flags (v) { }
  QFlags<enum Qt::MatchFlag> flags () const { return m_flags; }
private:
  QFlags<Qt::MatchFlag> m_flags;
};

//  Wrapper class for enum Qt::MatchFlag
class Qt_MatchFlag_Enum : public Qt_MatchFlag_Enums {
public:
  Qt_MatchFlag_Enum () { }
  Qt_MatchFlag_Enum (enum Qt::MatchFlag v) : Qt_MatchFlag_Enums (v) { }
  enum Qt::MatchFlag value () const { return (enum Qt::MatchFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::MatchFlag>
template <>
struct Converter<QFlags<enum Qt::MatchFlag> >
{
public:
  typedef QFlags<enum Qt::MatchFlag> source_type;
  typedef Qt_MatchFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::MatchFlag
template <>
struct Converter<enum Qt::MatchFlag>
{
public:
  typedef enum Qt::MatchFlag source_type;
  typedef Qt_MatchFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::Orientation>
class Qt_Orientation_Enums : public QFlags<enum Qt::Orientation> {
public:
  Qt_Orientation_Enums () : m_flags () { }
  Qt_Orientation_Enums (enum Qt::Orientation v) : m_flags (v) { }
  Qt_Orientation_Enums (const QFlags<enum Qt::Orientation> &v) : m_flags (v) { }
  QFlags<enum Qt::Orientation> flags () const { return m_flags; }
private:
  QFlags<Qt::Orientation> m_flags;
};

//  Wrapper class for enum Qt::Orientation
class Qt_Orientation_Enum : public Qt_Orientation_Enums {
public:
  Qt_Orientation_Enum () { }
  Qt_Orientation_Enum (enum Qt::Orientation v) : Qt_Orientation_Enums (v) { }
  enum Qt::Orientation value () const { return (enum Qt::Orientation) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::Orientation>
template <>
struct Converter<QFlags<enum Qt::Orientation> >
{
public:
  typedef QFlags<enum Qt::Orientation> source_type;
  typedef Qt_Orientation_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::Orientation
template <>
struct Converter<enum Qt::Orientation>
{
public:
  typedef enum Qt::Orientation source_type;
  typedef Qt_Orientation_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::SortOrder>
class Qt_SortOrder_Enums : public QFlags<enum Qt::SortOrder> {
public:
  Qt_SortOrder_Enums () : m_flags () { }
  Qt_SortOrder_Enums (enum Qt::SortOrder v) : m_flags (v) { }
  Qt_SortOrder_Enums (const QFlags<enum Qt::SortOrder> &v) : m_flags (v) { }
  QFlags<enum Qt::SortOrder> flags () const { return m_flags; }
private:
  QFlags<Qt::SortOrder> m_flags;
};

//  Wrapper class for enum Qt::SortOrder
class Qt_SortOrder_Enum : public Qt_SortOrder_Enums {
public:
  Qt_SortOrder_Enum () { }
  Qt_SortOrder_Enum (enum Qt::SortOrder v) : Qt_SortOrder_Enums (v) { }
  enum Qt::SortOrder value () const { return (enum Qt::SortOrder) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::SortOrder>
template <>
struct Converter<QFlags<enum Qt::SortOrder> >
{
public:
  typedef QFlags<enum Qt::SortOrder> source_type;
  typedef Qt_SortOrder_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::SortOrder
template <>
struct Converter<enum Qt::SortOrder>
{
public:
  typedef enum Qt::SortOrder source_type;
  typedef Qt_SortOrder_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
