
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQMetaType.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtCore.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQMetaType_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QMetaType

//  Constructor QMetaType::QMetaType()


static void _init_ctor_QMetaType_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QMetaType *> ();
}

static void _call_ctor_QMetaType_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QMetaType *> (new QMetaType ());
}

static qt_gsi::GenericStaticMethod *_create_ctor_QMetaType_0 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QMetaType::QMetaType()\nThis method creates an object of class QMetaType.", &_init_ctor_QMetaType_0, &_call_ctor_QMetaType_0);
}

// static void *QMetaType::construct(int type, const void *copy)


static void _init_f_construct_2410 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("type");
  decl->add_arg<int > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("copy", true, "0");
  decl->add_arg<const void * > (argspec_1);
  decl->set_return<void * > ();
}

static void _call_f_construct_2410 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  const void *arg2 = args ? args.read<const void * > () : (const void *)(0);
  ret.write<void * > ((void *)QMetaType::construct (arg1, arg2));
}

static qt_gsi::GenericStaticMethod *_create_f_construct_2410 ()
{
  return new qt_gsi::GenericStaticMethod ("construct", "@brief Static method void *QMetaType::construct(int type, const void *copy)\nThis method is static and can be called without an instance.", &_init_f_construct_2410, &_call_f_construct_2410);
}

// static void QMetaType::destroy(int type, void *data)


static void _init_f_destroy_1715 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("type");
  decl->add_arg<int > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("data");
  decl->add_arg<void * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_destroy_1715 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  void *arg2 = args.read<void * > ();
  QMetaType::destroy (arg1, arg2);
}

static qt_gsi::GenericStaticMethod *_create_f_destroy_1715 ()
{
  return new qt_gsi::GenericStaticMethod ("qt_destroy", "@brief Static method void QMetaType::destroy(int type, void *data)\nThis method is static and can be called without an instance.", &_init_f_destroy_1715, &_call_f_destroy_1715);
}

// static bool QMetaType::isRegistered(int type)


static void _init_f_isRegistered_767 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("type");
  decl->add_arg<int > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_isRegistered_767 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ret.write<bool > ((bool)QMetaType::isRegistered (arg1));
}

static qt_gsi::GenericStaticMethod *_create_f_isRegistered_767 ()
{
  return new qt_gsi::GenericStaticMethod ("isRegistered?", "@brief Static method bool QMetaType::isRegistered(int type)\nThis method is static and can be called without an instance.", &_init_f_isRegistered_767, &_call_f_isRegistered_767);
}

// static bool QMetaType::load(QDataStream &stream, int type, void *data)


static void _init_f_load_3304 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("stream");
  decl->add_arg<QDataStream & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("type");
  decl->add_arg<int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("data");
  decl->add_arg<void * > (argspec_2);
  decl->set_return<bool > ();
}

static void _call_f_load_3304 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QDataStream &arg1 = args.read<QDataStream & > ();
  int arg2 = args.read<int > ();
  void *arg3 = args.read<void * > ();
  ret.write<bool > ((bool)QMetaType::load (arg1, arg2, arg3));
}

static qt_gsi::GenericStaticMethod *_create_f_load_3304 ()
{
  return new qt_gsi::GenericStaticMethod ("load", "@brief Static method bool QMetaType::load(QDataStream &stream, int type, void *data)\nThis method is static and can be called without an instance.", &_init_f_load_3304, &_call_f_load_3304);
}

// static bool QMetaType::save(QDataStream &stream, int type, const void *data)


static void _init_f_save_3999 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("stream");
  decl->add_arg<QDataStream & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("type");
  decl->add_arg<int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("data");
  decl->add_arg<const void * > (argspec_2);
  decl->set_return<bool > ();
}

static void _call_f_save_3999 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QDataStream &arg1 = args.read<QDataStream & > ();
  int arg2 = args.read<int > ();
  const void *arg3 = args.read<const void * > ();
  ret.write<bool > ((bool)QMetaType::save (arg1, arg2, arg3));
}

static qt_gsi::GenericStaticMethod *_create_f_save_3999 ()
{
  return new qt_gsi::GenericStaticMethod ("save", "@brief Static method bool QMetaType::save(QDataStream &stream, int type, const void *data)\nThis method is static and can be called without an instance.", &_init_f_save_3999, &_call_f_save_3999);
}

// static int QMetaType::type(const char *typeName)


static void _init_f_type_1731 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("typeName");
  decl->add_arg<const char * > (argspec_0);
  decl->set_return<int > ();
}

static void _call_f_type_1731 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  ret.write<int > ((int)QMetaType::type (arg1));
}

static qt_gsi::GenericStaticMethod *_create_f_type_1731 ()
{
  return new qt_gsi::GenericStaticMethod ("type", "@brief Static method int QMetaType::type(const char *typeName)\nThis method is static and can be called without an instance.", &_init_f_type_1731, &_call_f_type_1731);
}

// static const char *QMetaType::typeName(int type)


static void _init_f_typeName_767 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("type");
  decl->add_arg<int > (argspec_0);
  decl->set_return<const char * > ();
}

static void _call_f_typeName_767 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ret.write<const char * > ((const char *)QMetaType::typeName (arg1));
}

static qt_gsi::GenericStaticMethod *_create_f_typeName_767 ()
{
  return new qt_gsi::GenericStaticMethod ("typeName", "@brief Static method const char *QMetaType::typeName(int type)\nThis method is static and can be called without an instance.", &_init_f_typeName_767, &_call_f_typeName_767);
}

// static void QMetaType::unregisterType(const char *typeName)


static void _init_f_unregisterType_1731 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("typeName");
  decl->add_arg<const char * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_unregisterType_1731 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  QMetaType::unregisterType (arg1);
}

static qt_gsi::GenericStaticMethod *_create_f_unregisterType_1731 ()
{
  return new qt_gsi::GenericStaticMethod ("unregisterType", "@brief Static method void QMetaType::unregisterType(const char *typeName)\nThis method is static and can be called without an instance.", &_init_f_unregisterType_1731, &_call_f_unregisterType_1731);
}


namespace gsi
{
gsi::Class<QMetaType> decl_QMetaType ("QMetaType",
  gsi::Methods(_create_ctor_QMetaType_0 ()) +
  gsi::Methods(_create_f_construct_2410 ()) +
  gsi::Methods(_create_f_destroy_1715 ()) +
  gsi::Methods(_create_f_isRegistered_767 ()) +
  gsi::Methods(_create_f_load_3304 ()) +
  gsi::Methods(_create_f_save_3999 ()) +
  gsi::Methods(_create_f_type_1731 ()) +
  gsi::Methods(_create_f_typeName_767 ()) +
  gsi::Methods(_create_f_unregisterType_1731 ()),
  "@qt\n@brief Binding of QMetaType");

}

