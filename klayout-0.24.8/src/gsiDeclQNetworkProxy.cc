
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQNetworkProxy.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtNetwork.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQNetworkProxy_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QNetworkProxy

//  Constructor QNetworkProxy::QNetworkProxy()


static void _init_ctor_QNetworkProxy_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QNetworkProxy *> ();
}

static void _call_ctor_QNetworkProxy_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QNetworkProxy *> (new QNetworkProxy ());
}

static qt_gsi::GenericStaticMethod *_create_ctor_QNetworkProxy_0 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNetworkProxy::QNetworkProxy()\nThis method creates an object of class QNetworkProxy.", &_init_ctor_QNetworkProxy_0, &_call_ctor_QNetworkProxy_0);
}

//  Constructor QNetworkProxy::QNetworkProxy(QNetworkProxy::ProxyType type, const QString &hostName, quint16 port, const QString &user, const QString &password)


static void _init_ctor_QNetworkProxy_9632 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("type");
  decl->add_arg<const qt_gsi::Converter<QNetworkProxy::ProxyType>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("hostName", true, "QString()");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("port", true, "0");
  decl->add_arg<quint16 > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("user", true, "QString()");
  decl->add_arg<const QString & > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("password", true, "QString()");
  decl->add_arg<const QString & > (argspec_4);
  decl->set_return_new<QNetworkProxy *> ();
}

static void _call_ctor_QNetworkProxy_9632 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QNetworkProxy::ProxyType>::target_type & arg1 = args.read<const qt_gsi::Converter<QNetworkProxy::ProxyType>::target_type & > ();
  const QString &arg2 = args ? args.read<const QString & > () : (const QString &)(QString());
  quint16 arg3 = args ? args.read<quint16 > () : (quint16)(0);
  const QString &arg4 = args ? args.read<const QString & > () : (const QString &)(QString());
  const QString &arg5 = args ? args.read<const QString & > () : (const QString &)(QString());
  ret.write<QNetworkProxy *> (new QNetworkProxy (qt_gsi::QtToCppAdaptor<QNetworkProxy::ProxyType>(arg1).cref(), arg2, arg3, arg4, arg5));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QNetworkProxy_9632 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNetworkProxy::QNetworkProxy(QNetworkProxy::ProxyType type, const QString &hostName, quint16 port, const QString &user, const QString &password)\nThis method creates an object of class QNetworkProxy.", &_init_ctor_QNetworkProxy_9632, &_call_ctor_QNetworkProxy_9632);
}

//  Constructor QNetworkProxy::QNetworkProxy(const QNetworkProxy &other)


static void _init_ctor_QNetworkProxy_2686 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkProxy & > (argspec_0);
  decl->set_return_new<QNetworkProxy *> ();
}

static void _call_ctor_QNetworkProxy_2686 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkProxy &arg1 = args.read<const QNetworkProxy & > ();
  ret.write<QNetworkProxy *> (new QNetworkProxy (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QNetworkProxy_2686 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNetworkProxy::QNetworkProxy(const QNetworkProxy &other)\nThis method creates an object of class QNetworkProxy.", &_init_ctor_QNetworkProxy_2686, &_call_ctor_QNetworkProxy_2686);
}

// QFlags<QNetworkProxy::Capability> QNetworkProxy::capabilities()


static void _init_f_capabilities_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QFlags<QNetworkProxy::Capability> >::target_type > ();
}

static void _call_f_capabilities_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QFlags<QNetworkProxy::Capability> >::target_type > ((qt_gsi::Converter<QFlags<QNetworkProxy::Capability> >::target_type)qt_gsi::CppToQtAdaptor<QFlags<QNetworkProxy::Capability> >(((QNetworkProxy *)cls)->capabilities ()));
}

static qt_gsi::GenericMethod *_create_f_capabilities_c0 ()
{
  return new qt_gsi::GenericMethod (":capabilities", "@brief Method QFlags<QNetworkProxy::Capability> QNetworkProxy::capabilities()\n", true, &_init_f_capabilities_c0, &_call_f_capabilities_c0);
}

// QString QNetworkProxy::hostName()


static void _init_f_hostName_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_hostName_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QNetworkProxy *)cls)->hostName ());
}

static qt_gsi::GenericMethod *_create_f_hostName_c0 ()
{
  return new qt_gsi::GenericMethod (":hostName", "@brief Method QString QNetworkProxy::hostName()\n", true, &_init_f_hostName_c0, &_call_f_hostName_c0);
}

// bool QNetworkProxy::isCachingProxy()


static void _init_f_isCachingProxy_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isCachingProxy_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QNetworkProxy *)cls)->isCachingProxy ());
}

static qt_gsi::GenericMethod *_create_f_isCachingProxy_c0 ()
{
  return new qt_gsi::GenericMethod ("isCachingProxy?", "@brief Method bool QNetworkProxy::isCachingProxy()\n", true, &_init_f_isCachingProxy_c0, &_call_f_isCachingProxy_c0);
}

// bool QNetworkProxy::isTransparentProxy()


static void _init_f_isTransparentProxy_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isTransparentProxy_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QNetworkProxy *)cls)->isTransparentProxy ());
}

static qt_gsi::GenericMethod *_create_f_isTransparentProxy_c0 ()
{
  return new qt_gsi::GenericMethod ("isTransparentProxy?", "@brief Method bool QNetworkProxy::isTransparentProxy()\n", true, &_init_f_isTransparentProxy_c0, &_call_f_isTransparentProxy_c0);
}

// bool QNetworkProxy::operator!=(const QNetworkProxy &other)


static void _init_f_operator_excl__eq__c2686 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkProxy & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_operator_excl__eq__c2686 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkProxy &arg1 = args.read<const QNetworkProxy & > ();
  ret.write<bool > ((bool)((QNetworkProxy *)cls)->operator!= (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_excl__eq__c2686 ()
{
  return new qt_gsi::GenericMethod ("!=", "@brief Method bool QNetworkProxy::operator!=(const QNetworkProxy &other)\n", true, &_init_f_operator_excl__eq__c2686, &_call_f_operator_excl__eq__c2686);
}

// QNetworkProxy &QNetworkProxy::operator=(const QNetworkProxy &other)


static void _init_f_operator_eq__2686 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkProxy & > (argspec_0);
  decl->set_return<QNetworkProxy & > ();
}

static void _call_f_operator_eq__2686 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkProxy &arg1 = args.read<const QNetworkProxy & > ();
  ret.write<QNetworkProxy & > ((QNetworkProxy &)((QNetworkProxy *)cls)->operator= (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_eq__2686 ()
{
  return new qt_gsi::GenericMethod ("assign", "@brief Method QNetworkProxy &QNetworkProxy::operator=(const QNetworkProxy &other)\n", false, &_init_f_operator_eq__2686, &_call_f_operator_eq__2686);
}

// bool QNetworkProxy::operator==(const QNetworkProxy &other)


static void _init_f_operator_eq__eq__c2686 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkProxy & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_operator_eq__eq__c2686 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkProxy &arg1 = args.read<const QNetworkProxy & > ();
  ret.write<bool > ((bool)((QNetworkProxy *)cls)->operator== (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_eq__eq__c2686 ()
{
  return new qt_gsi::GenericMethod ("==", "@brief Method bool QNetworkProxy::operator==(const QNetworkProxy &other)\n", true, &_init_f_operator_eq__eq__c2686, &_call_f_operator_eq__eq__c2686);
}

// QString QNetworkProxy::password()


static void _init_f_password_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_password_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QNetworkProxy *)cls)->password ());
}

static qt_gsi::GenericMethod *_create_f_password_c0 ()
{
  return new qt_gsi::GenericMethod (":password", "@brief Method QString QNetworkProxy::password()\n", true, &_init_f_password_c0, &_call_f_password_c0);
}

// quint16 QNetworkProxy::port()


static void _init_f_port_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<quint16 > ();
}

static void _call_f_port_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<quint16 > ((quint16)((QNetworkProxy *)cls)->port ());
}

static qt_gsi::GenericMethod *_create_f_port_c0 ()
{
  return new qt_gsi::GenericMethod (":port", "@brief Method quint16 QNetworkProxy::port()\n", true, &_init_f_port_c0, &_call_f_port_c0);
}

// void QNetworkProxy::setCapabilities(QFlags<QNetworkProxy::Capability> capab)


static void _init_f_setCapabilities_3647 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("capab");
  decl->add_arg<const qt_gsi::Converter<QFlags<QNetworkProxy::Capability> >::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setCapabilities_3647 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QFlags<QNetworkProxy::Capability> >::target_type & arg1 = args.read<const qt_gsi::Converter<QFlags<QNetworkProxy::Capability> >::target_type & > ();
  ((QNetworkProxy *)cls)->setCapabilities (qt_gsi::QtToCppAdaptor<QFlags<QNetworkProxy::Capability> >(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setCapabilities_3647 ()
{
  return new qt_gsi::GenericMethod ("setCapabilities|capabilities=", "@brief Method void QNetworkProxy::setCapabilities(QFlags<QNetworkProxy::Capability> capab)\n", false, &_init_f_setCapabilities_3647, &_call_f_setCapabilities_3647);
}

// void QNetworkProxy::setHostName(const QString &hostName)


static void _init_f_setHostName_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("hostName");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setHostName_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QNetworkProxy *)cls)->setHostName (arg1);
}

static qt_gsi::GenericMethod *_create_f_setHostName_2025 ()
{
  return new qt_gsi::GenericMethod ("setHostName|hostName=", "@brief Method void QNetworkProxy::setHostName(const QString &hostName)\n", false, &_init_f_setHostName_2025, &_call_f_setHostName_2025);
}

// void QNetworkProxy::setPassword(const QString &password)


static void _init_f_setPassword_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("password");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPassword_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QNetworkProxy *)cls)->setPassword (arg1);
}

static qt_gsi::GenericMethod *_create_f_setPassword_2025 ()
{
  return new qt_gsi::GenericMethod ("setPassword|password=", "@brief Method void QNetworkProxy::setPassword(const QString &password)\n", false, &_init_f_setPassword_2025, &_call_f_setPassword_2025);
}

// void QNetworkProxy::setPort(quint16 port)


static void _init_f_setPort_1100 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("port");
  decl->add_arg<quint16 > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPort_1100 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  quint16 arg1 = args.read<quint16 > ();
  ((QNetworkProxy *)cls)->setPort (arg1);
}

static qt_gsi::GenericMethod *_create_f_setPort_1100 ()
{
  return new qt_gsi::GenericMethod ("setPort|port=", "@brief Method void QNetworkProxy::setPort(quint16 port)\n", false, &_init_f_setPort_1100, &_call_f_setPort_1100);
}

// void QNetworkProxy::setType(QNetworkProxy::ProxyType type)


static void _init_f_setType_2889 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("type");
  decl->add_arg<const qt_gsi::Converter<QNetworkProxy::ProxyType>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setType_2889 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QNetworkProxy::ProxyType>::target_type & arg1 = args.read<const qt_gsi::Converter<QNetworkProxy::ProxyType>::target_type & > ();
  ((QNetworkProxy *)cls)->setType (qt_gsi::QtToCppAdaptor<QNetworkProxy::ProxyType>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setType_2889 ()
{
  return new qt_gsi::GenericMethod ("setType|type=", "@brief Method void QNetworkProxy::setType(QNetworkProxy::ProxyType type)\n", false, &_init_f_setType_2889, &_call_f_setType_2889);
}

// void QNetworkProxy::setUser(const QString &userName)


static void _init_f_setUser_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("userName");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setUser_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QNetworkProxy *)cls)->setUser (arg1);
}

static qt_gsi::GenericMethod *_create_f_setUser_2025 ()
{
  return new qt_gsi::GenericMethod ("setUser|user=", "@brief Method void QNetworkProxy::setUser(const QString &userName)\n", false, &_init_f_setUser_2025, &_call_f_setUser_2025);
}

// QNetworkProxy::ProxyType QNetworkProxy::type()


static void _init_f_type_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QNetworkProxy::ProxyType>::target_type > ();
}

static void _call_f_type_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QNetworkProxy::ProxyType>::target_type > ((qt_gsi::Converter<QNetworkProxy::ProxyType>::target_type)qt_gsi::CppToQtAdaptor<QNetworkProxy::ProxyType>(((QNetworkProxy *)cls)->type ()));
}

static qt_gsi::GenericMethod *_create_f_type_c0 ()
{
  return new qt_gsi::GenericMethod (":type", "@brief Method QNetworkProxy::ProxyType QNetworkProxy::type()\n", true, &_init_f_type_c0, &_call_f_type_c0);
}

// QString QNetworkProxy::user()


static void _init_f_user_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_user_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QNetworkProxy *)cls)->user ());
}

static qt_gsi::GenericMethod *_create_f_user_c0 ()
{
  return new qt_gsi::GenericMethod (":user", "@brief Method QString QNetworkProxy::user()\n", true, &_init_f_user_c0, &_call_f_user_c0);
}

// static QNetworkProxy QNetworkProxy::applicationProxy()


static void _init_f_applicationProxy_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<QNetworkProxy > ();
}

static void _call_f_applicationProxy_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QNetworkProxy > ((QNetworkProxy)QNetworkProxy::applicationProxy ());
}

static qt_gsi::GenericStaticMethod *_create_f_applicationProxy_0 ()
{
  return new qt_gsi::GenericStaticMethod (":applicationProxy", "@brief Static method QNetworkProxy QNetworkProxy::applicationProxy()\nThis method is static and can be called without an instance.", &_init_f_applicationProxy_0, &_call_f_applicationProxy_0);
}

// static void QNetworkProxy::setApplicationProxy(const QNetworkProxy &proxy)


static void _init_f_setApplicationProxy_2686 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("proxy");
  decl->add_arg<const QNetworkProxy & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setApplicationProxy_2686 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkProxy &arg1 = args.read<const QNetworkProxy & > ();
  QNetworkProxy::setApplicationProxy (arg1);
}

static qt_gsi::GenericStaticMethod *_create_f_setApplicationProxy_2686 ()
{
  return new qt_gsi::GenericStaticMethod ("setApplicationProxy|applicationProxy=", "@brief Static method void QNetworkProxy::setApplicationProxy(const QNetworkProxy &proxy)\nThis method is static and can be called without an instance.", &_init_f_setApplicationProxy_2686, &_call_f_setApplicationProxy_2686);
}


namespace gsi
{
gsi::Class<QNetworkProxy> decl_QNetworkProxy ("QNetworkProxy",
  gsi::Methods(_create_ctor_QNetworkProxy_0 ()) +
  gsi::Methods(_create_ctor_QNetworkProxy_9632 ()) +
  gsi::Methods(_create_ctor_QNetworkProxy_2686 ()) +
  gsi::Methods(_create_f_capabilities_c0 ()) +
  gsi::Methods(_create_f_hostName_c0 ()) +
  gsi::Methods(_create_f_isCachingProxy_c0 ()) +
  gsi::Methods(_create_f_isTransparentProxy_c0 ()) +
  gsi::Methods(_create_f_operator_excl__eq__c2686 ()) +
  gsi::Methods(_create_f_operator_eq__2686 ()) +
  gsi::Methods(_create_f_operator_eq__eq__c2686 ()) +
  gsi::Methods(_create_f_password_c0 ()) +
  gsi::Methods(_create_f_port_c0 ()) +
  gsi::Methods(_create_f_setCapabilities_3647 ()) +
  gsi::Methods(_create_f_setHostName_2025 ()) +
  gsi::Methods(_create_f_setPassword_2025 ()) +
  gsi::Methods(_create_f_setPort_1100 ()) +
  gsi::Methods(_create_f_setType_2889 ()) +
  gsi::Methods(_create_f_setUser_2025 ()) +
  gsi::Methods(_create_f_type_c0 ()) +
  gsi::Methods(_create_f_user_c0 ()) +
  gsi::Methods(_create_f_applicationProxy_0 ()) +
  gsi::Methods(_create_f_setApplicationProxy_2686 ()),
  "@qt\n@brief Binding of QNetworkProxy");

}


//  Implementation of the enum wrapper class for QNetworkProxy::Capability
namespace qt_gsi
{

static QNetworkProxy_Capability_Enum *c_1_QNetworkProxy_Capability_Enum () { return new QNetworkProxy_Capability_Enum (QNetworkProxy::TunnelingCapability); }
static QNetworkProxy_Capability_Enum *c_2_QNetworkProxy_Capability_Enum () { return new QNetworkProxy_Capability_Enum (QNetworkProxy::ListeningCapability); }
static QNetworkProxy_Capability_Enum *c_3_QNetworkProxy_Capability_Enum () { return new QNetworkProxy_Capability_Enum (QNetworkProxy::UdpTunnelingCapability); }
static QNetworkProxy_Capability_Enum *c_4_QNetworkProxy_Capability_Enum () { return new QNetworkProxy_Capability_Enum (QNetworkProxy::CachingCapability); }
static QNetworkProxy_Capability_Enum *c_5_QNetworkProxy_Capability_Enum () { return new QNetworkProxy_Capability_Enum (QNetworkProxy::HostNameLookupCapability); }

static gsi::Methods mkdefs_QNetworkProxy_Capability () {
  return
    gsi::constant ("TunnelingCapability", &qt_gsi::c_1_QNetworkProxy_Capability_Enum, "@brief Enum constant QNetworkProxy::TunnelingCapability") +
    gsi::constant ("ListeningCapability", &qt_gsi::c_2_QNetworkProxy_Capability_Enum, "@brief Enum constant QNetworkProxy::ListeningCapability") +
    gsi::constant ("UdpTunnelingCapability", &qt_gsi::c_3_QNetworkProxy_Capability_Enum, "@brief Enum constant QNetworkProxy::UdpTunnelingCapability") +
    gsi::constant ("CachingCapability", &qt_gsi::c_4_QNetworkProxy_Capability_Enum, "@brief Enum constant QNetworkProxy::CachingCapability") +
    gsi::constant ("HostNameLookupCapability", &qt_gsi::c_5_QNetworkProxy_Capability_Enum, "@brief Enum constant QNetworkProxy::HostNameLookupCapability");
}

static std::string to_s_QNetworkProxy_Capability_Enum (const QNetworkProxy_Capability_Enum *e)
{
  if (e->value () == QNetworkProxy::TunnelingCapability) { return tl::sprintf ("TunnelingCapability (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkProxy::ListeningCapability) { return tl::sprintf ("ListeningCapability (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkProxy::UdpTunnelingCapability) { return tl::sprintf ("UdpTunnelingCapability (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkProxy::CachingCapability) { return tl::sprintf ("CachingCapability (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkProxy::HostNameLookupCapability) { return tl::sprintf ("HostNameLookupCapability (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QNetworkProxy_Capability_Enum (const QNetworkProxy_Capability_Enum *e)
{
  return (unsigned int) e->value ();
}

static QNetworkProxy_Capability_Enum *from_i_QNetworkProxy_Capability_Enum (unsigned int i)
{
  return new QNetworkProxy_Capability_Enum ((QNetworkProxy::Capability) i);
}

static bool equalQNetworkProxy_Capability_Enum (const QNetworkProxy_Capability_Enum *e, QNetworkProxy_Capability_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QNetworkProxy_Capability_Enum (const QNetworkProxy_Capability_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QNetworkProxy_Capability_Enums oropQNetworkProxy_Capability_Enums (const QNetworkProxy_Capability_Enums *e, const QNetworkProxy_Capability_Enums &d)
{
  return e->flags () | d.flags ();
}

static QNetworkProxy_Capability_Enums andopQNetworkProxy_Capability_Enums (const QNetworkProxy_Capability_Enums *e, const QNetworkProxy_Capability_Enums &d)
{
  return e->flags () & d.flags ();
}

static QNetworkProxy_Capability_Enums xoropQNetworkProxy_Capability_Enums (const QNetworkProxy_Capability_Enums *e, const QNetworkProxy_Capability_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QNetworkProxy_Capability_Enums (const QNetworkProxy_Capability_Enums *e)
{
  std::string l;
  if (e->testFlag (QNetworkProxy::TunnelingCapability)) { if (!l.empty ()) l += "|"; l += "TunnelingCapability"; }
  if (e->testFlag (QNetworkProxy::ListeningCapability)) { if (!l.empty ()) l += "|"; l += "ListeningCapability"; }
  if (e->testFlag (QNetworkProxy::UdpTunnelingCapability)) { if (!l.empty ()) l += "|"; l += "UdpTunnelingCapability"; }
  if (e->testFlag (QNetworkProxy::CachingCapability)) { if (!l.empty ()) l += "|"; l += "CachingCapability"; }
  if (e->testFlag (QNetworkProxy::HostNameLookupCapability)) { if (!l.empty ()) l += "|"; l += "HostNameLookupCapability"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QNetworkProxy_Capability_Enums (const QNetworkProxy_Capability_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QNetworkProxy_Capability_Enums (const QNetworkProxy_Capability_Enums *e, const QNetworkProxy_Capability_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QNetworkProxy_Capability_Enums> decl_QNetworkProxy_Capability_Enums ("QNetworkProxy_QFlags_Capability",
  gsi::method_ext ("|", &qt_gsi::oropQNetworkProxy_Capability_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQNetworkProxy_Capability_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQNetworkProxy_Capability_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QNetworkProxy_Capability_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QNetworkProxy_Capability_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QNetworkProxy_Capability_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QNetworkProxy::Capability> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QNetworkProxy_Capability_Enum> decl_QNetworkProxy_Capability_Enum (decl_QNetworkProxy_Capability_Enums, "QNetworkProxy_Capability",
  qt_gsi::mkdefs_QNetworkProxy_Capability () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QNetworkProxy_Capability_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QNetworkProxy_Capability_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQNetworkProxy_Capability_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QNetworkProxy_Capability_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QNetworkProxy_Capability_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QNetworkProxy::Capability enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QNetworkProxy> inject_QNetworkProxy_Capability_Enum_in_parent (qt_gsi::mkdefs_QNetworkProxy_Capability ());
static gsi::ClassExt<QNetworkProxy> decl_QNetworkProxy_Capability_Enum_as_child (decl_QNetworkProxy_Capability_Enum, "Capability");

}


//  Implementation of the enum wrapper class for QNetworkProxy::ProxyType
namespace qt_gsi
{

static QNetworkProxy_ProxyType_Enum *c_1_QNetworkProxy_ProxyType_Enum () { return new QNetworkProxy_ProxyType_Enum (QNetworkProxy::DefaultProxy); }
static QNetworkProxy_ProxyType_Enum *c_2_QNetworkProxy_ProxyType_Enum () { return new QNetworkProxy_ProxyType_Enum (QNetworkProxy::Socks5Proxy); }
static QNetworkProxy_ProxyType_Enum *c_3_QNetworkProxy_ProxyType_Enum () { return new QNetworkProxy_ProxyType_Enum (QNetworkProxy::NoProxy); }
static QNetworkProxy_ProxyType_Enum *c_4_QNetworkProxy_ProxyType_Enum () { return new QNetworkProxy_ProxyType_Enum (QNetworkProxy::HttpProxy); }
static QNetworkProxy_ProxyType_Enum *c_5_QNetworkProxy_ProxyType_Enum () { return new QNetworkProxy_ProxyType_Enum (QNetworkProxy::HttpCachingProxy); }
static QNetworkProxy_ProxyType_Enum *c_6_QNetworkProxy_ProxyType_Enum () { return new QNetworkProxy_ProxyType_Enum (QNetworkProxy::FtpCachingProxy); }

static gsi::Methods mkdefs_QNetworkProxy_ProxyType () {
  return
    gsi::constant ("DefaultProxy", &qt_gsi::c_1_QNetworkProxy_ProxyType_Enum, "@brief Enum constant QNetworkProxy::DefaultProxy") +
    gsi::constant ("Socks5Proxy", &qt_gsi::c_2_QNetworkProxy_ProxyType_Enum, "@brief Enum constant QNetworkProxy::Socks5Proxy") +
    gsi::constant ("NoProxy", &qt_gsi::c_3_QNetworkProxy_ProxyType_Enum, "@brief Enum constant QNetworkProxy::NoProxy") +
    gsi::constant ("HttpProxy", &qt_gsi::c_4_QNetworkProxy_ProxyType_Enum, "@brief Enum constant QNetworkProxy::HttpProxy") +
    gsi::constant ("HttpCachingProxy", &qt_gsi::c_5_QNetworkProxy_ProxyType_Enum, "@brief Enum constant QNetworkProxy::HttpCachingProxy") +
    gsi::constant ("FtpCachingProxy", &qt_gsi::c_6_QNetworkProxy_ProxyType_Enum, "@brief Enum constant QNetworkProxy::FtpCachingProxy");
}

static std::string to_s_QNetworkProxy_ProxyType_Enum (const QNetworkProxy_ProxyType_Enum *e)
{
  if (e->value () == QNetworkProxy::DefaultProxy) { return tl::sprintf ("DefaultProxy (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkProxy::Socks5Proxy) { return tl::sprintf ("Socks5Proxy (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkProxy::NoProxy) { return tl::sprintf ("NoProxy (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkProxy::HttpProxy) { return tl::sprintf ("HttpProxy (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkProxy::HttpCachingProxy) { return tl::sprintf ("HttpCachingProxy (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkProxy::FtpCachingProxy) { return tl::sprintf ("FtpCachingProxy (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QNetworkProxy_ProxyType_Enum (const QNetworkProxy_ProxyType_Enum *e)
{
  return (unsigned int) e->value ();
}

static QNetworkProxy_ProxyType_Enum *from_i_QNetworkProxy_ProxyType_Enum (unsigned int i)
{
  return new QNetworkProxy_ProxyType_Enum ((QNetworkProxy::ProxyType) i);
}

static bool equalQNetworkProxy_ProxyType_Enum (const QNetworkProxy_ProxyType_Enum *e, QNetworkProxy_ProxyType_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QNetworkProxy_ProxyType_Enum (const QNetworkProxy_ProxyType_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QNetworkProxy_ProxyType_Enums oropQNetworkProxy_ProxyType_Enums (const QNetworkProxy_ProxyType_Enums *e, const QNetworkProxy_ProxyType_Enums &d)
{
  return e->flags () | d.flags ();
}

static QNetworkProxy_ProxyType_Enums andopQNetworkProxy_ProxyType_Enums (const QNetworkProxy_ProxyType_Enums *e, const QNetworkProxy_ProxyType_Enums &d)
{
  return e->flags () & d.flags ();
}

static QNetworkProxy_ProxyType_Enums xoropQNetworkProxy_ProxyType_Enums (const QNetworkProxy_ProxyType_Enums *e, const QNetworkProxy_ProxyType_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QNetworkProxy_ProxyType_Enums (const QNetworkProxy_ProxyType_Enums *e)
{
  std::string l;
  if (e->testFlag (QNetworkProxy::DefaultProxy)) { if (!l.empty ()) l += "|"; l += "DefaultProxy"; }
  if (e->testFlag (QNetworkProxy::Socks5Proxy)) { if (!l.empty ()) l += "|"; l += "Socks5Proxy"; }
  if (e->testFlag (QNetworkProxy::NoProxy)) { if (!l.empty ()) l += "|"; l += "NoProxy"; }
  if (e->testFlag (QNetworkProxy::HttpProxy)) { if (!l.empty ()) l += "|"; l += "HttpProxy"; }
  if (e->testFlag (QNetworkProxy::HttpCachingProxy)) { if (!l.empty ()) l += "|"; l += "HttpCachingProxy"; }
  if (e->testFlag (QNetworkProxy::FtpCachingProxy)) { if (!l.empty ()) l += "|"; l += "FtpCachingProxy"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QNetworkProxy_ProxyType_Enums (const QNetworkProxy_ProxyType_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QNetworkProxy_ProxyType_Enums (const QNetworkProxy_ProxyType_Enums *e, const QNetworkProxy_ProxyType_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QNetworkProxy_ProxyType_Enums> decl_QNetworkProxy_ProxyType_Enums ("QNetworkProxy_QFlags_ProxyType",
  gsi::method_ext ("|", &qt_gsi::oropQNetworkProxy_ProxyType_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQNetworkProxy_ProxyType_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQNetworkProxy_ProxyType_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QNetworkProxy_ProxyType_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QNetworkProxy_ProxyType_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QNetworkProxy_ProxyType_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QNetworkProxy::ProxyType> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QNetworkProxy_ProxyType_Enum> decl_QNetworkProxy_ProxyType_Enum (decl_QNetworkProxy_ProxyType_Enums, "QNetworkProxy_ProxyType",
  qt_gsi::mkdefs_QNetworkProxy_ProxyType () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QNetworkProxy_ProxyType_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QNetworkProxy_ProxyType_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQNetworkProxy_ProxyType_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QNetworkProxy_ProxyType_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QNetworkProxy_ProxyType_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QNetworkProxy::ProxyType enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QNetworkProxy> inject_QNetworkProxy_ProxyType_Enum_in_parent (qt_gsi::mkdefs_QNetworkProxy_ProxyType ());
static gsi::ClassExt<QNetworkProxy> decl_QNetworkProxy_ProxyType_Enum_as_child (decl_QNetworkProxy_ProxyType_Enum, "ProxyType");

}

