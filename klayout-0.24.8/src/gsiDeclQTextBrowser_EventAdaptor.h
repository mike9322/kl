
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file generated/gsiDeclQTextBrowser_EventAdaptor.h
*  @brief Event adaptor implementations for QTextBrowser
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQTextBrowser_EventAdaptor
#define _HDR_gsiDeclQTextBrowser_EventAdaptor

#include "gsiDecl.h"
#include "gsiQtEvents.h"
#include "gsiQtGui.h"
#include "gsiDeclQTextBrowser_Enums.h"

#include "layExceptions.h"

#include <QtCore/QObject>

// -----------------------------------------------------------------------
// class QTextBrowser_EventAdaptor

class QTextBrowser_EventAdaptor
  : public QObject, public qt_gsi::EventAdaptorBase, public gsi::ObjectBase
{
Q_OBJECT

public:
  QTextBrowser_EventAdaptor (QObject *host);

public slots:
  void anchorClicked(const QUrl &);
  void backwardAvailable(bool);
  void copyAvailable(bool);
  void currentCharFormatChanged(const QTextCharFormat &);
  void cursorPositionChanged();
  void customContextMenuRequested(const QPoint &);
  void destroyed(QObject *);
  void forwardAvailable(bool);
  void highlighted(const QUrl &);
  void highlighted(const QString &);
  void historyChanged();
  void redoAvailable(bool);
  void selectionChanged();
  void sourceChanged(const QUrl &);
  void textChanged();
  void undoAvailable(bool);

public:
  gsi::event<const QUrl &> anchorClicked_e_1701;
  gsi::event<bool> backwardAvailable_e_864;
  gsi::event<bool> copyAvailable_e_864;
  gsi::event<const QTextCharFormat &> currentCharFormatChanged_e_2814;
  gsi::event<> cursorPositionChanged_e_0;
  gsi::event<const QPoint &> customContextMenuRequested_e_1916;
  gsi::event<QObject *> destroyed_e_1302;
  gsi::event<bool> forwardAvailable_e_864;
  gsi::event<const QUrl &> highlighted_e_1701;
  gsi::event<const QString &> highlighted_e_2025;
  gsi::event<> historyChanged_e_0;
  gsi::event<bool> redoAvailable_e_864;
  gsi::event<> selectionChanged_e_0;
  gsi::event<const QUrl &> sourceChanged_e_1701;
  gsi::event<> textChanged_e_0;
  gsi::event<bool> undoAvailable_e_864;
};

#endif
