
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQSqlDriver_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQSqlDriver_Enums
#define _HDR_gsiDeclQSqlDriver_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QSql::NumericalPrecisionPolicy>
class QSql_NumericalPrecisionPolicy_Enums : public QFlags<enum QSql::NumericalPrecisionPolicy> {
public:
  QSql_NumericalPrecisionPolicy_Enums () : m_flags () { }
  QSql_NumericalPrecisionPolicy_Enums (enum QSql::NumericalPrecisionPolicy v) : m_flags (v) { }
  QSql_NumericalPrecisionPolicy_Enums (const QFlags<enum QSql::NumericalPrecisionPolicy> &v) : m_flags (v) { }
  QFlags<enum QSql::NumericalPrecisionPolicy> flags () const { return m_flags; }
private:
  QFlags<QSql::NumericalPrecisionPolicy> m_flags;
};

//  Wrapper class for enum QSql::NumericalPrecisionPolicy
class QSql_NumericalPrecisionPolicy_Enum : public QSql_NumericalPrecisionPolicy_Enums {
public:
  QSql_NumericalPrecisionPolicy_Enum () { }
  QSql_NumericalPrecisionPolicy_Enum (enum QSql::NumericalPrecisionPolicy v) : QSql_NumericalPrecisionPolicy_Enums (v) { }
  enum QSql::NumericalPrecisionPolicy value () const { return (enum QSql::NumericalPrecisionPolicy) flags ().operator int (); }
};

//  Converter for QFlags<enum QSql::NumericalPrecisionPolicy>
template <>
struct Converter<QFlags<enum QSql::NumericalPrecisionPolicy> >
{
public:
  typedef QFlags<enum QSql::NumericalPrecisionPolicy> source_type;
  typedef QSql_NumericalPrecisionPolicy_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSql::NumericalPrecisionPolicy
template <>
struct Converter<enum QSql::NumericalPrecisionPolicy>
{
public:
  typedef enum QSql::NumericalPrecisionPolicy source_type;
  typedef QSql_NumericalPrecisionPolicy_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSql::TableType>
class QSql_TableType_Enums : public QFlags<enum QSql::TableType> {
public:
  QSql_TableType_Enums () : m_flags () { }
  QSql_TableType_Enums (enum QSql::TableType v) : m_flags (v) { }
  QSql_TableType_Enums (const QFlags<enum QSql::TableType> &v) : m_flags (v) { }
  QFlags<enum QSql::TableType> flags () const { return m_flags; }
private:
  QFlags<QSql::TableType> m_flags;
};

//  Wrapper class for enum QSql::TableType
class QSql_TableType_Enum : public QSql_TableType_Enums {
public:
  QSql_TableType_Enum () { }
  QSql_TableType_Enum (enum QSql::TableType v) : QSql_TableType_Enums (v) { }
  enum QSql::TableType value () const { return (enum QSql::TableType) flags ().operator int (); }
};

//  Converter for QFlags<enum QSql::TableType>
template <>
struct Converter<QFlags<enum QSql::TableType> >
{
public:
  typedef QFlags<enum QSql::TableType> source_type;
  typedef QSql_TableType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSql::TableType
template <>
struct Converter<enum QSql::TableType>
{
public:
  typedef enum QSql::TableType source_type;
  typedef QSql_TableType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSqlDriver::DriverFeature>
class QSqlDriver_DriverFeature_Enums : public QFlags<enum QSqlDriver::DriverFeature> {
public:
  QSqlDriver_DriverFeature_Enums () : m_flags () { }
  QSqlDriver_DriverFeature_Enums (enum QSqlDriver::DriverFeature v) : m_flags (v) { }
  QSqlDriver_DriverFeature_Enums (const QFlags<enum QSqlDriver::DriverFeature> &v) : m_flags (v) { }
  QFlags<enum QSqlDriver::DriverFeature> flags () const { return m_flags; }
private:
  QFlags<QSqlDriver::DriverFeature> m_flags;
};

//  Wrapper class for enum QSqlDriver::DriverFeature
class QSqlDriver_DriverFeature_Enum : public QSqlDriver_DriverFeature_Enums {
public:
  QSqlDriver_DriverFeature_Enum () { }
  QSqlDriver_DriverFeature_Enum (enum QSqlDriver::DriverFeature v) : QSqlDriver_DriverFeature_Enums (v) { }
  enum QSqlDriver::DriverFeature value () const { return (enum QSqlDriver::DriverFeature) flags ().operator int (); }
};

//  Converter for QFlags<enum QSqlDriver::DriverFeature>
template <>
struct Converter<QFlags<enum QSqlDriver::DriverFeature> >
{
public:
  typedef QFlags<enum QSqlDriver::DriverFeature> source_type;
  typedef QSqlDriver_DriverFeature_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSqlDriver::DriverFeature
template <>
struct Converter<enum QSqlDriver::DriverFeature>
{
public:
  typedef enum QSqlDriver::DriverFeature source_type;
  typedef QSqlDriver_DriverFeature_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSqlDriver::IdentifierType>
class QSqlDriver_IdentifierType_Enums : public QFlags<enum QSqlDriver::IdentifierType> {
public:
  QSqlDriver_IdentifierType_Enums () : m_flags () { }
  QSqlDriver_IdentifierType_Enums (enum QSqlDriver::IdentifierType v) : m_flags (v) { }
  QSqlDriver_IdentifierType_Enums (const QFlags<enum QSqlDriver::IdentifierType> &v) : m_flags (v) { }
  QFlags<enum QSqlDriver::IdentifierType> flags () const { return m_flags; }
private:
  QFlags<QSqlDriver::IdentifierType> m_flags;
};

//  Wrapper class for enum QSqlDriver::IdentifierType
class QSqlDriver_IdentifierType_Enum : public QSqlDriver_IdentifierType_Enums {
public:
  QSqlDriver_IdentifierType_Enum () { }
  QSqlDriver_IdentifierType_Enum (enum QSqlDriver::IdentifierType v) : QSqlDriver_IdentifierType_Enums (v) { }
  enum QSqlDriver::IdentifierType value () const { return (enum QSqlDriver::IdentifierType) flags ().operator int (); }
};

//  Converter for QFlags<enum QSqlDriver::IdentifierType>
template <>
struct Converter<QFlags<enum QSqlDriver::IdentifierType> >
{
public:
  typedef QFlags<enum QSqlDriver::IdentifierType> source_type;
  typedef QSqlDriver_IdentifierType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSqlDriver::IdentifierType
template <>
struct Converter<enum QSqlDriver::IdentifierType>
{
public:
  typedef enum QSqlDriver::IdentifierType source_type;
  typedef QSqlDriver_IdentifierType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSqlDriver::StatementType>
class QSqlDriver_StatementType_Enums : public QFlags<enum QSqlDriver::StatementType> {
public:
  QSqlDriver_StatementType_Enums () : m_flags () { }
  QSqlDriver_StatementType_Enums (enum QSqlDriver::StatementType v) : m_flags (v) { }
  QSqlDriver_StatementType_Enums (const QFlags<enum QSqlDriver::StatementType> &v) : m_flags (v) { }
  QFlags<enum QSqlDriver::StatementType> flags () const { return m_flags; }
private:
  QFlags<QSqlDriver::StatementType> m_flags;
};

//  Wrapper class for enum QSqlDriver::StatementType
class QSqlDriver_StatementType_Enum : public QSqlDriver_StatementType_Enums {
public:
  QSqlDriver_StatementType_Enum () { }
  QSqlDriver_StatementType_Enum (enum QSqlDriver::StatementType v) : QSqlDriver_StatementType_Enums (v) { }
  enum QSqlDriver::StatementType value () const { return (enum QSqlDriver::StatementType) flags ().operator int (); }
};

//  Converter for QFlags<enum QSqlDriver::StatementType>
template <>
struct Converter<QFlags<enum QSqlDriver::StatementType> >
{
public:
  typedef QFlags<enum QSqlDriver::StatementType> source_type;
  typedef QSqlDriver_StatementType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSqlDriver::StatementType
template <>
struct Converter<enum QSqlDriver::StatementType>
{
public:
  typedef enum QSqlDriver::StatementType source_type;
  typedef QSqlDriver_StatementType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ConnectionType>
class Qt_ConnectionType_Enums : public QFlags<enum Qt::ConnectionType> {
public:
  Qt_ConnectionType_Enums () : m_flags () { }
  Qt_ConnectionType_Enums (enum Qt::ConnectionType v) : m_flags (v) { }
  Qt_ConnectionType_Enums (const QFlags<enum Qt::ConnectionType> &v) : m_flags (v) { }
  QFlags<enum Qt::ConnectionType> flags () const { return m_flags; }
private:
  QFlags<Qt::ConnectionType> m_flags;
};

//  Wrapper class for enum Qt::ConnectionType
class Qt_ConnectionType_Enum : public Qt_ConnectionType_Enums {
public:
  Qt_ConnectionType_Enum () { }
  Qt_ConnectionType_Enum (enum Qt::ConnectionType v) : Qt_ConnectionType_Enums (v) { }
  enum Qt::ConnectionType value () const { return (enum Qt::ConnectionType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ConnectionType>
template <>
struct Converter<QFlags<enum Qt::ConnectionType> >
{
public:
  typedef QFlags<enum Qt::ConnectionType> source_type;
  typedef Qt_ConnectionType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ConnectionType
template <>
struct Converter<enum Qt::ConnectionType>
{
public:
  typedef enum Qt::ConnectionType source_type;
  typedef Qt_ConnectionType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
