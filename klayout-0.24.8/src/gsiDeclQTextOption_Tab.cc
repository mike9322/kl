
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQTextOption_Tab.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQTextOption_Tab_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QTextOption::Tab

//  Constructor QTextOption::Tab::Tab()


static void _init_ctor_QTextOption_Tab_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QTextOption::Tab *> ();
}

static void _call_ctor_QTextOption_Tab_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QTextOption::Tab *> (new QTextOption::Tab ());
}

static qt_gsi::GenericStaticMethod *_create_ctor_QTextOption_Tab_0 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QTextOption::Tab::Tab()\nThis method creates an object of class QTextOption::Tab.", &_init_ctor_QTextOption_Tab_0, &_call_ctor_QTextOption_Tab_0);
}

// bool QTextOption::Tab::operator!=(const QTextOption::Tab &other)


static void _init_f_operator_excl__eq__c2843 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QTextOption::Tab & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_operator_excl__eq__c2843 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QTextOption::Tab &arg1 = args.read<const QTextOption::Tab & > ();
  ret.write<bool > ((bool)((QTextOption::Tab *)cls)->operator!= (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_excl__eq__c2843 ()
{
  return new qt_gsi::GenericMethod ("!=", "@brief Method bool QTextOption::Tab::operator!=(const QTextOption::Tab &other)\n", true, &_init_f_operator_excl__eq__c2843, &_call_f_operator_excl__eq__c2843);
}

// bool QTextOption::Tab::operator==(const QTextOption::Tab &other)


static void _init_f_operator_eq__eq__c2843 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QTextOption::Tab & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_operator_eq__eq__c2843 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QTextOption::Tab &arg1 = args.read<const QTextOption::Tab & > ();
  ret.write<bool > ((bool)((QTextOption::Tab *)cls)->operator== (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_eq__eq__c2843 ()
{
  return new qt_gsi::GenericMethod ("==", "@brief Method bool QTextOption::Tab::operator==(const QTextOption::Tab &other)\n", true, &_init_f_operator_eq__eq__c2843, &_call_f_operator_eq__eq__c2843);
}


namespace gsi
{
gsi::Class<QTextOption::Tab> decl_QTextOption_Tab ("QTextOption_Tab",
  gsi::Methods(_create_ctor_QTextOption_Tab_0 ()) +
  gsi::Methods(_create_f_operator_excl__eq__c2843 ()) +
  gsi::Methods(_create_f_operator_eq__eq__c2843 ()),
  "@qt\n@brief Binding of QTextOption::Tab");

gsi::ClassExt<QTextOption> decl_QTextOption_Tab_as_child (decl_QTextOption_Tab, "Tab");
}

