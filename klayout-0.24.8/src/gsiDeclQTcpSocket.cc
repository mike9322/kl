
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQTcpSocket.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtNetwork.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQTcpSocket_EventAdaptor.h"
#include "gsiDeclQTcpSocket_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QTcpSocket

//  get static meta object

static void _init_smo (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<const QMetaObject &> ();
}

static void _call_smo (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<const QMetaObject &> (QTcpSocket::staticMetaObject);
}

static qt_gsi::GenericStaticMethod *_create_smo ()
{
  return new qt_gsi::GenericStaticMethod ("staticMetaObject", "@brief Obtains the static MetaObject for this class.", &_init_smo, &_call_smo);
}

//  Constructor QTcpSocket::QTcpSocket(QObject *parent)


static void _init_ctor_QTcpSocket_1302 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("parent", true, "0");
  decl->add_arg<QObject * > (argspec_0);
  decl->set_return_new<QTcpSocket *> ();
}

static void _call_ctor_QTcpSocket_1302 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QObject *arg1 = args ? args.read<QObject * > () : (QObject *)(0);
  ret.write<QTcpSocket *> (new QTcpSocket (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QTcpSocket_1302 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QTcpSocket::QTcpSocket(QObject *parent)\nThis method creates an object of class QTcpSocket.", &_init_ctor_QTcpSocket_1302, &_call_ctor_QTcpSocket_1302);
}

// static QString QTcpSocket::tr(const char *s, const char *c)


static void _init_f_tr_3354 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c", true, "0");
  decl->add_arg<const char * > (argspec_1);
  decl->set_return<QString > ();
}

static void _call_f_tr_3354 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args ? args.read<const char * > () : (const char *)(0);
  ret.write<QString > ((QString)QTcpSocket::tr (arg1, arg2));
}

static qt_gsi::GenericStaticMethod *_create_f_tr_3354 ()
{
  return new qt_gsi::GenericStaticMethod ("tr", "@brief Static method QString QTcpSocket::tr(const char *s, const char *c)\nThis method is static and can be called without an instance.", &_init_f_tr_3354, &_call_f_tr_3354);
}

// static QString QTcpSocket::tr(const char *s, const char *c, int n)


static void _init_f_tr_4013 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c");
  decl->add_arg<const char * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("n");
  decl->add_arg<int > (argspec_2);
  decl->set_return<QString > ();
}

static void _call_f_tr_4013 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args.read<const char * > ();
  int arg3 = args.read<int > ();
  ret.write<QString > ((QString)QTcpSocket::tr (arg1, arg2, arg3));
}

static qt_gsi::GenericStaticMethod *_create_f_tr_4013 ()
{
  return new qt_gsi::GenericStaticMethod ("tr", "@brief Static method QString QTcpSocket::tr(const char *s, const char *c, int n)\nThis method is static and can be called without an instance.", &_init_f_tr_4013, &_call_f_tr_4013);
}

// static QString QTcpSocket::trUtf8(const char *s, const char *c)


static void _init_f_trUtf8_3354 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c", true, "0");
  decl->add_arg<const char * > (argspec_1);
  decl->set_return<QString > ();
}

static void _call_f_trUtf8_3354 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args ? args.read<const char * > () : (const char *)(0);
  ret.write<QString > ((QString)QTcpSocket::trUtf8 (arg1, arg2));
}

static qt_gsi::GenericStaticMethod *_create_f_trUtf8_3354 ()
{
  return new qt_gsi::GenericStaticMethod ("trUtf8", "@brief Static method QString QTcpSocket::trUtf8(const char *s, const char *c)\nThis method is static and can be called without an instance.", &_init_f_trUtf8_3354, &_call_f_trUtf8_3354);
}

// static QString QTcpSocket::trUtf8(const char *s, const char *c, int n)


static void _init_f_trUtf8_4013 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c");
  decl->add_arg<const char * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("n");
  decl->add_arg<int > (argspec_2);
  decl->set_return<QString > ();
}

static void _call_f_trUtf8_4013 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args.read<const char * > ();
  int arg3 = args.read<int > ();
  ret.write<QString > ((QString)QTcpSocket::trUtf8 (arg1, arg2, arg3));
}

static qt_gsi::GenericStaticMethod *_create_f_trUtf8_4013 ()
{
  return new qt_gsi::GenericStaticMethod ("trUtf8", "@brief Static method QString QTcpSocket::trUtf8(const char *s, const char *c, int n)\nThis method is static and can be called without an instance.", &_init_f_trUtf8_4013, &_call_f_trUtf8_4013);
}

static qt_gsi::QObjectConnector<QTcpSocket, QTcpSocket_EventAdaptor> ea_QTcpSocket;


namespace gsi
{
extern gsi::Class<QAbstractSocket> decl_QAbstractSocket;

gsi::Class<QTcpSocket> decl_QTcpSocket (ea_QTcpSocket, decl_QAbstractSocket, "QTcpSocket",
  gsi::Methods(_create_ctor_QTcpSocket_1302 ()) +
  gsi::Methods(_create_smo ()) +
  qt_gsi::qt_signal<QTcpSocket, QTcpSocket_EventAdaptor> ("aboutToClose", &QTcpSocket_EventAdaptor::aboutToClose_e_0, "@brief Signal declaration for QTcpSocket::aboutToClose()\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QTcpSocket, QTcpSocket_EventAdaptor, qint64> ("bytesWritten", &QTcpSocket_EventAdaptor::bytesWritten_e_986, gsi::arg("bytes"), "@brief Signal declaration for QTcpSocket::bytesWritten(qint64 bytes)\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QTcpSocket, QTcpSocket_EventAdaptor> ("connected", &QTcpSocket_EventAdaptor::connected_e_0, "@brief Signal declaration for QTcpSocket::connected()\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QTcpSocket, QTcpSocket_EventAdaptor, QObject *> ("destroyed", &QTcpSocket_EventAdaptor::destroyed_e_1302, gsi::arg("arg1"), "@brief Signal declaration for QTcpSocket::destroyed(QObject *)\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QTcpSocket, QTcpSocket_EventAdaptor> ("disconnected", &QTcpSocket_EventAdaptor::disconnected_e_0, "@brief Signal declaration for QTcpSocket::disconnected()\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QTcpSocket, QTcpSocket_EventAdaptor, const qt_gsi::Converter<QAbstractSocket::SocketError>::target_type &> ("error", &QTcpSocket_EventAdaptor::error_e_3209, gsi::arg("arg1"), "@brief Signal declaration for QTcpSocket::error(QAbstractSocket::SocketError)\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QTcpSocket, QTcpSocket_EventAdaptor> ("hostFound", &QTcpSocket_EventAdaptor::hostFound_e_0, "@brief Signal declaration for QTcpSocket::hostFound()\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QTcpSocket, QTcpSocket_EventAdaptor, const QNetworkProxy &, QAuthenticator *> ("proxyAuthenticationRequired", &QTcpSocket_EventAdaptor::proxyAuthenticationRequired_e_4652, gsi::arg("proxy"), gsi::arg("authenticator"), "@brief Signal declaration for QTcpSocket::proxyAuthenticationRequired(const QNetworkProxy &proxy, QAuthenticator *authenticator)\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QTcpSocket, QTcpSocket_EventAdaptor> ("readChannelFinished", &QTcpSocket_EventAdaptor::readChannelFinished_e_0, "@brief Signal declaration for QTcpSocket::readChannelFinished()\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QTcpSocket, QTcpSocket_EventAdaptor> ("readyRead", &QTcpSocket_EventAdaptor::readyRead_e_0, "@brief Signal declaration for QTcpSocket::readyRead()\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QTcpSocket, QTcpSocket_EventAdaptor, const qt_gsi::Converter<QAbstractSocket::SocketState>::target_type &> ("stateChanged", &QTcpSocket_EventAdaptor::stateChanged_e_3200, gsi::arg("arg1"), "@brief Signal declaration for QTcpSocket::stateChanged(QAbstractSocket::SocketState)\nYou can bind a procedure to this signal.") +
  gsi::Methods(_create_f_tr_3354 ()) +
  gsi::Methods(_create_f_tr_4013 ()) +
  gsi::Methods(_create_f_trUtf8_3354 ()) +
  gsi::Methods(_create_f_trUtf8_4013 ()),
  "@qt\n@brief Binding of QTcpSocket");

}

