
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQDynamicPropertyChangeEvent.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtCore.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQDynamicPropertyChangeEvent_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QDynamicPropertyChangeEvent

// QByteArray QDynamicPropertyChangeEvent::propertyName()


static void _init_f_propertyName_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QByteArray > ();
}

static void _call_f_propertyName_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QByteArray > ((QByteArray)((QDynamicPropertyChangeEvent *)cls)->propertyName ());
}

static qt_gsi::GenericMethod *_create_f_propertyName_c0 ()
{
  return new qt_gsi::GenericMethod ("propertyName", "@brief Method QByteArray QDynamicPropertyChangeEvent::propertyName()\n", true, &_init_f_propertyName_c0, &_call_f_propertyName_c0);
}

namespace gsi
{
extern gsi::Class<QEvent> decl_QEvent;

gsi::Class<QDynamicPropertyChangeEvent> decl_QDynamicPropertyChangeEvent (decl_QEvent, "QDynamicPropertyChangeEvent_Native",
  gsi::Methods(_create_f_propertyName_c0 ()),
  "@hide\n@alias QDynamicPropertyChangeEvent");
}


class QDynamicPropertyChangeEvent_Adaptor : public QDynamicPropertyChangeEvent, public qt_gsi::QtObjectBase
{
public:

  virtual ~QDynamicPropertyChangeEvent_Adaptor();

  //  [adaptor ctor] QDynamicPropertyChangeEvent::QDynamicPropertyChangeEvent(const QByteArray &name)
  QDynamicPropertyChangeEvent_Adaptor(const QByteArray &name) : QDynamicPropertyChangeEvent(name)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  
};

QDynamicPropertyChangeEvent_Adaptor::~QDynamicPropertyChangeEvent_Adaptor() { }

//  Constructor QDynamicPropertyChangeEvent::QDynamicPropertyChangeEvent(const QByteArray &name) (adaptor class)

static void _init_ctor_QDynamicPropertyChangeEvent_Adaptor_2309 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QByteArray & > (argspec_0);
  decl->set_return_new<QDynamicPropertyChangeEvent_Adaptor *> ();
}

static void _call_ctor_QDynamicPropertyChangeEvent_Adaptor_2309 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QByteArray &arg1 = args.read<const QByteArray & > ();
  ret.write<QDynamicPropertyChangeEvent_Adaptor *> (new QDynamicPropertyChangeEvent_Adaptor (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QDynamicPropertyChangeEvent_Adaptor_2309 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QDynamicPropertyChangeEvent::QDynamicPropertyChangeEvent(const QByteArray &name)\nThis method creates an object of class QDynamicPropertyChangeEvent.", &_init_ctor_QDynamicPropertyChangeEvent_Adaptor_2309, &_call_ctor_QDynamicPropertyChangeEvent_Adaptor_2309);
}

namespace gsi
{

extern gsi::Class<QDynamicPropertyChangeEvent> decl_QDynamicPropertyChangeEvent;

gsi::Class<QDynamicPropertyChangeEvent_Adaptor> decl_QDynamicPropertyChangeEvent_Adaptor (decl_QDynamicPropertyChangeEvent, "QDynamicPropertyChangeEvent",
  gsi::Methods(_create_ctor_QDynamicPropertyChangeEvent_Adaptor_2309 ()),
  "@qt\n@brief Binding of QDynamicPropertyChangeEvent");

}

