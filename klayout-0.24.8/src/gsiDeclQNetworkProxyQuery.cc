
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQNetworkProxyQuery.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtNetwork.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQNetworkProxyQuery_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QNetworkProxyQuery

//  Constructor QNetworkProxyQuery::QNetworkProxyQuery()


static void _init_ctor_QNetworkProxyQuery_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QNetworkProxyQuery *> ();
}

static void _call_ctor_QNetworkProxyQuery_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QNetworkProxyQuery *> (new QNetworkProxyQuery ());
}

static qt_gsi::GenericStaticMethod *_create_ctor_QNetworkProxyQuery_0 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNetworkProxyQuery::QNetworkProxyQuery()\nThis method creates an object of class QNetworkProxyQuery.", &_init_ctor_QNetworkProxyQuery_0, &_call_ctor_QNetworkProxyQuery_0);
}

//  Constructor QNetworkProxyQuery::QNetworkProxyQuery(const QUrl &requestUrl, QNetworkProxyQuery::QueryType queryType)


static void _init_ctor_QNetworkProxyQuery_5004 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("requestUrl");
  decl->add_arg<const QUrl & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("queryType", true, "QNetworkProxyQuery::UrlRequest");
  decl->add_arg<const qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type & > (argspec_1);
  decl->set_return_new<QNetworkProxyQuery *> ();
}

static void _call_ctor_QNetworkProxyQuery_5004 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QUrl &arg1 = args.read<const QUrl & > ();
  tl::Heap heap;
  const qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type & arg2 = args ? args.read<const qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type & > () : (const qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type &)(qt_gsi::CppToQtReadAdaptor<QNetworkProxyQuery::QueryType>(heap, QNetworkProxyQuery::UrlRequest));
  ret.write<QNetworkProxyQuery *> (new QNetworkProxyQuery (arg1, qt_gsi::QtToCppAdaptor<QNetworkProxyQuery::QueryType>(arg2).cref()));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QNetworkProxyQuery_5004 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNetworkProxyQuery::QNetworkProxyQuery(const QUrl &requestUrl, QNetworkProxyQuery::QueryType queryType)\nThis method creates an object of class QNetworkProxyQuery.", &_init_ctor_QNetworkProxyQuery_5004, &_call_ctor_QNetworkProxyQuery_5004);
}

//  Constructor QNetworkProxyQuery::QNetworkProxyQuery(const QString &hostname, int port, const QString &protocolTag, QNetworkProxyQuery::QueryType queryType)


static void _init_ctor_QNetworkProxyQuery_7904 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("hostname");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("port");
  decl->add_arg<int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("protocolTag", true, "QString()");
  decl->add_arg<const QString & > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("queryType", true, "QNetworkProxyQuery::TcpSocket");
  decl->add_arg<const qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type & > (argspec_3);
  decl->set_return_new<QNetworkProxyQuery *> ();
}

static void _call_ctor_QNetworkProxyQuery_7904 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  int arg2 = args.read<int > ();
  const QString &arg3 = args ? args.read<const QString & > () : (const QString &)(QString());
  tl::Heap heap;
  const qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type & arg4 = args ? args.read<const qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type & > () : (const qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type &)(qt_gsi::CppToQtReadAdaptor<QNetworkProxyQuery::QueryType>(heap, QNetworkProxyQuery::TcpSocket));
  ret.write<QNetworkProxyQuery *> (new QNetworkProxyQuery (arg1, arg2, arg3, qt_gsi::QtToCppAdaptor<QNetworkProxyQuery::QueryType>(arg4).cref()));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QNetworkProxyQuery_7904 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNetworkProxyQuery::QNetworkProxyQuery(const QString &hostname, int port, const QString &protocolTag, QNetworkProxyQuery::QueryType queryType)\nThis method creates an object of class QNetworkProxyQuery.", &_init_ctor_QNetworkProxyQuery_7904, &_call_ctor_QNetworkProxyQuery_7904);
}

//  Constructor QNetworkProxyQuery::QNetworkProxyQuery(quint16 bindPort, const QString &protocolTag, QNetworkProxyQuery::QueryType queryType)


static void _init_ctor_QNetworkProxyQuery_6320 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("bindPort");
  decl->add_arg<quint16 > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("protocolTag", true, "QString()");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("queryType", true, "QNetworkProxyQuery::TcpServer");
  decl->add_arg<const qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type & > (argspec_2);
  decl->set_return_new<QNetworkProxyQuery *> ();
}

static void _call_ctor_QNetworkProxyQuery_6320 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  quint16 arg1 = args.read<quint16 > ();
  const QString &arg2 = args ? args.read<const QString & > () : (const QString &)(QString());
  tl::Heap heap;
  const qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type & arg3 = args ? args.read<const qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type & > () : (const qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type &)(qt_gsi::CppToQtReadAdaptor<QNetworkProxyQuery::QueryType>(heap, QNetworkProxyQuery::TcpServer));
  ret.write<QNetworkProxyQuery *> (new QNetworkProxyQuery (arg1, arg2, qt_gsi::QtToCppAdaptor<QNetworkProxyQuery::QueryType>(arg3).cref()));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QNetworkProxyQuery_6320 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNetworkProxyQuery::QNetworkProxyQuery(quint16 bindPort, const QString &protocolTag, QNetworkProxyQuery::QueryType queryType)\nThis method creates an object of class QNetworkProxyQuery.", &_init_ctor_QNetworkProxyQuery_6320, &_call_ctor_QNetworkProxyQuery_6320);
}

//  Constructor QNetworkProxyQuery::QNetworkProxyQuery(const QNetworkProxyQuery &other)


static void _init_ctor_QNetworkProxyQuery_3220 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkProxyQuery & > (argspec_0);
  decl->set_return_new<QNetworkProxyQuery *> ();
}

static void _call_ctor_QNetworkProxyQuery_3220 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkProxyQuery &arg1 = args.read<const QNetworkProxyQuery & > ();
  ret.write<QNetworkProxyQuery *> (new QNetworkProxyQuery (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QNetworkProxyQuery_3220 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNetworkProxyQuery::QNetworkProxyQuery(const QNetworkProxyQuery &other)\nThis method creates an object of class QNetworkProxyQuery.", &_init_ctor_QNetworkProxyQuery_3220, &_call_ctor_QNetworkProxyQuery_3220);
}

// int QNetworkProxyQuery::localPort()


static void _init_f_localPort_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_localPort_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QNetworkProxyQuery *)cls)->localPort ());
}

static qt_gsi::GenericMethod *_create_f_localPort_c0 ()
{
  return new qt_gsi::GenericMethod (":localPort", "@brief Method int QNetworkProxyQuery::localPort()\n", true, &_init_f_localPort_c0, &_call_f_localPort_c0);
}

// bool QNetworkProxyQuery::operator!=(const QNetworkProxyQuery &other)


static void _init_f_operator_excl__eq__c3220u1 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkProxyQuery & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_operator_excl__eq__c3220u1 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkProxyQuery &arg1 = args.read<const QNetworkProxyQuery & > ();
  ret.write<bool > ((bool)((QNetworkProxyQuery *)cls)->operator!= (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_excl__eq__c3220u1 ()
{
  return new qt_gsi::GenericMethod ("!=", "@brief Method bool QNetworkProxyQuery::operator!=(const QNetworkProxyQuery &other)\n", true, &_init_f_operator_excl__eq__c3220u1, &_call_f_operator_excl__eq__c3220u1);
}

// QNetworkProxyQuery &QNetworkProxyQuery::operator=(const QNetworkProxyQuery &other)


static void _init_f_operator_eq__3220 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkProxyQuery & > (argspec_0);
  decl->set_return<QNetworkProxyQuery & > ();
}

static void _call_f_operator_eq__3220 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkProxyQuery &arg1 = args.read<const QNetworkProxyQuery & > ();
  ret.write<QNetworkProxyQuery & > ((QNetworkProxyQuery &)((QNetworkProxyQuery *)cls)->operator= (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_eq__3220 ()
{
  return new qt_gsi::GenericMethod ("assign", "@brief Method QNetworkProxyQuery &QNetworkProxyQuery::operator=(const QNetworkProxyQuery &other)\n", false, &_init_f_operator_eq__3220, &_call_f_operator_eq__3220);
}

// bool QNetworkProxyQuery::operator==(const QNetworkProxyQuery &other)


static void _init_f_operator_eq__eq__c3220u1 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkProxyQuery & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_operator_eq__eq__c3220u1 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkProxyQuery &arg1 = args.read<const QNetworkProxyQuery & > ();
  ret.write<bool > ((bool)((QNetworkProxyQuery *)cls)->operator== (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_eq__eq__c3220u1 ()
{
  return new qt_gsi::GenericMethod ("==", "@brief Method bool QNetworkProxyQuery::operator==(const QNetworkProxyQuery &other)\n", true, &_init_f_operator_eq__eq__c3220u1, &_call_f_operator_eq__eq__c3220u1);
}

// QString QNetworkProxyQuery::peerHostName()


static void _init_f_peerHostName_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_peerHostName_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QNetworkProxyQuery *)cls)->peerHostName ());
}

static qt_gsi::GenericMethod *_create_f_peerHostName_c0 ()
{
  return new qt_gsi::GenericMethod (":peerHostName", "@brief Method QString QNetworkProxyQuery::peerHostName()\n", true, &_init_f_peerHostName_c0, &_call_f_peerHostName_c0);
}

// int QNetworkProxyQuery::peerPort()


static void _init_f_peerPort_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_peerPort_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QNetworkProxyQuery *)cls)->peerPort ());
}

static qt_gsi::GenericMethod *_create_f_peerPort_c0 ()
{
  return new qt_gsi::GenericMethod (":peerPort", "@brief Method int QNetworkProxyQuery::peerPort()\n", true, &_init_f_peerPort_c0, &_call_f_peerPort_c0);
}

// QString QNetworkProxyQuery::protocolTag()


static void _init_f_protocolTag_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_protocolTag_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QNetworkProxyQuery *)cls)->protocolTag ());
}

static qt_gsi::GenericMethod *_create_f_protocolTag_c0 ()
{
  return new qt_gsi::GenericMethod (":protocolTag", "@brief Method QString QNetworkProxyQuery::protocolTag()\n", true, &_init_f_protocolTag_c0, &_call_f_protocolTag_c0);
}

// QNetworkProxyQuery::QueryType QNetworkProxyQuery::queryType()


static void _init_f_queryType_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type > ();
}

static void _call_f_queryType_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type > ((qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type)qt_gsi::CppToQtAdaptor<QNetworkProxyQuery::QueryType>(((QNetworkProxyQuery *)cls)->queryType ()));
}

static qt_gsi::GenericMethod *_create_f_queryType_c0 ()
{
  return new qt_gsi::GenericMethod (":queryType", "@brief Method QNetworkProxyQuery::QueryType QNetworkProxyQuery::queryType()\n", true, &_init_f_queryType_c0, &_call_f_queryType_c0);
}

// void QNetworkProxyQuery::setLocalPort(int port)


static void _init_f_setLocalPort_767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("port");
  decl->add_arg<int > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setLocalPort_767 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ((QNetworkProxyQuery *)cls)->setLocalPort (arg1);
}

static qt_gsi::GenericMethod *_create_f_setLocalPort_767 ()
{
  return new qt_gsi::GenericMethod ("setLocalPort|localPort=", "@brief Method void QNetworkProxyQuery::setLocalPort(int port)\n", false, &_init_f_setLocalPort_767, &_call_f_setLocalPort_767);
}

// void QNetworkProxyQuery::setPeerHostName(const QString &hostname)


static void _init_f_setPeerHostName_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("hostname");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPeerHostName_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QNetworkProxyQuery *)cls)->setPeerHostName (arg1);
}

static qt_gsi::GenericMethod *_create_f_setPeerHostName_2025 ()
{
  return new qt_gsi::GenericMethod ("setPeerHostName|peerHostName=", "@brief Method void QNetworkProxyQuery::setPeerHostName(const QString &hostname)\n", false, &_init_f_setPeerHostName_2025, &_call_f_setPeerHostName_2025);
}

// void QNetworkProxyQuery::setPeerPort(int port)


static void _init_f_setPeerPort_767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("port");
  decl->add_arg<int > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPeerPort_767 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ((QNetworkProxyQuery *)cls)->setPeerPort (arg1);
}

static qt_gsi::GenericMethod *_create_f_setPeerPort_767 ()
{
  return new qt_gsi::GenericMethod ("setPeerPort|peerPort=", "@brief Method void QNetworkProxyQuery::setPeerPort(int port)\n", false, &_init_f_setPeerPort_767, &_call_f_setPeerPort_767);
}

// void QNetworkProxyQuery::setProtocolTag(const QString &protocolTag)


static void _init_f_setProtocolTag_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("protocolTag");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setProtocolTag_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QNetworkProxyQuery *)cls)->setProtocolTag (arg1);
}

static qt_gsi::GenericMethod *_create_f_setProtocolTag_2025 ()
{
  return new qt_gsi::GenericMethod ("setProtocolTag|protocolTag=", "@brief Method void QNetworkProxyQuery::setProtocolTag(const QString &protocolTag)\n", false, &_init_f_setProtocolTag_2025, &_call_f_setProtocolTag_2025);
}

// void QNetworkProxyQuery::setQueryType(QNetworkProxyQuery::QueryType type)


static void _init_f_setQueryType_3411 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("type");
  decl->add_arg<const qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setQueryType_3411 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type & arg1 = args.read<const qt_gsi::Converter<QNetworkProxyQuery::QueryType>::target_type & > ();
  ((QNetworkProxyQuery *)cls)->setQueryType (qt_gsi::QtToCppAdaptor<QNetworkProxyQuery::QueryType>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setQueryType_3411 ()
{
  return new qt_gsi::GenericMethod ("setQueryType|queryType=", "@brief Method void QNetworkProxyQuery::setQueryType(QNetworkProxyQuery::QueryType type)\n", false, &_init_f_setQueryType_3411, &_call_f_setQueryType_3411);
}

// void QNetworkProxyQuery::setUrl(const QUrl &url)


static void _init_f_setUrl_1701 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("url");
  decl->add_arg<const QUrl & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setUrl_1701 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QUrl &arg1 = args.read<const QUrl & > ();
  ((QNetworkProxyQuery *)cls)->setUrl (arg1);
}

static qt_gsi::GenericMethod *_create_f_setUrl_1701 ()
{
  return new qt_gsi::GenericMethod ("setUrl|url=", "@brief Method void QNetworkProxyQuery::setUrl(const QUrl &url)\n", false, &_init_f_setUrl_1701, &_call_f_setUrl_1701);
}

// QUrl QNetworkProxyQuery::url()


static void _init_f_url_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QUrl > ();
}

static void _call_f_url_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QUrl > ((QUrl)((QNetworkProxyQuery *)cls)->url ());
}

static qt_gsi::GenericMethod *_create_f_url_c0 ()
{
  return new qt_gsi::GenericMethod (":url", "@brief Method QUrl QNetworkProxyQuery::url()\n", true, &_init_f_url_c0, &_call_f_url_c0);
}


namespace gsi
{
gsi::Class<QNetworkProxyQuery> decl_QNetworkProxyQuery ("QNetworkProxyQuery",
  gsi::Methods(_create_ctor_QNetworkProxyQuery_0 ()) +
  gsi::Methods(_create_ctor_QNetworkProxyQuery_5004 ()) +
  gsi::Methods(_create_ctor_QNetworkProxyQuery_7904 ()) +
  gsi::Methods(_create_ctor_QNetworkProxyQuery_6320 ()) +
  gsi::Methods(_create_ctor_QNetworkProxyQuery_3220 ()) +
  gsi::Methods(_create_f_localPort_c0 ()) +
  gsi::Methods(_create_f_operator_excl__eq__c3220u1 ()) +
  gsi::Methods(_create_f_operator_eq__3220 ()) +
  gsi::Methods(_create_f_operator_eq__eq__c3220u1 ()) +
  gsi::Methods(_create_f_peerHostName_c0 ()) +
  gsi::Methods(_create_f_peerPort_c0 ()) +
  gsi::Methods(_create_f_protocolTag_c0 ()) +
  gsi::Methods(_create_f_queryType_c0 ()) +
  gsi::Methods(_create_f_setLocalPort_767 ()) +
  gsi::Methods(_create_f_setPeerHostName_2025 ()) +
  gsi::Methods(_create_f_setPeerPort_767 ()) +
  gsi::Methods(_create_f_setProtocolTag_2025 ()) +
  gsi::Methods(_create_f_setQueryType_3411 ()) +
  gsi::Methods(_create_f_setUrl_1701 ()) +
  gsi::Methods(_create_f_url_c0 ()),
  "@qt\n@brief Binding of QNetworkProxyQuery");

}


//  Implementation of the enum wrapper class for QNetworkProxyQuery::QueryType
namespace qt_gsi
{

static QNetworkProxyQuery_QueryType_Enum *c_1_QNetworkProxyQuery_QueryType_Enum () { return new QNetworkProxyQuery_QueryType_Enum (QNetworkProxyQuery::TcpSocket); }
static QNetworkProxyQuery_QueryType_Enum *c_2_QNetworkProxyQuery_QueryType_Enum () { return new QNetworkProxyQuery_QueryType_Enum (QNetworkProxyQuery::UdpSocket); }
static QNetworkProxyQuery_QueryType_Enum *c_3_QNetworkProxyQuery_QueryType_Enum () { return new QNetworkProxyQuery_QueryType_Enum (QNetworkProxyQuery::TcpServer); }
static QNetworkProxyQuery_QueryType_Enum *c_4_QNetworkProxyQuery_QueryType_Enum () { return new QNetworkProxyQuery_QueryType_Enum (QNetworkProxyQuery::UrlRequest); }

static gsi::Methods mkdefs_QNetworkProxyQuery_QueryType () {
  return
    gsi::constant ("TcpSocket", &qt_gsi::c_1_QNetworkProxyQuery_QueryType_Enum, "@brief Enum constant QNetworkProxyQuery::TcpSocket") +
    gsi::constant ("UdpSocket", &qt_gsi::c_2_QNetworkProxyQuery_QueryType_Enum, "@brief Enum constant QNetworkProxyQuery::UdpSocket") +
    gsi::constant ("TcpServer", &qt_gsi::c_3_QNetworkProxyQuery_QueryType_Enum, "@brief Enum constant QNetworkProxyQuery::TcpServer") +
    gsi::constant ("UrlRequest", &qt_gsi::c_4_QNetworkProxyQuery_QueryType_Enum, "@brief Enum constant QNetworkProxyQuery::UrlRequest");
}

static std::string to_s_QNetworkProxyQuery_QueryType_Enum (const QNetworkProxyQuery_QueryType_Enum *e)
{
  if (e->value () == QNetworkProxyQuery::TcpSocket) { return tl::sprintf ("TcpSocket (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkProxyQuery::UdpSocket) { return tl::sprintf ("UdpSocket (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkProxyQuery::TcpServer) { return tl::sprintf ("TcpServer (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkProxyQuery::UrlRequest) { return tl::sprintf ("UrlRequest (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QNetworkProxyQuery_QueryType_Enum (const QNetworkProxyQuery_QueryType_Enum *e)
{
  return (unsigned int) e->value ();
}

static QNetworkProxyQuery_QueryType_Enum *from_i_QNetworkProxyQuery_QueryType_Enum (unsigned int i)
{
  return new QNetworkProxyQuery_QueryType_Enum ((QNetworkProxyQuery::QueryType) i);
}

static bool equalQNetworkProxyQuery_QueryType_Enum (const QNetworkProxyQuery_QueryType_Enum *e, QNetworkProxyQuery_QueryType_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QNetworkProxyQuery_QueryType_Enum (const QNetworkProxyQuery_QueryType_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QNetworkProxyQuery_QueryType_Enums oropQNetworkProxyQuery_QueryType_Enums (const QNetworkProxyQuery_QueryType_Enums *e, const QNetworkProxyQuery_QueryType_Enums &d)
{
  return e->flags () | d.flags ();
}

static QNetworkProxyQuery_QueryType_Enums andopQNetworkProxyQuery_QueryType_Enums (const QNetworkProxyQuery_QueryType_Enums *e, const QNetworkProxyQuery_QueryType_Enums &d)
{
  return e->flags () & d.flags ();
}

static QNetworkProxyQuery_QueryType_Enums xoropQNetworkProxyQuery_QueryType_Enums (const QNetworkProxyQuery_QueryType_Enums *e, const QNetworkProxyQuery_QueryType_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QNetworkProxyQuery_QueryType_Enums (const QNetworkProxyQuery_QueryType_Enums *e)
{
  std::string l;
  if (e->testFlag (QNetworkProxyQuery::TcpSocket)) { if (!l.empty ()) l += "|"; l += "TcpSocket"; }
  if (e->testFlag (QNetworkProxyQuery::UdpSocket)) { if (!l.empty ()) l += "|"; l += "UdpSocket"; }
  if (e->testFlag (QNetworkProxyQuery::TcpServer)) { if (!l.empty ()) l += "|"; l += "TcpServer"; }
  if (e->testFlag (QNetworkProxyQuery::UrlRequest)) { if (!l.empty ()) l += "|"; l += "UrlRequest"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QNetworkProxyQuery_QueryType_Enums (const QNetworkProxyQuery_QueryType_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QNetworkProxyQuery_QueryType_Enums (const QNetworkProxyQuery_QueryType_Enums *e, const QNetworkProxyQuery_QueryType_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QNetworkProxyQuery_QueryType_Enums> decl_QNetworkProxyQuery_QueryType_Enums ("QNetworkProxyQuery_QFlags_QueryType",
  gsi::method_ext ("|", &qt_gsi::oropQNetworkProxyQuery_QueryType_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQNetworkProxyQuery_QueryType_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQNetworkProxyQuery_QueryType_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QNetworkProxyQuery_QueryType_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QNetworkProxyQuery_QueryType_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QNetworkProxyQuery_QueryType_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QNetworkProxyQuery::QueryType> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QNetworkProxyQuery_QueryType_Enum> decl_QNetworkProxyQuery_QueryType_Enum (decl_QNetworkProxyQuery_QueryType_Enums, "QNetworkProxyQuery_QueryType",
  qt_gsi::mkdefs_QNetworkProxyQuery_QueryType () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QNetworkProxyQuery_QueryType_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QNetworkProxyQuery_QueryType_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQNetworkProxyQuery_QueryType_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QNetworkProxyQuery_QueryType_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QNetworkProxyQuery_QueryType_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QNetworkProxyQuery::QueryType enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QNetworkProxyQuery> inject_QNetworkProxyQuery_QueryType_Enum_in_parent (qt_gsi::mkdefs_QNetworkProxyQuery_QueryType ());
static gsi::ClassExt<QNetworkProxyQuery> decl_QNetworkProxyQuery_QueryType_Enum_as_child (decl_QNetworkProxyQuery_QueryType_Enum, "QueryType");

}

