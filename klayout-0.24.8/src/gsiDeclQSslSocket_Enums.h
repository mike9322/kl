
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQSslSocket_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQSslSocket_Enums
#define _HDR_gsiDeclQSslSocket_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QAbstractSocket::SocketError>
class QAbstractSocket_SocketError_Enums : public QFlags<enum QAbstractSocket::SocketError> {
public:
  QAbstractSocket_SocketError_Enums () : m_flags () { }
  QAbstractSocket_SocketError_Enums (enum QAbstractSocket::SocketError v) : m_flags (v) { }
  QAbstractSocket_SocketError_Enums (const QFlags<enum QAbstractSocket::SocketError> &v) : m_flags (v) { }
  QFlags<enum QAbstractSocket::SocketError> flags () const { return m_flags; }
private:
  QFlags<QAbstractSocket::SocketError> m_flags;
};

//  Wrapper class for enum QAbstractSocket::SocketError
class QAbstractSocket_SocketError_Enum : public QAbstractSocket_SocketError_Enums {
public:
  QAbstractSocket_SocketError_Enum () { }
  QAbstractSocket_SocketError_Enum (enum QAbstractSocket::SocketError v) : QAbstractSocket_SocketError_Enums (v) { }
  enum QAbstractSocket::SocketError value () const { return (enum QAbstractSocket::SocketError) flags ().operator int (); }
};

//  Converter for QFlags<enum QAbstractSocket::SocketError>
template <>
struct Converter<QFlags<enum QAbstractSocket::SocketError> >
{
public:
  typedef QFlags<enum QAbstractSocket::SocketError> source_type;
  typedef QAbstractSocket_SocketError_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAbstractSocket::SocketError
template <>
struct Converter<enum QAbstractSocket::SocketError>
{
public:
  typedef enum QAbstractSocket::SocketError source_type;
  typedef QAbstractSocket_SocketError_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAbstractSocket::SocketOption>
class QAbstractSocket_SocketOption_Enums : public QFlags<enum QAbstractSocket::SocketOption> {
public:
  QAbstractSocket_SocketOption_Enums () : m_flags () { }
  QAbstractSocket_SocketOption_Enums (enum QAbstractSocket::SocketOption v) : m_flags (v) { }
  QAbstractSocket_SocketOption_Enums (const QFlags<enum QAbstractSocket::SocketOption> &v) : m_flags (v) { }
  QFlags<enum QAbstractSocket::SocketOption> flags () const { return m_flags; }
private:
  QFlags<QAbstractSocket::SocketOption> m_flags;
};

//  Wrapper class for enum QAbstractSocket::SocketOption
class QAbstractSocket_SocketOption_Enum : public QAbstractSocket_SocketOption_Enums {
public:
  QAbstractSocket_SocketOption_Enum () { }
  QAbstractSocket_SocketOption_Enum (enum QAbstractSocket::SocketOption v) : QAbstractSocket_SocketOption_Enums (v) { }
  enum QAbstractSocket::SocketOption value () const { return (enum QAbstractSocket::SocketOption) flags ().operator int (); }
};

//  Converter for QFlags<enum QAbstractSocket::SocketOption>
template <>
struct Converter<QFlags<enum QAbstractSocket::SocketOption> >
{
public:
  typedef QFlags<enum QAbstractSocket::SocketOption> source_type;
  typedef QAbstractSocket_SocketOption_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAbstractSocket::SocketOption
template <>
struct Converter<enum QAbstractSocket::SocketOption>
{
public:
  typedef enum QAbstractSocket::SocketOption source_type;
  typedef QAbstractSocket_SocketOption_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAbstractSocket::SocketState>
class QAbstractSocket_SocketState_Enums : public QFlags<enum QAbstractSocket::SocketState> {
public:
  QAbstractSocket_SocketState_Enums () : m_flags () { }
  QAbstractSocket_SocketState_Enums (enum QAbstractSocket::SocketState v) : m_flags (v) { }
  QAbstractSocket_SocketState_Enums (const QFlags<enum QAbstractSocket::SocketState> &v) : m_flags (v) { }
  QFlags<enum QAbstractSocket::SocketState> flags () const { return m_flags; }
private:
  QFlags<QAbstractSocket::SocketState> m_flags;
};

//  Wrapper class for enum QAbstractSocket::SocketState
class QAbstractSocket_SocketState_Enum : public QAbstractSocket_SocketState_Enums {
public:
  QAbstractSocket_SocketState_Enum () { }
  QAbstractSocket_SocketState_Enum (enum QAbstractSocket::SocketState v) : QAbstractSocket_SocketState_Enums (v) { }
  enum QAbstractSocket::SocketState value () const { return (enum QAbstractSocket::SocketState) flags ().operator int (); }
};

//  Converter for QFlags<enum QAbstractSocket::SocketState>
template <>
struct Converter<QFlags<enum QAbstractSocket::SocketState> >
{
public:
  typedef QFlags<enum QAbstractSocket::SocketState> source_type;
  typedef QAbstractSocket_SocketState_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAbstractSocket::SocketState
template <>
struct Converter<enum QAbstractSocket::SocketState>
{
public:
  typedef enum QAbstractSocket::SocketState source_type;
  typedef QAbstractSocket_SocketState_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAbstractSocket::SocketType>
class QAbstractSocket_SocketType_Enums : public QFlags<enum QAbstractSocket::SocketType> {
public:
  QAbstractSocket_SocketType_Enums () : m_flags () { }
  QAbstractSocket_SocketType_Enums (enum QAbstractSocket::SocketType v) : m_flags (v) { }
  QAbstractSocket_SocketType_Enums (const QFlags<enum QAbstractSocket::SocketType> &v) : m_flags (v) { }
  QFlags<enum QAbstractSocket::SocketType> flags () const { return m_flags; }
private:
  QFlags<QAbstractSocket::SocketType> m_flags;
};

//  Wrapper class for enum QAbstractSocket::SocketType
class QAbstractSocket_SocketType_Enum : public QAbstractSocket_SocketType_Enums {
public:
  QAbstractSocket_SocketType_Enum () { }
  QAbstractSocket_SocketType_Enum (enum QAbstractSocket::SocketType v) : QAbstractSocket_SocketType_Enums (v) { }
  enum QAbstractSocket::SocketType value () const { return (enum QAbstractSocket::SocketType) flags ().operator int (); }
};

//  Converter for QFlags<enum QAbstractSocket::SocketType>
template <>
struct Converter<QFlags<enum QAbstractSocket::SocketType> >
{
public:
  typedef QFlags<enum QAbstractSocket::SocketType> source_type;
  typedef QAbstractSocket_SocketType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAbstractSocket::SocketType
template <>
struct Converter<enum QAbstractSocket::SocketType>
{
public:
  typedef enum QAbstractSocket::SocketType source_type;
  typedef QAbstractSocket_SocketType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QIODevice::OpenModeFlag>
class QIODevice_OpenModeFlag_Enums : public QFlags<enum QIODevice::OpenModeFlag> {
public:
  QIODevice_OpenModeFlag_Enums () : m_flags () { }
  QIODevice_OpenModeFlag_Enums (enum QIODevice::OpenModeFlag v) : m_flags (v) { }
  QIODevice_OpenModeFlag_Enums (const QFlags<enum QIODevice::OpenModeFlag> &v) : m_flags (v) { }
  QFlags<enum QIODevice::OpenModeFlag> flags () const { return m_flags; }
private:
  QFlags<QIODevice::OpenModeFlag> m_flags;
};

//  Wrapper class for enum QIODevice::OpenModeFlag
class QIODevice_OpenModeFlag_Enum : public QIODevice_OpenModeFlag_Enums {
public:
  QIODevice_OpenModeFlag_Enum () { }
  QIODevice_OpenModeFlag_Enum (enum QIODevice::OpenModeFlag v) : QIODevice_OpenModeFlag_Enums (v) { }
  enum QIODevice::OpenModeFlag value () const { return (enum QIODevice::OpenModeFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum QIODevice::OpenModeFlag>
template <>
struct Converter<QFlags<enum QIODevice::OpenModeFlag> >
{
public:
  typedef QFlags<enum QIODevice::OpenModeFlag> source_type;
  typedef QIODevice_OpenModeFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QIODevice::OpenModeFlag
template <>
struct Converter<enum QIODevice::OpenModeFlag>
{
public:
  typedef enum QIODevice::OpenModeFlag source_type;
  typedef QIODevice_OpenModeFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QRegExp::PatternSyntax>
class QRegExp_PatternSyntax_Enums : public QFlags<enum QRegExp::PatternSyntax> {
public:
  QRegExp_PatternSyntax_Enums () : m_flags () { }
  QRegExp_PatternSyntax_Enums (enum QRegExp::PatternSyntax v) : m_flags (v) { }
  QRegExp_PatternSyntax_Enums (const QFlags<enum QRegExp::PatternSyntax> &v) : m_flags (v) { }
  QFlags<enum QRegExp::PatternSyntax> flags () const { return m_flags; }
private:
  QFlags<QRegExp::PatternSyntax> m_flags;
};

//  Wrapper class for enum QRegExp::PatternSyntax
class QRegExp_PatternSyntax_Enum : public QRegExp_PatternSyntax_Enums {
public:
  QRegExp_PatternSyntax_Enum () { }
  QRegExp_PatternSyntax_Enum (enum QRegExp::PatternSyntax v) : QRegExp_PatternSyntax_Enums (v) { }
  enum QRegExp::PatternSyntax value () const { return (enum QRegExp::PatternSyntax) flags ().operator int (); }
};

//  Converter for QFlags<enum QRegExp::PatternSyntax>
template <>
struct Converter<QFlags<enum QRegExp::PatternSyntax> >
{
public:
  typedef QFlags<enum QRegExp::PatternSyntax> source_type;
  typedef QRegExp_PatternSyntax_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QRegExp::PatternSyntax
template <>
struct Converter<enum QRegExp::PatternSyntax>
{
public:
  typedef enum QRegExp::PatternSyntax source_type;
  typedef QRegExp_PatternSyntax_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSsl::EncodingFormat>
class QSsl_EncodingFormat_Enums : public QFlags<enum QSsl::EncodingFormat> {
public:
  QSsl_EncodingFormat_Enums () : m_flags () { }
  QSsl_EncodingFormat_Enums (enum QSsl::EncodingFormat v) : m_flags (v) { }
  QSsl_EncodingFormat_Enums (const QFlags<enum QSsl::EncodingFormat> &v) : m_flags (v) { }
  QFlags<enum QSsl::EncodingFormat> flags () const { return m_flags; }
private:
  QFlags<QSsl::EncodingFormat> m_flags;
};

//  Wrapper class for enum QSsl::EncodingFormat
class QSsl_EncodingFormat_Enum : public QSsl_EncodingFormat_Enums {
public:
  QSsl_EncodingFormat_Enum () { }
  QSsl_EncodingFormat_Enum (enum QSsl::EncodingFormat v) : QSsl_EncodingFormat_Enums (v) { }
  enum QSsl::EncodingFormat value () const { return (enum QSsl::EncodingFormat) flags ().operator int (); }
};

//  Converter for QFlags<enum QSsl::EncodingFormat>
template <>
struct Converter<QFlags<enum QSsl::EncodingFormat> >
{
public:
  typedef QFlags<enum QSsl::EncodingFormat> source_type;
  typedef QSsl_EncodingFormat_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSsl::EncodingFormat
template <>
struct Converter<enum QSsl::EncodingFormat>
{
public:
  typedef enum QSsl::EncodingFormat source_type;
  typedef QSsl_EncodingFormat_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSsl::KeyAlgorithm>
class QSsl_KeyAlgorithm_Enums : public QFlags<enum QSsl::KeyAlgorithm> {
public:
  QSsl_KeyAlgorithm_Enums () : m_flags () { }
  QSsl_KeyAlgorithm_Enums (enum QSsl::KeyAlgorithm v) : m_flags (v) { }
  QSsl_KeyAlgorithm_Enums (const QFlags<enum QSsl::KeyAlgorithm> &v) : m_flags (v) { }
  QFlags<enum QSsl::KeyAlgorithm> flags () const { return m_flags; }
private:
  QFlags<QSsl::KeyAlgorithm> m_flags;
};

//  Wrapper class for enum QSsl::KeyAlgorithm
class QSsl_KeyAlgorithm_Enum : public QSsl_KeyAlgorithm_Enums {
public:
  QSsl_KeyAlgorithm_Enum () { }
  QSsl_KeyAlgorithm_Enum (enum QSsl::KeyAlgorithm v) : QSsl_KeyAlgorithm_Enums (v) { }
  enum QSsl::KeyAlgorithm value () const { return (enum QSsl::KeyAlgorithm) flags ().operator int (); }
};

//  Converter for QFlags<enum QSsl::KeyAlgorithm>
template <>
struct Converter<QFlags<enum QSsl::KeyAlgorithm> >
{
public:
  typedef QFlags<enum QSsl::KeyAlgorithm> source_type;
  typedef QSsl_KeyAlgorithm_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSsl::KeyAlgorithm
template <>
struct Converter<enum QSsl::KeyAlgorithm>
{
public:
  typedef enum QSsl::KeyAlgorithm source_type;
  typedef QSsl_KeyAlgorithm_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSsl::SslProtocol>
class QSsl_SslProtocol_Enums : public QFlags<enum QSsl::SslProtocol> {
public:
  QSsl_SslProtocol_Enums () : m_flags () { }
  QSsl_SslProtocol_Enums (enum QSsl::SslProtocol v) : m_flags (v) { }
  QSsl_SslProtocol_Enums (const QFlags<enum QSsl::SslProtocol> &v) : m_flags (v) { }
  QFlags<enum QSsl::SslProtocol> flags () const { return m_flags; }
private:
  QFlags<QSsl::SslProtocol> m_flags;
};

//  Wrapper class for enum QSsl::SslProtocol
class QSsl_SslProtocol_Enum : public QSsl_SslProtocol_Enums {
public:
  QSsl_SslProtocol_Enum () { }
  QSsl_SslProtocol_Enum (enum QSsl::SslProtocol v) : QSsl_SslProtocol_Enums (v) { }
  enum QSsl::SslProtocol value () const { return (enum QSsl::SslProtocol) flags ().operator int (); }
};

//  Converter for QFlags<enum QSsl::SslProtocol>
template <>
struct Converter<QFlags<enum QSsl::SslProtocol> >
{
public:
  typedef QFlags<enum QSsl::SslProtocol> source_type;
  typedef QSsl_SslProtocol_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSsl::SslProtocol
template <>
struct Converter<enum QSsl::SslProtocol>
{
public:
  typedef enum QSsl::SslProtocol source_type;
  typedef QSsl_SslProtocol_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSslSocket::PeerVerifyMode>
class QSslSocket_PeerVerifyMode_Enums : public QFlags<enum QSslSocket::PeerVerifyMode> {
public:
  QSslSocket_PeerVerifyMode_Enums () : m_flags () { }
  QSslSocket_PeerVerifyMode_Enums (enum QSslSocket::PeerVerifyMode v) : m_flags (v) { }
  QSslSocket_PeerVerifyMode_Enums (const QFlags<enum QSslSocket::PeerVerifyMode> &v) : m_flags (v) { }
  QFlags<enum QSslSocket::PeerVerifyMode> flags () const { return m_flags; }
private:
  QFlags<QSslSocket::PeerVerifyMode> m_flags;
};

//  Wrapper class for enum QSslSocket::PeerVerifyMode
class QSslSocket_PeerVerifyMode_Enum : public QSslSocket_PeerVerifyMode_Enums {
public:
  QSslSocket_PeerVerifyMode_Enum () { }
  QSslSocket_PeerVerifyMode_Enum (enum QSslSocket::PeerVerifyMode v) : QSslSocket_PeerVerifyMode_Enums (v) { }
  enum QSslSocket::PeerVerifyMode value () const { return (enum QSslSocket::PeerVerifyMode) flags ().operator int (); }
};

//  Converter for QFlags<enum QSslSocket::PeerVerifyMode>
template <>
struct Converter<QFlags<enum QSslSocket::PeerVerifyMode> >
{
public:
  typedef QFlags<enum QSslSocket::PeerVerifyMode> source_type;
  typedef QSslSocket_PeerVerifyMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSslSocket::PeerVerifyMode
template <>
struct Converter<enum QSslSocket::PeerVerifyMode>
{
public:
  typedef enum QSslSocket::PeerVerifyMode source_type;
  typedef QSslSocket_PeerVerifyMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSslSocket::SslMode>
class QSslSocket_SslMode_Enums : public QFlags<enum QSslSocket::SslMode> {
public:
  QSslSocket_SslMode_Enums () : m_flags () { }
  QSslSocket_SslMode_Enums (enum QSslSocket::SslMode v) : m_flags (v) { }
  QSslSocket_SslMode_Enums (const QFlags<enum QSslSocket::SslMode> &v) : m_flags (v) { }
  QFlags<enum QSslSocket::SslMode> flags () const { return m_flags; }
private:
  QFlags<QSslSocket::SslMode> m_flags;
};

//  Wrapper class for enum QSslSocket::SslMode
class QSslSocket_SslMode_Enum : public QSslSocket_SslMode_Enums {
public:
  QSslSocket_SslMode_Enum () { }
  QSslSocket_SslMode_Enum (enum QSslSocket::SslMode v) : QSslSocket_SslMode_Enums (v) { }
  enum QSslSocket::SslMode value () const { return (enum QSslSocket::SslMode) flags ().operator int (); }
};

//  Converter for QFlags<enum QSslSocket::SslMode>
template <>
struct Converter<QFlags<enum QSslSocket::SslMode> >
{
public:
  typedef QFlags<enum QSslSocket::SslMode> source_type;
  typedef QSslSocket_SslMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSslSocket::SslMode
template <>
struct Converter<enum QSslSocket::SslMode>
{
public:
  typedef enum QSslSocket::SslMode source_type;
  typedef QSslSocket_SslMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ConnectionType>
class Qt_ConnectionType_Enums : public QFlags<enum Qt::ConnectionType> {
public:
  Qt_ConnectionType_Enums () : m_flags () { }
  Qt_ConnectionType_Enums (enum Qt::ConnectionType v) : m_flags (v) { }
  Qt_ConnectionType_Enums (const QFlags<enum Qt::ConnectionType> &v) : m_flags (v) { }
  QFlags<enum Qt::ConnectionType> flags () const { return m_flags; }
private:
  QFlags<Qt::ConnectionType> m_flags;
};

//  Wrapper class for enum Qt::ConnectionType
class Qt_ConnectionType_Enum : public Qt_ConnectionType_Enums {
public:
  Qt_ConnectionType_Enum () { }
  Qt_ConnectionType_Enum (enum Qt::ConnectionType v) : Qt_ConnectionType_Enums (v) { }
  enum Qt::ConnectionType value () const { return (enum Qt::ConnectionType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ConnectionType>
template <>
struct Converter<QFlags<enum Qt::ConnectionType> >
{
public:
  typedef QFlags<enum Qt::ConnectionType> source_type;
  typedef Qt_ConnectionType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ConnectionType
template <>
struct Converter<enum Qt::ConnectionType>
{
public:
  typedef enum Qt::ConnectionType source_type;
  typedef Qt_ConnectionType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
