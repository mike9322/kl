
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQGraphicsSceneEvent.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQGraphicsSceneEvent_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QGraphicsSceneEvent

// void QGraphicsSceneEvent::setWidget(QWidget *widget)


static void _init_f_setWidget_1315 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("widget");
  decl->add_arg<QWidget * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setWidget_1315 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QWidget *arg1 = args.read<QWidget * > ();
  ((QGraphicsSceneEvent *)cls)->setWidget (arg1);
}

static qt_gsi::GenericMethod *_create_f_setWidget_1315 ()
{
  return new qt_gsi::GenericMethod ("setWidget|widget=", "@brief Method void QGraphicsSceneEvent::setWidget(QWidget *widget)\n", false, &_init_f_setWidget_1315, &_call_f_setWidget_1315);
}

// QWidget *QGraphicsSceneEvent::widget()


static void _init_f_widget_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QWidget * > ();
}

static void _call_f_widget_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QWidget * > ((QWidget *)((QGraphicsSceneEvent *)cls)->widget ());
}

static qt_gsi::GenericMethod *_create_f_widget_c0 ()
{
  return new qt_gsi::GenericMethod (":widget", "@brief Method QWidget *QGraphicsSceneEvent::widget()\n", true, &_init_f_widget_c0, &_call_f_widget_c0);
}

namespace gsi
{
extern gsi::Class<QEvent> decl_QEvent;

gsi::Class<QGraphicsSceneEvent> decl_QGraphicsSceneEvent (decl_QEvent, "QGraphicsSceneEvent_Native",
  gsi::Methods(_create_f_setWidget_1315 ()) +
  gsi::Methods(_create_f_widget_c0 ()),
  "@hide\n@alias QGraphicsSceneEvent");
}


class QGraphicsSceneEvent_Adaptor : public QGraphicsSceneEvent, public qt_gsi::QtObjectBase
{
public:

  virtual ~QGraphicsSceneEvent_Adaptor();

  //  [adaptor ctor] QGraphicsSceneEvent::QGraphicsSceneEvent(QEvent::Type type)
  QGraphicsSceneEvent_Adaptor(QEvent::Type type) : QGraphicsSceneEvent(type)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  
};

QGraphicsSceneEvent_Adaptor::~QGraphicsSceneEvent_Adaptor() { }

//  Constructor QGraphicsSceneEvent::QGraphicsSceneEvent(QEvent::Type type) (adaptor class)

static void _init_ctor_QGraphicsSceneEvent_Adaptor_1565 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("type");
  decl->add_arg<const qt_gsi::Converter<QEvent::Type>::target_type & > (argspec_0);
  decl->set_return_new<QGraphicsSceneEvent_Adaptor *> ();
}

static void _call_ctor_QGraphicsSceneEvent_Adaptor_1565 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QEvent::Type>::target_type & arg1 = args.read<const qt_gsi::Converter<QEvent::Type>::target_type & > ();
  ret.write<QGraphicsSceneEvent_Adaptor *> (new QGraphicsSceneEvent_Adaptor (qt_gsi::QtToCppAdaptor<QEvent::Type>(arg1).cref()));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QGraphicsSceneEvent_Adaptor_1565 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QGraphicsSceneEvent::QGraphicsSceneEvent(QEvent::Type type)\nThis method creates an object of class QGraphicsSceneEvent.", &_init_ctor_QGraphicsSceneEvent_Adaptor_1565, &_call_ctor_QGraphicsSceneEvent_Adaptor_1565);
}

namespace gsi
{

extern gsi::Class<QGraphicsSceneEvent> decl_QGraphicsSceneEvent;

gsi::Class<QGraphicsSceneEvent_Adaptor> decl_QGraphicsSceneEvent_Adaptor (decl_QGraphicsSceneEvent, "QGraphicsSceneEvent",
  gsi::Methods(_create_ctor_QGraphicsSceneEvent_Adaptor_1565 ()),
  "@qt\n@brief Binding of QGraphicsSceneEvent");

}

