
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQDomComment.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtXml.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQDomComment_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QDomComment

//  Constructor QDomComment::QDomComment()


static void _init_ctor_QDomComment_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QDomComment *> ();
}

static void _call_ctor_QDomComment_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QDomComment *> (new QDomComment ());
}

static qt_gsi::GenericStaticMethod *_create_ctor_QDomComment_0 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QDomComment::QDomComment()\nThis method creates an object of class QDomComment.", &_init_ctor_QDomComment_0, &_call_ctor_QDomComment_0);
}

//  Constructor QDomComment::QDomComment(const QDomComment &x)


static void _init_ctor_QDomComment_2405 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("x");
  decl->add_arg<const QDomComment & > (argspec_0);
  decl->set_return_new<QDomComment *> ();
}

static void _call_ctor_QDomComment_2405 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QDomComment &arg1 = args.read<const QDomComment & > ();
  ret.write<QDomComment *> (new QDomComment (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QDomComment_2405 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QDomComment::QDomComment(const QDomComment &x)\nThis method creates an object of class QDomComment.", &_init_ctor_QDomComment_2405, &_call_ctor_QDomComment_2405);
}

// QDomNode::NodeType QDomComment::nodeType()


static void _init_f_nodeType_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QDomNode::NodeType>::target_type > ();
}

static void _call_f_nodeType_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QDomNode::NodeType>::target_type > ((qt_gsi::Converter<QDomNode::NodeType>::target_type)qt_gsi::CppToQtAdaptor<QDomNode::NodeType>(((QDomComment *)cls)->nodeType ()));
}

static qt_gsi::GenericMethod *_create_f_nodeType_c0 ()
{
  return new qt_gsi::GenericMethod ("nodeType", "@brief Method QDomNode::NodeType QDomComment::nodeType()\n", true, &_init_f_nodeType_c0, &_call_f_nodeType_c0);
}

// QDomComment &QDomComment::operator=(const QDomComment &)


static void _init_f_operator_eq__2405 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QDomComment & > (argspec_0);
  decl->set_return<QDomComment & > ();
}

static void _call_f_operator_eq__2405 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QDomComment &arg1 = args.read<const QDomComment & > ();
  ret.write<QDomComment & > ((QDomComment &)((QDomComment *)cls)->operator= (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_eq__2405 ()
{
  return new qt_gsi::GenericMethod ("assign", "@brief Method QDomComment &QDomComment::operator=(const QDomComment &)\n", false, &_init_f_operator_eq__2405, &_call_f_operator_eq__2405);
}


namespace gsi
{
extern gsi::Class<QDomCharacterData> decl_QDomCharacterData;

gsi::Class<QDomComment> decl_QDomComment (decl_QDomCharacterData, "QDomComment",
  gsi::Methods(_create_ctor_QDomComment_0 ()) +
  gsi::Methods(_create_ctor_QDomComment_2405 ()) +
  gsi::Methods(_create_f_nodeType_c0 ()) +
  gsi::Methods(_create_f_operator_eq__2405 ()),
  "@qt\n@brief Binding of QDomComment");

}

