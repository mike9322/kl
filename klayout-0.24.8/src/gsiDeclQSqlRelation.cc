
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQSqlRelation.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtSql.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQSqlRelation_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QSqlRelation

//  Constructor QSqlRelation::QSqlRelation()


static void _init_ctor_QSqlRelation_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QSqlRelation *> ();
}

static void _call_ctor_QSqlRelation_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QSqlRelation *> (new QSqlRelation ());
}

static qt_gsi::GenericStaticMethod *_create_ctor_QSqlRelation_0 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QSqlRelation::QSqlRelation()\nThis method creates an object of class QSqlRelation.", &_init_ctor_QSqlRelation_0, &_call_ctor_QSqlRelation_0);
}

//  Constructor QSqlRelation::QSqlRelation(const QString &aTableName, const QString &indexCol, const QString &displayCol)


static void _init_ctor_QSqlRelation_5859 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("aTableName");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("indexCol");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("displayCol");
  decl->add_arg<const QString & > (argspec_2);
  decl->set_return_new<QSqlRelation *> ();
}

static void _call_ctor_QSqlRelation_5859 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  const QString &arg2 = args.read<const QString & > ();
  const QString &arg3 = args.read<const QString & > ();
  ret.write<QSqlRelation *> (new QSqlRelation (arg1, arg2, arg3));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QSqlRelation_5859 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QSqlRelation::QSqlRelation(const QString &aTableName, const QString &indexCol, const QString &displayCol)\nThis method creates an object of class QSqlRelation.", &_init_ctor_QSqlRelation_5859, &_call_ctor_QSqlRelation_5859);
}

// QString QSqlRelation::displayColumn()


static void _init_f_displayColumn_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_displayColumn_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QSqlRelation *)cls)->displayColumn ());
}

static qt_gsi::GenericMethod *_create_f_displayColumn_c0 ()
{
  return new qt_gsi::GenericMethod ("displayColumn", "@brief Method QString QSqlRelation::displayColumn()\n", true, &_init_f_displayColumn_c0, &_call_f_displayColumn_c0);
}

// QString QSqlRelation::indexColumn()


static void _init_f_indexColumn_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_indexColumn_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QSqlRelation *)cls)->indexColumn ());
}

static qt_gsi::GenericMethod *_create_f_indexColumn_c0 ()
{
  return new qt_gsi::GenericMethod ("indexColumn", "@brief Method QString QSqlRelation::indexColumn()\n", true, &_init_f_indexColumn_c0, &_call_f_indexColumn_c0);
}

// bool QSqlRelation::isValid()


static void _init_f_isValid_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isValid_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QSqlRelation *)cls)->isValid ());
}

static qt_gsi::GenericMethod *_create_f_isValid_c0 ()
{
  return new qt_gsi::GenericMethod ("isValid?", "@brief Method bool QSqlRelation::isValid()\n", true, &_init_f_isValid_c0, &_call_f_isValid_c0);
}

// QString QSqlRelation::tableName()


static void _init_f_tableName_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_tableName_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QSqlRelation *)cls)->tableName ());
}

static qt_gsi::GenericMethod *_create_f_tableName_c0 ()
{
  return new qt_gsi::GenericMethod ("tableName", "@brief Method QString QSqlRelation::tableName()\n", true, &_init_f_tableName_c0, &_call_f_tableName_c0);
}


namespace gsi
{
gsi::Class<QSqlRelation> decl_QSqlRelation ("QSqlRelation",
  gsi::Methods(_create_ctor_QSqlRelation_0 ()) +
  gsi::Methods(_create_ctor_QSqlRelation_5859 ()) +
  gsi::Methods(_create_f_displayColumn_c0 ()) +
  gsi::Methods(_create_f_indexColumn_c0 ()) +
  gsi::Methods(_create_f_isValid_c0 ()) +
  gsi::Methods(_create_f_tableName_c0 ()),
  "@qt\n@brief Binding of QSqlRelation");

}

