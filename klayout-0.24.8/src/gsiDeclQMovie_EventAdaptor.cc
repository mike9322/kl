
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file generated/gsiDeclQMovie_EventAdaptor.cc
*  @brief Event adaptor implementations for QMovie
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQMovie_EventAdaptor.h"

// -----------------------------------------------------------------------
// class QMovie_EventAdaptor

QMovie_EventAdaptor::QMovie_EventAdaptor (QObject *host)
  : QObject ()
{
  connect (host, SIGNAL(destroyed(QObject *)), this, SLOT(destroyed(QObject *)));
  connect (host, SIGNAL(error(QImageReader::ImageReaderError)), this, SLOT(error(QImageReader::ImageReaderError)));
  connect (host, SIGNAL(finished()), this, SLOT(finished()));
  connect (host, SIGNAL(frameChanged(int)), this, SLOT(frameChanged(int)));
  connect (host, SIGNAL(resized(const QSize &)), this, SLOT(resized(const QSize &)));
  connect (host, SIGNAL(started()), this, SLOT(started()));
  connect (host, SIGNAL(stateChanged(QMovie::MovieState)), this, SLOT(stateChanged(QMovie::MovieState)));
  connect (host, SIGNAL(updated(const QRect &)), this, SLOT(updated(const QRect &)));
}

//  Event QMovie::destroyed(QObject *arg1)
void QMovie_EventAdaptor::destroyed(QObject *arg1) {
BEGIN_PROTECTED
  destroyed_e_1302(arg1);
END_PROTECTED
}

//  Event QMovie::error(QImageReader::ImageReaderError error)
void QMovie_EventAdaptor::error(QImageReader::ImageReaderError error) {
BEGIN_PROTECTED
  error_e_3311(qt_gsi::CppToQtAdaptor<QImageReader::ImageReaderError>(error));
END_PROTECTED
}

//  Event QMovie::finished()
void QMovie_EventAdaptor::finished() {
BEGIN_PROTECTED
  finished_e_0();
END_PROTECTED
}

//  Event QMovie::frameChanged(int frameNumber)
void QMovie_EventAdaptor::frameChanged(int frameNumber) {
BEGIN_PROTECTED
  frameChanged_e_767(frameNumber);
END_PROTECTED
}

//  Event QMovie::resized(const QSize &size)
void QMovie_EventAdaptor::resized(const QSize &size) {
BEGIN_PROTECTED
  resized_e_1805(size);
END_PROTECTED
}

//  Event QMovie::started()
void QMovie_EventAdaptor::started() {
BEGIN_PROTECTED
  started_e_0();
END_PROTECTED
}

//  Event QMovie::stateChanged(QMovie::MovieState state)
void QMovie_EventAdaptor::stateChanged(QMovie::MovieState state) {
BEGIN_PROTECTED
  stateChanged_e_2170(qt_gsi::CppToQtAdaptor<QMovie::MovieState>(state));
END_PROTECTED
}

//  Event QMovie::updated(const QRect &rect)
void QMovie_EventAdaptor::updated(const QRect &rect) {
BEGIN_PROTECTED
  updated_e_1792(rect);
END_PROTECTED
}
