
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQFileOpenEvent.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQFileOpenEvent_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QFileOpenEvent

// QString QFileOpenEvent::file()


static void _init_f_file_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_file_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QFileOpenEvent *)cls)->file ());
}

static qt_gsi::GenericMethod *_create_f_file_c0 ()
{
  return new qt_gsi::GenericMethod ("file", "@brief Method QString QFileOpenEvent::file()\n", true, &_init_f_file_c0, &_call_f_file_c0);
}

// QUrl QFileOpenEvent::url()


static void _init_f_url_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QUrl > ();
}

static void _call_f_url_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QUrl > ((QUrl)((QFileOpenEvent *)cls)->url ());
}

static qt_gsi::GenericMethod *_create_f_url_c0 ()
{
  return new qt_gsi::GenericMethod ("url", "@brief Method QUrl QFileOpenEvent::url()\n", true, &_init_f_url_c0, &_call_f_url_c0);
}

namespace gsi
{
extern gsi::Class<QEvent> decl_QEvent;

gsi::Class<QFileOpenEvent> decl_QFileOpenEvent (decl_QEvent, "QFileOpenEvent_Native",
  gsi::Methods(_create_f_file_c0 ()) +
  gsi::Methods(_create_f_url_c0 ()),
  "@hide\n@alias QFileOpenEvent");
}


class QFileOpenEvent_Adaptor : public QFileOpenEvent, public qt_gsi::QtObjectBase
{
public:

  virtual ~QFileOpenEvent_Adaptor();

  //  [adaptor ctor] QFileOpenEvent::QFileOpenEvent(const QString &file)
  QFileOpenEvent_Adaptor(const QString &file) : QFileOpenEvent(file)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QFileOpenEvent::QFileOpenEvent(const QUrl &url)
  QFileOpenEvent_Adaptor(const QUrl &url) : QFileOpenEvent(url)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  
};

QFileOpenEvent_Adaptor::~QFileOpenEvent_Adaptor() { }

//  Constructor QFileOpenEvent::QFileOpenEvent(const QString &file) (adaptor class)

static void _init_ctor_QFileOpenEvent_Adaptor_2025 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("file");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return_new<QFileOpenEvent_Adaptor *> ();
}

static void _call_ctor_QFileOpenEvent_Adaptor_2025 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ret.write<QFileOpenEvent_Adaptor *> (new QFileOpenEvent_Adaptor (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QFileOpenEvent_Adaptor_2025 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QFileOpenEvent::QFileOpenEvent(const QString &file)\nThis method creates an object of class QFileOpenEvent.", &_init_ctor_QFileOpenEvent_Adaptor_2025, &_call_ctor_QFileOpenEvent_Adaptor_2025);
}

//  Constructor QFileOpenEvent::QFileOpenEvent(const QUrl &url) (adaptor class)

static void _init_ctor_QFileOpenEvent_Adaptor_1701 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("url");
  decl->add_arg<const QUrl & > (argspec_0);
  decl->set_return_new<QFileOpenEvent_Adaptor *> ();
}

static void _call_ctor_QFileOpenEvent_Adaptor_1701 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QUrl &arg1 = args.read<const QUrl & > ();
  ret.write<QFileOpenEvent_Adaptor *> (new QFileOpenEvent_Adaptor (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QFileOpenEvent_Adaptor_1701 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QFileOpenEvent::QFileOpenEvent(const QUrl &url)\nThis method creates an object of class QFileOpenEvent.", &_init_ctor_QFileOpenEvent_Adaptor_1701, &_call_ctor_QFileOpenEvent_Adaptor_1701);
}

namespace gsi
{

extern gsi::Class<QFileOpenEvent> decl_QFileOpenEvent;

gsi::Class<QFileOpenEvent_Adaptor> decl_QFileOpenEvent_Adaptor (decl_QFileOpenEvent, "QFileOpenEvent",
  gsi::Methods(_create_ctor_QFileOpenEvent_Adaptor_2025 ()) +
  gsi::Methods(_create_ctor_QFileOpenEvent_Adaptor_1701 ()),
  "@qt\n@brief Binding of QFileOpenEvent");

}

