
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQNetworkInterface.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtNetwork.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQNetworkInterface_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QNetworkInterface

//  Constructor QNetworkInterface::QNetworkInterface()


static void _init_ctor_QNetworkInterface_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QNetworkInterface *> ();
}

static void _call_ctor_QNetworkInterface_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QNetworkInterface *> (new QNetworkInterface ());
}

static qt_gsi::GenericStaticMethod *_create_ctor_QNetworkInterface_0 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNetworkInterface::QNetworkInterface()\nThis method creates an object of class QNetworkInterface.", &_init_ctor_QNetworkInterface_0, &_call_ctor_QNetworkInterface_0);
}

//  Constructor QNetworkInterface::QNetworkInterface(const QNetworkInterface &other)


static void _init_ctor_QNetworkInterface_3053 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkInterface & > (argspec_0);
  decl->set_return_new<QNetworkInterface *> ();
}

static void _call_ctor_QNetworkInterface_3053 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkInterface &arg1 = args.read<const QNetworkInterface & > ();
  ret.write<QNetworkInterface *> (new QNetworkInterface (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QNetworkInterface_3053 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNetworkInterface::QNetworkInterface(const QNetworkInterface &other)\nThis method creates an object of class QNetworkInterface.", &_init_ctor_QNetworkInterface_3053, &_call_ctor_QNetworkInterface_3053);
}

// QList<QNetworkAddressEntry> QNetworkInterface::addressEntries()


static void _init_f_addressEntries_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QList<QNetworkAddressEntry> >::target_type > ();
}

static void _call_f_addressEntries_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QList<QNetworkAddressEntry> >::target_type > ((qt_gsi::Converter<QList<QNetworkAddressEntry> >::target_type)qt_gsi::CppToQtAdaptor<QList<QNetworkAddressEntry> >(((QNetworkInterface *)cls)->addressEntries ()));
}

static qt_gsi::GenericMethod *_create_f_addressEntries_c0 ()
{
  return new qt_gsi::GenericMethod ("addressEntries", "@brief Method QList<QNetworkAddressEntry> QNetworkInterface::addressEntries()\n", true, &_init_f_addressEntries_c0, &_call_f_addressEntries_c0);
}

// QFlags<QNetworkInterface::InterfaceFlag> QNetworkInterface::flags()


static void _init_f_flags_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QFlags<QNetworkInterface::InterfaceFlag> >::target_type > ();
}

static void _call_f_flags_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QFlags<QNetworkInterface::InterfaceFlag> >::target_type > ((qt_gsi::Converter<QFlags<QNetworkInterface::InterfaceFlag> >::target_type)qt_gsi::CppToQtAdaptor<QFlags<QNetworkInterface::InterfaceFlag> >(((QNetworkInterface *)cls)->flags ()));
}

static qt_gsi::GenericMethod *_create_f_flags_c0 ()
{
  return new qt_gsi::GenericMethod ("flags", "@brief Method QFlags<QNetworkInterface::InterfaceFlag> QNetworkInterface::flags()\n", true, &_init_f_flags_c0, &_call_f_flags_c0);
}

// QString QNetworkInterface::hardwareAddress()


static void _init_f_hardwareAddress_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_hardwareAddress_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QNetworkInterface *)cls)->hardwareAddress ());
}

static qt_gsi::GenericMethod *_create_f_hardwareAddress_c0 ()
{
  return new qt_gsi::GenericMethod ("hardwareAddress", "@brief Method QString QNetworkInterface::hardwareAddress()\n", true, &_init_f_hardwareAddress_c0, &_call_f_hardwareAddress_c0);
}

// QString QNetworkInterface::humanReadableName()


static void _init_f_humanReadableName_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_humanReadableName_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QNetworkInterface *)cls)->humanReadableName ());
}

static qt_gsi::GenericMethod *_create_f_humanReadableName_c0 ()
{
  return new qt_gsi::GenericMethod ("humanReadableName", "@brief Method QString QNetworkInterface::humanReadableName()\n", true, &_init_f_humanReadableName_c0, &_call_f_humanReadableName_c0);
}

// int QNetworkInterface::index()


static void _init_f_index_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_index_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QNetworkInterface *)cls)->index ());
}

static qt_gsi::GenericMethod *_create_f_index_c0 ()
{
  return new qt_gsi::GenericMethod ("index", "@brief Method int QNetworkInterface::index()\n", true, &_init_f_index_c0, &_call_f_index_c0);
}

// bool QNetworkInterface::isValid()


static void _init_f_isValid_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isValid_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QNetworkInterface *)cls)->isValid ());
}

static qt_gsi::GenericMethod *_create_f_isValid_c0 ()
{
  return new qt_gsi::GenericMethod ("isValid?", "@brief Method bool QNetworkInterface::isValid()\n", true, &_init_f_isValid_c0, &_call_f_isValid_c0);
}

// QString QNetworkInterface::name()


static void _init_f_name_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_name_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QNetworkInterface *)cls)->name ());
}

static qt_gsi::GenericMethod *_create_f_name_c0 ()
{
  return new qt_gsi::GenericMethod ("name", "@brief Method QString QNetworkInterface::name()\n", true, &_init_f_name_c0, &_call_f_name_c0);
}

// QNetworkInterface &QNetworkInterface::operator=(const QNetworkInterface &other)


static void _init_f_operator_eq__3053 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QNetworkInterface & > (argspec_0);
  decl->set_return<QNetworkInterface & > ();
}

static void _call_f_operator_eq__3053 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QNetworkInterface &arg1 = args.read<const QNetworkInterface & > ();
  ret.write<QNetworkInterface & > ((QNetworkInterface &)((QNetworkInterface *)cls)->operator= (arg1));
}

static qt_gsi::GenericMethod *_create_f_operator_eq__3053 ()
{
  return new qt_gsi::GenericMethod ("assign", "@brief Method QNetworkInterface &QNetworkInterface::operator=(const QNetworkInterface &other)\n", false, &_init_f_operator_eq__3053, &_call_f_operator_eq__3053);
}

// static QList<QHostAddress> QNetworkInterface::allAddresses()


static void _init_f_allAddresses_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QList<QHostAddress> >::target_type > ();
}

static void _call_f_allAddresses_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QList<QHostAddress> >::target_type > ((qt_gsi::Converter<QList<QHostAddress> >::target_type)qt_gsi::CppToQtAdaptor<QList<QHostAddress> >(QNetworkInterface::allAddresses ()));
}

static qt_gsi::GenericStaticMethod *_create_f_allAddresses_0 ()
{
  return new qt_gsi::GenericStaticMethod ("allAddresses", "@brief Static method QList<QHostAddress> QNetworkInterface::allAddresses()\nThis method is static and can be called without an instance.", &_init_f_allAddresses_0, &_call_f_allAddresses_0);
}

// static QList<QNetworkInterface> QNetworkInterface::allInterfaces()


static void _init_f_allInterfaces_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QList<QNetworkInterface> >::target_type > ();
}

static void _call_f_allInterfaces_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QList<QNetworkInterface> >::target_type > ((qt_gsi::Converter<QList<QNetworkInterface> >::target_type)qt_gsi::CppToQtAdaptor<QList<QNetworkInterface> >(QNetworkInterface::allInterfaces ()));
}

static qt_gsi::GenericStaticMethod *_create_f_allInterfaces_0 ()
{
  return new qt_gsi::GenericStaticMethod ("allInterfaces", "@brief Static method QList<QNetworkInterface> QNetworkInterface::allInterfaces()\nThis method is static and can be called without an instance.", &_init_f_allInterfaces_0, &_call_f_allInterfaces_0);
}

// static QNetworkInterface QNetworkInterface::interfaceFromIndex(int index)


static void _init_f_interfaceFromIndex_767 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("index");
  decl->add_arg<int > (argspec_0);
  decl->set_return<QNetworkInterface > ();
}

static void _call_f_interfaceFromIndex_767 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ret.write<QNetworkInterface > ((QNetworkInterface)QNetworkInterface::interfaceFromIndex (arg1));
}

static qt_gsi::GenericStaticMethod *_create_f_interfaceFromIndex_767 ()
{
  return new qt_gsi::GenericStaticMethod ("interfaceFromIndex", "@brief Static method QNetworkInterface QNetworkInterface::interfaceFromIndex(int index)\nThis method is static and can be called without an instance.", &_init_f_interfaceFromIndex_767, &_call_f_interfaceFromIndex_767);
}

// static QNetworkInterface QNetworkInterface::interfaceFromName(const QString &name)


static void _init_f_interfaceFromName_2025 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<QNetworkInterface > ();
}

static void _call_f_interfaceFromName_2025 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ret.write<QNetworkInterface > ((QNetworkInterface)QNetworkInterface::interfaceFromName (arg1));
}

static qt_gsi::GenericStaticMethod *_create_f_interfaceFromName_2025 ()
{
  return new qt_gsi::GenericStaticMethod ("interfaceFromName", "@brief Static method QNetworkInterface QNetworkInterface::interfaceFromName(const QString &name)\nThis method is static and can be called without an instance.", &_init_f_interfaceFromName_2025, &_call_f_interfaceFromName_2025);
}


namespace gsi
{
gsi::Class<QNetworkInterface> decl_QNetworkInterface ("QNetworkInterface",
  gsi::Methods(_create_ctor_QNetworkInterface_0 ()) +
  gsi::Methods(_create_ctor_QNetworkInterface_3053 ()) +
  gsi::Methods(_create_f_addressEntries_c0 ()) +
  gsi::Methods(_create_f_flags_c0 ()) +
  gsi::Methods(_create_f_hardwareAddress_c0 ()) +
  gsi::Methods(_create_f_humanReadableName_c0 ()) +
  gsi::Methods(_create_f_index_c0 ()) +
  gsi::Methods(_create_f_isValid_c0 ()) +
  gsi::Methods(_create_f_name_c0 ()) +
  gsi::Methods(_create_f_operator_eq__3053 ()) +
  gsi::Methods(_create_f_allAddresses_0 ()) +
  gsi::Methods(_create_f_allInterfaces_0 ()) +
  gsi::Methods(_create_f_interfaceFromIndex_767 ()) +
  gsi::Methods(_create_f_interfaceFromName_2025 ()),
  "@qt\n@brief Binding of QNetworkInterface");

}


//  Implementation of the enum wrapper class for QNetworkInterface::InterfaceFlag
namespace qt_gsi
{

static QNetworkInterface_InterfaceFlag_Enum *c_1_QNetworkInterface_InterfaceFlag_Enum () { return new QNetworkInterface_InterfaceFlag_Enum (QNetworkInterface::IsUp); }
static QNetworkInterface_InterfaceFlag_Enum *c_2_QNetworkInterface_InterfaceFlag_Enum () { return new QNetworkInterface_InterfaceFlag_Enum (QNetworkInterface::IsRunning); }
static QNetworkInterface_InterfaceFlag_Enum *c_3_QNetworkInterface_InterfaceFlag_Enum () { return new QNetworkInterface_InterfaceFlag_Enum (QNetworkInterface::CanBroadcast); }
static QNetworkInterface_InterfaceFlag_Enum *c_4_QNetworkInterface_InterfaceFlag_Enum () { return new QNetworkInterface_InterfaceFlag_Enum (QNetworkInterface::IsLoopBack); }
static QNetworkInterface_InterfaceFlag_Enum *c_5_QNetworkInterface_InterfaceFlag_Enum () { return new QNetworkInterface_InterfaceFlag_Enum (QNetworkInterface::IsPointToPoint); }
static QNetworkInterface_InterfaceFlag_Enum *c_6_QNetworkInterface_InterfaceFlag_Enum () { return new QNetworkInterface_InterfaceFlag_Enum (QNetworkInterface::CanMulticast); }

static gsi::Methods mkdefs_QNetworkInterface_InterfaceFlag () {
  return
    gsi::constant ("IsUp", &qt_gsi::c_1_QNetworkInterface_InterfaceFlag_Enum, "@brief Enum constant QNetworkInterface::IsUp") +
    gsi::constant ("IsRunning", &qt_gsi::c_2_QNetworkInterface_InterfaceFlag_Enum, "@brief Enum constant QNetworkInterface::IsRunning") +
    gsi::constant ("CanBroadcast", &qt_gsi::c_3_QNetworkInterface_InterfaceFlag_Enum, "@brief Enum constant QNetworkInterface::CanBroadcast") +
    gsi::constant ("IsLoopBack", &qt_gsi::c_4_QNetworkInterface_InterfaceFlag_Enum, "@brief Enum constant QNetworkInterface::IsLoopBack") +
    gsi::constant ("IsPointToPoint", &qt_gsi::c_5_QNetworkInterface_InterfaceFlag_Enum, "@brief Enum constant QNetworkInterface::IsPointToPoint") +
    gsi::constant ("CanMulticast", &qt_gsi::c_6_QNetworkInterface_InterfaceFlag_Enum, "@brief Enum constant QNetworkInterface::CanMulticast");
}

static std::string to_s_QNetworkInterface_InterfaceFlag_Enum (const QNetworkInterface_InterfaceFlag_Enum *e)
{
  if (e->value () == QNetworkInterface::IsUp) { return tl::sprintf ("IsUp (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkInterface::IsRunning) { return tl::sprintf ("IsRunning (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkInterface::CanBroadcast) { return tl::sprintf ("CanBroadcast (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkInterface::IsLoopBack) { return tl::sprintf ("IsLoopBack (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkInterface::IsPointToPoint) { return tl::sprintf ("IsPointToPoint (%u)", (unsigned int) e->value ()); }
  if (e->value () == QNetworkInterface::CanMulticast) { return tl::sprintf ("CanMulticast (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QNetworkInterface_InterfaceFlag_Enum (const QNetworkInterface_InterfaceFlag_Enum *e)
{
  return (unsigned int) e->value ();
}

static QNetworkInterface_InterfaceFlag_Enum *from_i_QNetworkInterface_InterfaceFlag_Enum (unsigned int i)
{
  return new QNetworkInterface_InterfaceFlag_Enum ((QNetworkInterface::InterfaceFlag) i);
}

static bool equalQNetworkInterface_InterfaceFlag_Enum (const QNetworkInterface_InterfaceFlag_Enum *e, QNetworkInterface_InterfaceFlag_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QNetworkInterface_InterfaceFlag_Enum (const QNetworkInterface_InterfaceFlag_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QNetworkInterface_InterfaceFlag_Enums oropQNetworkInterface_InterfaceFlag_Enums (const QNetworkInterface_InterfaceFlag_Enums *e, const QNetworkInterface_InterfaceFlag_Enums &d)
{
  return e->flags () | d.flags ();
}

static QNetworkInterface_InterfaceFlag_Enums andopQNetworkInterface_InterfaceFlag_Enums (const QNetworkInterface_InterfaceFlag_Enums *e, const QNetworkInterface_InterfaceFlag_Enums &d)
{
  return e->flags () & d.flags ();
}

static QNetworkInterface_InterfaceFlag_Enums xoropQNetworkInterface_InterfaceFlag_Enums (const QNetworkInterface_InterfaceFlag_Enums *e, const QNetworkInterface_InterfaceFlag_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QNetworkInterface_InterfaceFlag_Enums (const QNetworkInterface_InterfaceFlag_Enums *e)
{
  std::string l;
  if (e->testFlag (QNetworkInterface::IsUp)) { if (!l.empty ()) l += "|"; l += "IsUp"; }
  if (e->testFlag (QNetworkInterface::IsRunning)) { if (!l.empty ()) l += "|"; l += "IsRunning"; }
  if (e->testFlag (QNetworkInterface::CanBroadcast)) { if (!l.empty ()) l += "|"; l += "CanBroadcast"; }
  if (e->testFlag (QNetworkInterface::IsLoopBack)) { if (!l.empty ()) l += "|"; l += "IsLoopBack"; }
  if (e->testFlag (QNetworkInterface::IsPointToPoint)) { if (!l.empty ()) l += "|"; l += "IsPointToPoint"; }
  if (e->testFlag (QNetworkInterface::CanMulticast)) { if (!l.empty ()) l += "|"; l += "CanMulticast"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QNetworkInterface_InterfaceFlag_Enums (const QNetworkInterface_InterfaceFlag_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QNetworkInterface_InterfaceFlag_Enums (const QNetworkInterface_InterfaceFlag_Enums *e, const QNetworkInterface_InterfaceFlag_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QNetworkInterface_InterfaceFlag_Enums> decl_QNetworkInterface_InterfaceFlag_Enums ("QNetworkInterface_QFlags_InterfaceFlag",
  gsi::method_ext ("|", &qt_gsi::oropQNetworkInterface_InterfaceFlag_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQNetworkInterface_InterfaceFlag_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQNetworkInterface_InterfaceFlag_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QNetworkInterface_InterfaceFlag_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QNetworkInterface_InterfaceFlag_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QNetworkInterface_InterfaceFlag_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QNetworkInterface::InterfaceFlag> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QNetworkInterface_InterfaceFlag_Enum> decl_QNetworkInterface_InterfaceFlag_Enum (decl_QNetworkInterface_InterfaceFlag_Enums, "QNetworkInterface_InterfaceFlag",
  qt_gsi::mkdefs_QNetworkInterface_InterfaceFlag () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QNetworkInterface_InterfaceFlag_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QNetworkInterface_InterfaceFlag_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQNetworkInterface_InterfaceFlag_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QNetworkInterface_InterfaceFlag_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QNetworkInterface_InterfaceFlag_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QNetworkInterface::InterfaceFlag enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QNetworkInterface> inject_QNetworkInterface_InterfaceFlag_Enum_in_parent (qt_gsi::mkdefs_QNetworkInterface_InterfaceFlag ());
static gsi::ClassExt<QNetworkInterface> decl_QNetworkInterface_InterfaceFlag_Enum_as_child (decl_QNetworkInterface_InterfaceFlag_Enum, "InterfaceFlag");

}

