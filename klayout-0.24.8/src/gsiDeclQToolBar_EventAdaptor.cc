
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file generated/gsiDeclQToolBar_EventAdaptor.cc
*  @brief Event adaptor implementations for QToolBar
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQToolBar_EventAdaptor.h"

// -----------------------------------------------------------------------
// class QToolBar_EventAdaptor

QToolBar_EventAdaptor::QToolBar_EventAdaptor (QObject *host)
  : QObject ()
{
  connect (host, SIGNAL(actionTriggered(QAction *)), this, SLOT(actionTriggered(QAction *)));
  connect (host, SIGNAL(allowedAreasChanged(QFlags<Qt::ToolBarArea>)), this, SLOT(allowedAreasChanged(QFlags<Qt::ToolBarArea>)));
  connect (host, SIGNAL(customContextMenuRequested(const QPoint &)), this, SLOT(customContextMenuRequested(const QPoint &)));
  connect (host, SIGNAL(destroyed(QObject *)), this, SLOT(destroyed(QObject *)));
  connect (host, SIGNAL(iconSizeChanged(const QSize &)), this, SLOT(iconSizeChanged(const QSize &)));
  connect (host, SIGNAL(movableChanged(bool)), this, SLOT(movableChanged(bool)));
  connect (host, SIGNAL(orientationChanged(Qt::Orientation)), this, SLOT(orientationChanged(Qt::Orientation)));
  connect (host, SIGNAL(toolButtonStyleChanged(Qt::ToolButtonStyle)), this, SLOT(toolButtonStyleChanged(Qt::ToolButtonStyle)));
  connect (host, SIGNAL(topLevelChanged(bool)), this, SLOT(topLevelChanged(bool)));
}

//  Event QToolBar::actionTriggered(QAction *action)
void QToolBar_EventAdaptor::actionTriggered(QAction *action) {
BEGIN_PROTECTED
  actionTriggered_e_1309(action);
END_PROTECTED
}

//  Event QToolBar::allowedAreasChanged(QFlags<Qt::ToolBarArea> allowedAreas)
void QToolBar_EventAdaptor::allowedAreasChanged(QFlags<Qt::ToolBarArea> allowedAreas) {
BEGIN_PROTECTED
  allowedAreasChanged_e_2513(qt_gsi::CppToQtAdaptor<QFlags<Qt::ToolBarArea> >(allowedAreas));
END_PROTECTED
}

//  Event QToolBar::customContextMenuRequested(const QPoint &pos)
void QToolBar_EventAdaptor::customContextMenuRequested(const QPoint &pos) {
BEGIN_PROTECTED
  customContextMenuRequested_e_1916(pos);
END_PROTECTED
}

//  Event QToolBar::destroyed(QObject *arg1)
void QToolBar_EventAdaptor::destroyed(QObject *arg1) {
BEGIN_PROTECTED
  destroyed_e_1302(arg1);
END_PROTECTED
}

//  Event QToolBar::iconSizeChanged(const QSize &iconSize)
void QToolBar_EventAdaptor::iconSizeChanged(const QSize &iconSize) {
BEGIN_PROTECTED
  iconSizeChanged_e_1805(iconSize);
END_PROTECTED
}

//  Event QToolBar::movableChanged(bool movable)
void QToolBar_EventAdaptor::movableChanged(bool movable) {
BEGIN_PROTECTED
  movableChanged_e_864(movable);
END_PROTECTED
}

//  Event QToolBar::orientationChanged(Qt::Orientation orientation)
void QToolBar_EventAdaptor::orientationChanged(Qt::Orientation orientation) {
BEGIN_PROTECTED
  orientationChanged_e_1913(qt_gsi::CppToQtAdaptor<Qt::Orientation>(orientation));
END_PROTECTED
}

//  Event QToolBar::toolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle)
void QToolBar_EventAdaptor::toolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle) {
BEGIN_PROTECTED
  toolButtonStyleChanged_e_2328(qt_gsi::CppToQtAdaptor<Qt::ToolButtonStyle>(toolButtonStyle));
END_PROTECTED
}

//  Event QToolBar::topLevelChanged(bool topLevel)
void QToolBar_EventAdaptor::topLevelChanged(bool topLevel) {
BEGIN_PROTECTED
  topLevelChanged_e_864(topLevel);
END_PROTECTED
}
