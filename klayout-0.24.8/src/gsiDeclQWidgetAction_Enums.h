
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQWidgetAction_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQWidgetAction_Enums
#define _HDR_gsiDeclQWidgetAction_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QAction::ActionEvent>
class QAction_ActionEvent_Enums : public QFlags<enum QAction::ActionEvent> {
public:
  QAction_ActionEvent_Enums () : m_flags () { }
  QAction_ActionEvent_Enums (enum QAction::ActionEvent v) : m_flags (v) { }
  QAction_ActionEvent_Enums (const QFlags<enum QAction::ActionEvent> &v) : m_flags (v) { }
  QFlags<enum QAction::ActionEvent> flags () const { return m_flags; }
private:
  QFlags<QAction::ActionEvent> m_flags;
};

//  Wrapper class for enum QAction::ActionEvent
class QAction_ActionEvent_Enum : public QAction_ActionEvent_Enums {
public:
  QAction_ActionEvent_Enum () { }
  QAction_ActionEvent_Enum (enum QAction::ActionEvent v) : QAction_ActionEvent_Enums (v) { }
  enum QAction::ActionEvent value () const { return (enum QAction::ActionEvent) flags ().operator int (); }
};

//  Converter for QFlags<enum QAction::ActionEvent>
template <>
struct Converter<QFlags<enum QAction::ActionEvent> >
{
public:
  typedef QFlags<enum QAction::ActionEvent> source_type;
  typedef QAction_ActionEvent_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAction::ActionEvent
template <>
struct Converter<enum QAction::ActionEvent>
{
public:
  typedef enum QAction::ActionEvent source_type;
  typedef QAction_ActionEvent_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAction::MenuRole>
class QAction_MenuRole_Enums : public QFlags<enum QAction::MenuRole> {
public:
  QAction_MenuRole_Enums () : m_flags () { }
  QAction_MenuRole_Enums (enum QAction::MenuRole v) : m_flags (v) { }
  QAction_MenuRole_Enums (const QFlags<enum QAction::MenuRole> &v) : m_flags (v) { }
  QFlags<enum QAction::MenuRole> flags () const { return m_flags; }
private:
  QFlags<QAction::MenuRole> m_flags;
};

//  Wrapper class for enum QAction::MenuRole
class QAction_MenuRole_Enum : public QAction_MenuRole_Enums {
public:
  QAction_MenuRole_Enum () { }
  QAction_MenuRole_Enum (enum QAction::MenuRole v) : QAction_MenuRole_Enums (v) { }
  enum QAction::MenuRole value () const { return (enum QAction::MenuRole) flags ().operator int (); }
};

//  Converter for QFlags<enum QAction::MenuRole>
template <>
struct Converter<QFlags<enum QAction::MenuRole> >
{
public:
  typedef QFlags<enum QAction::MenuRole> source_type;
  typedef QAction_MenuRole_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAction::MenuRole
template <>
struct Converter<enum QAction::MenuRole>
{
public:
  typedef enum QAction::MenuRole source_type;
  typedef QAction_MenuRole_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAction::Priority>
class QAction_Priority_Enums : public QFlags<enum QAction::Priority> {
public:
  QAction_Priority_Enums () : m_flags () { }
  QAction_Priority_Enums (enum QAction::Priority v) : m_flags (v) { }
  QAction_Priority_Enums (const QFlags<enum QAction::Priority> &v) : m_flags (v) { }
  QFlags<enum QAction::Priority> flags () const { return m_flags; }
private:
  QFlags<QAction::Priority> m_flags;
};

//  Wrapper class for enum QAction::Priority
class QAction_Priority_Enum : public QAction_Priority_Enums {
public:
  QAction_Priority_Enum () { }
  QAction_Priority_Enum (enum QAction::Priority v) : QAction_Priority_Enums (v) { }
  enum QAction::Priority value () const { return (enum QAction::Priority) flags ().operator int (); }
};

//  Converter for QFlags<enum QAction::Priority>
template <>
struct Converter<QFlags<enum QAction::Priority> >
{
public:
  typedef QFlags<enum QAction::Priority> source_type;
  typedef QAction_Priority_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAction::Priority
template <>
struct Converter<enum QAction::Priority>
{
public:
  typedef enum QAction::Priority source_type;
  typedef QAction_Priority_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QAction::SoftKeyRole>
class QAction_SoftKeyRole_Enums : public QFlags<enum QAction::SoftKeyRole> {
public:
  QAction_SoftKeyRole_Enums () : m_flags () { }
  QAction_SoftKeyRole_Enums (enum QAction::SoftKeyRole v) : m_flags (v) { }
  QAction_SoftKeyRole_Enums (const QFlags<enum QAction::SoftKeyRole> &v) : m_flags (v) { }
  QFlags<enum QAction::SoftKeyRole> flags () const { return m_flags; }
private:
  QFlags<QAction::SoftKeyRole> m_flags;
};

//  Wrapper class for enum QAction::SoftKeyRole
class QAction_SoftKeyRole_Enum : public QAction_SoftKeyRole_Enums {
public:
  QAction_SoftKeyRole_Enum () { }
  QAction_SoftKeyRole_Enum (enum QAction::SoftKeyRole v) : QAction_SoftKeyRole_Enums (v) { }
  enum QAction::SoftKeyRole value () const { return (enum QAction::SoftKeyRole) flags ().operator int (); }
};

//  Converter for QFlags<enum QAction::SoftKeyRole>
template <>
struct Converter<QFlags<enum QAction::SoftKeyRole> >
{
public:
  typedef QFlags<enum QAction::SoftKeyRole> source_type;
  typedef QAction_SoftKeyRole_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QAction::SoftKeyRole
template <>
struct Converter<enum QAction::SoftKeyRole>
{
public:
  typedef enum QAction::SoftKeyRole source_type;
  typedef QAction_SoftKeyRole_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QKeySequence::StandardKey>
class QKeySequence_StandardKey_Enums : public QFlags<enum QKeySequence::StandardKey> {
public:
  QKeySequence_StandardKey_Enums () : m_flags () { }
  QKeySequence_StandardKey_Enums (enum QKeySequence::StandardKey v) : m_flags (v) { }
  QKeySequence_StandardKey_Enums (const QFlags<enum QKeySequence::StandardKey> &v) : m_flags (v) { }
  QFlags<enum QKeySequence::StandardKey> flags () const { return m_flags; }
private:
  QFlags<QKeySequence::StandardKey> m_flags;
};

//  Wrapper class for enum QKeySequence::StandardKey
class QKeySequence_StandardKey_Enum : public QKeySequence_StandardKey_Enums {
public:
  QKeySequence_StandardKey_Enum () { }
  QKeySequence_StandardKey_Enum (enum QKeySequence::StandardKey v) : QKeySequence_StandardKey_Enums (v) { }
  enum QKeySequence::StandardKey value () const { return (enum QKeySequence::StandardKey) flags ().operator int (); }
};

//  Converter for QFlags<enum QKeySequence::StandardKey>
template <>
struct Converter<QFlags<enum QKeySequence::StandardKey> >
{
public:
  typedef QFlags<enum QKeySequence::StandardKey> source_type;
  typedef QKeySequence_StandardKey_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QKeySequence::StandardKey
template <>
struct Converter<enum QKeySequence::StandardKey>
{
public:
  typedef enum QKeySequence::StandardKey source_type;
  typedef QKeySequence_StandardKey_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ConnectionType>
class Qt_ConnectionType_Enums : public QFlags<enum Qt::ConnectionType> {
public:
  Qt_ConnectionType_Enums () : m_flags () { }
  Qt_ConnectionType_Enums (enum Qt::ConnectionType v) : m_flags (v) { }
  Qt_ConnectionType_Enums (const QFlags<enum Qt::ConnectionType> &v) : m_flags (v) { }
  QFlags<enum Qt::ConnectionType> flags () const { return m_flags; }
private:
  QFlags<Qt::ConnectionType> m_flags;
};

//  Wrapper class for enum Qt::ConnectionType
class Qt_ConnectionType_Enum : public Qt_ConnectionType_Enums {
public:
  Qt_ConnectionType_Enum () { }
  Qt_ConnectionType_Enum (enum Qt::ConnectionType v) : Qt_ConnectionType_Enums (v) { }
  enum Qt::ConnectionType value () const { return (enum Qt::ConnectionType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ConnectionType>
template <>
struct Converter<QFlags<enum Qt::ConnectionType> >
{
public:
  typedef QFlags<enum Qt::ConnectionType> source_type;
  typedef Qt_ConnectionType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ConnectionType
template <>
struct Converter<enum Qt::ConnectionType>
{
public:
  typedef enum Qt::ConnectionType source_type;
  typedef Qt_ConnectionType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ShortcutContext>
class Qt_ShortcutContext_Enums : public QFlags<enum Qt::ShortcutContext> {
public:
  Qt_ShortcutContext_Enums () : m_flags () { }
  Qt_ShortcutContext_Enums (enum Qt::ShortcutContext v) : m_flags (v) { }
  Qt_ShortcutContext_Enums (const QFlags<enum Qt::ShortcutContext> &v) : m_flags (v) { }
  QFlags<enum Qt::ShortcutContext> flags () const { return m_flags; }
private:
  QFlags<Qt::ShortcutContext> m_flags;
};

//  Wrapper class for enum Qt::ShortcutContext
class Qt_ShortcutContext_Enum : public Qt_ShortcutContext_Enums {
public:
  Qt_ShortcutContext_Enum () { }
  Qt_ShortcutContext_Enum (enum Qt::ShortcutContext v) : Qt_ShortcutContext_Enums (v) { }
  enum Qt::ShortcutContext value () const { return (enum Qt::ShortcutContext) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ShortcutContext>
template <>
struct Converter<QFlags<enum Qt::ShortcutContext> >
{
public:
  typedef QFlags<enum Qt::ShortcutContext> source_type;
  typedef Qt_ShortcutContext_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ShortcutContext
template <>
struct Converter<enum Qt::ShortcutContext>
{
public:
  typedef enum Qt::ShortcutContext source_type;
  typedef Qt_ShortcutContext_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
