
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQGestureRecognizer.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQGestureRecognizer_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QGestureRecognizer

// QGesture *QGestureRecognizer::create(QObject *target)


static void _init_f_create_1302 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("target");
  decl->add_arg<QObject * > (argspec_0);
  decl->set_return<QGesture * > ();
}

static void _call_f_create_1302 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QObject *arg1 = args.read<QObject * > ();
  ret.write<QGesture * > ((QGesture *)((QGestureRecognizer *)cls)->create (arg1));
}

static qt_gsi::GenericMethod *_create_f_create_1302 ()
{
  return new qt_gsi::GenericMethod ("qt_create", "@brief Method QGesture *QGestureRecognizer::create(QObject *target)\n", false, &_init_f_create_1302, &_call_f_create_1302);
}

// QFlags<QGestureRecognizer::ResultFlag> QGestureRecognizer::recognize(QGesture *state, QObject *watched, QEvent *event)


static void _init_f_recognize_3741 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("state");
  decl->add_arg<QGesture * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("watched");
  decl->add_arg<QObject * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("event");
  decl->add_arg<QEvent * > (argspec_2);
  decl->set_return<qt_gsi::Converter<QFlags<QGestureRecognizer::ResultFlag> >::target_type > ();
}

static void _call_f_recognize_3741 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QGesture *arg1 = args.read<QGesture * > ();
  QObject *arg2 = args.read<QObject * > ();
  QEvent *arg3 = args.read<QEvent * > ();
  ret.write<qt_gsi::Converter<QFlags<QGestureRecognizer::ResultFlag> >::target_type > ((qt_gsi::Converter<QFlags<QGestureRecognizer::ResultFlag> >::target_type)qt_gsi::CppToQtAdaptor<QFlags<QGestureRecognizer::ResultFlag> >(((QGestureRecognizer *)cls)->recognize (arg1, arg2, arg3)));
}

static qt_gsi::GenericMethod *_create_f_recognize_3741 ()
{
  return new qt_gsi::GenericMethod ("recognize", "@brief Method QFlags<QGestureRecognizer::ResultFlag> QGestureRecognizer::recognize(QGesture *state, QObject *watched, QEvent *event)\n", false, &_init_f_recognize_3741, &_call_f_recognize_3741);
}

// void QGestureRecognizer::reset(QGesture *state)


static void _init_f_reset_1438 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("state");
  decl->add_arg<QGesture * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_reset_1438 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QGesture *arg1 = args.read<QGesture * > ();
  ((QGestureRecognizer *)cls)->reset (arg1);
}

static qt_gsi::GenericMethod *_create_f_reset_1438 ()
{
  return new qt_gsi::GenericMethod ("reset", "@brief Method void QGestureRecognizer::reset(QGesture *state)\n", false, &_init_f_reset_1438, &_call_f_reset_1438);
}

// static Qt::GestureType QGestureRecognizer::registerRecognizer(QGestureRecognizer *recognizer)


static void _init_f_registerRecognizer_2486 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("recognizer");
  decl->add_arg<QGestureRecognizer * > (argspec_0);
  decl->set_return<qt_gsi::Converter<Qt::GestureType>::target_type > ();
}

static void _call_f_registerRecognizer_2486 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QGestureRecognizer *arg1 = args.read<QGestureRecognizer * > ();
  ret.write<qt_gsi::Converter<Qt::GestureType>::target_type > ((qt_gsi::Converter<Qt::GestureType>::target_type)qt_gsi::CppToQtAdaptor<Qt::GestureType>(QGestureRecognizer::registerRecognizer (arg1)));
}

static qt_gsi::GenericStaticMethod *_create_f_registerRecognizer_2486 ()
{
  return new qt_gsi::GenericStaticMethod ("registerRecognizer", "@brief Static method Qt::GestureType QGestureRecognizer::registerRecognizer(QGestureRecognizer *recognizer)\nThis method is static and can be called without an instance.", &_init_f_registerRecognizer_2486, &_call_f_registerRecognizer_2486);
}

// static void QGestureRecognizer::unregisterRecognizer(Qt::GestureType type)


static void _init_f_unregisterRecognizer_1902 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("type");
  decl->add_arg<const qt_gsi::Converter<Qt::GestureType>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_unregisterRecognizer_1902 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<Qt::GestureType>::target_type & arg1 = args.read<const qt_gsi::Converter<Qt::GestureType>::target_type & > ();
  QGestureRecognizer::unregisterRecognizer (qt_gsi::QtToCppAdaptor<Qt::GestureType>(arg1).cref());
}

static qt_gsi::GenericStaticMethod *_create_f_unregisterRecognizer_1902 ()
{
  return new qt_gsi::GenericStaticMethod ("unregisterRecognizer", "@brief Static method void QGestureRecognizer::unregisterRecognizer(Qt::GestureType type)\nThis method is static and can be called without an instance.", &_init_f_unregisterRecognizer_1902, &_call_f_unregisterRecognizer_1902);
}

namespace gsi
{
gsi::Class<QGestureRecognizer> decl_QGestureRecognizer ("QGestureRecognizer_Native",
  gsi::Methods(_create_f_create_1302 ()) +
  gsi::Methods(_create_f_recognize_3741 ()) +
  gsi::Methods(_create_f_reset_1438 ()) +
  gsi::Methods(_create_f_registerRecognizer_2486 ()) +
  gsi::Methods(_create_f_unregisterRecognizer_1902 ()),
  "@hide\n@alias QGestureRecognizer");
}


class QGestureRecognizer_Adaptor : public QGestureRecognizer, public qt_gsi::QtObjectBase
{
public:

  virtual ~QGestureRecognizer_Adaptor();

  //  [adaptor ctor] QGestureRecognizer::QGestureRecognizer()
  QGestureRecognizer_Adaptor() : QGestureRecognizer()
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor impl] QGesture *QGestureRecognizer::create(QObject *target)
  QGesture * cbs_create_1302_0(QObject *target)
  {
    return QGestureRecognizer::create(target);
  }

  virtual QGesture * create(QObject *target)
  {
    if (cb_create_1302_0.can_issue()) {
      return cb_create_1302_0.issue<QGestureRecognizer_Adaptor, QGesture *, QObject *>(&QGestureRecognizer_Adaptor::cbs_create_1302_0, target);
    } else {
      return QGestureRecognizer::create(target);
    }
  }

  //  [adaptor impl] QFlags<QGestureRecognizer::ResultFlag> QGestureRecognizer::recognize(QGesture *state, QObject *watched, QEvent *event)
  qt_gsi::Converter<QFlags<QGestureRecognizer::ResultFlag> >::target_type cbs_recognize_3741_0(QGesture *state, QObject *watched, QEvent *event)
  {
    throw qt_gsi::AbstractMethodCalledException("recognize");
  }

  virtual QFlags<QGestureRecognizer::ResultFlag> recognize(QGesture *state, QObject *watched, QEvent *event)
  {
    if (cb_recognize_3741_0.can_issue()) {
      return qt_gsi::QtToCppAdaptor<QFlags<QGestureRecognizer::ResultFlag> >(cb_recognize_3741_0.issue<QGestureRecognizer_Adaptor, qt_gsi::Converter<QFlags<QGestureRecognizer::ResultFlag> >::target_type, QGesture *, QObject *, QEvent *>(&QGestureRecognizer_Adaptor::cbs_recognize_3741_0, state, watched, event)).cref();
    } else {
      throw qt_gsi::AbstractMethodCalledException("recognize");
    }
  }

  //  [adaptor impl] void QGestureRecognizer::reset(QGesture *state)
  void cbs_reset_1438_0(QGesture *state)
  {
    QGestureRecognizer::reset(state);
  }

  virtual void reset(QGesture *state)
  {
    if (cb_reset_1438_0.can_issue()) {
      cb_reset_1438_0.issue<QGestureRecognizer_Adaptor, QGesture *>(&QGestureRecognizer_Adaptor::cbs_reset_1438_0, state);
    } else {
      QGestureRecognizer::reset(state);
    }
  }

  gsi::Callback cb_create_1302_0;
  gsi::Callback cb_recognize_3741_0;
  gsi::Callback cb_reset_1438_0;
};

QGestureRecognizer_Adaptor::~QGestureRecognizer_Adaptor() { }

//  Constructor QGestureRecognizer::QGestureRecognizer() (adaptor class)

static void _init_ctor_QGestureRecognizer_Adaptor_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QGestureRecognizer_Adaptor *> ();
}

static void _call_ctor_QGestureRecognizer_Adaptor_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QGestureRecognizer_Adaptor *> (new QGestureRecognizer_Adaptor ());
}

static qt_gsi::GenericStaticMethod *_create_ctor_QGestureRecognizer_Adaptor_0 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QGestureRecognizer::QGestureRecognizer()\nThis method creates an object of class QGestureRecognizer.", &_init_ctor_QGestureRecognizer_Adaptor_0, &_call_ctor_QGestureRecognizer_Adaptor_0);
}

// QGesture *QGestureRecognizer::create(QObject *target)

static void _init_cbs_create_1302_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("target");
  decl->add_arg<QObject * > (argspec_0);
  decl->set_return<QGesture * > ();
}

static void _call_cbs_create_1302_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QObject *arg1 = args.read<QObject * > ();
  ret.write<QGesture * > ((QGesture *)((QGestureRecognizer_Adaptor *)cls)->cbs_create_1302_0 (arg1));
}

static void _set_callback_cbs_create_1302_0 (void *cls, const gsi::Callback &cb)
{
  ((QGestureRecognizer_Adaptor *)cls)->cb_create_1302_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_create_1302_0 ()
{
  return new qt_gsi::GenericMethod ("qt_create", "@hide", false, &_init_cbs_create_1302_0, &_call_cbs_create_1302_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_create_1302_0 ()
{
  return new qt_gsi::GenericMethod ("qt_create", "@brief Virtual method QGesture *QGestureRecognizer::create(QObject *target)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_create_1302_0, &_call_cbs_create_1302_0, &_set_callback_cbs_create_1302_0);
}


// QFlags<QGestureRecognizer::ResultFlag> QGestureRecognizer::recognize(QGesture *state, QObject *watched, QEvent *event)

static void _init_cbs_recognize_3741_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("state");
  decl->add_arg<QGesture * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("watched");
  decl->add_arg<QObject * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("event");
  decl->add_arg<QEvent * > (argspec_2);
  decl->set_return<qt_gsi::Converter<QFlags<QGestureRecognizer::ResultFlag> >::target_type > ();
}

static void _call_cbs_recognize_3741_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QGesture *arg1 = args.read<QGesture * > ();
  QObject *arg2 = args.read<QObject * > ();
  QEvent *arg3 = args.read<QEvent * > ();
  ret.write<qt_gsi::Converter<QFlags<QGestureRecognizer::ResultFlag> >::target_type > ((qt_gsi::Converter<QFlags<QGestureRecognizer::ResultFlag> >::target_type)((QGestureRecognizer_Adaptor *)cls)->cbs_recognize_3741_0 (arg1, arg2, arg3));
}

static void _set_callback_cbs_recognize_3741_0 (void *cls, const gsi::Callback &cb)
{
  ((QGestureRecognizer_Adaptor *)cls)->cb_recognize_3741_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_recognize_3741_0 ()
{
  return new qt_gsi::GenericMethod ("recognize", "@hide", false, &_init_cbs_recognize_3741_0, &_call_cbs_recognize_3741_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_recognize_3741_0 ()
{
  return new qt_gsi::GenericMethod ("recognize", "@brief Virtual method QFlags<QGestureRecognizer::ResultFlag> QGestureRecognizer::recognize(QGesture *state, QObject *watched, QEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_recognize_3741_0, &_call_cbs_recognize_3741_0, &_set_callback_cbs_recognize_3741_0);
}


// void QGestureRecognizer::reset(QGesture *state)

static void _init_cbs_reset_1438_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("state");
  decl->add_arg<QGesture * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_reset_1438_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QGesture *arg1 = args.read<QGesture * > ();
  ((QGestureRecognizer_Adaptor *)cls)->cbs_reset_1438_0 (arg1);
}

static void _set_callback_cbs_reset_1438_0 (void *cls, const gsi::Callback &cb)
{
  ((QGestureRecognizer_Adaptor *)cls)->cb_reset_1438_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_reset_1438_0 ()
{
  return new qt_gsi::GenericMethod ("reset", "@hide", false, &_init_cbs_reset_1438_0, &_call_cbs_reset_1438_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_reset_1438_0 ()
{
  return new qt_gsi::GenericMethod ("reset", "@brief Virtual method void QGestureRecognizer::reset(QGesture *state)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_reset_1438_0, &_call_cbs_reset_1438_0, &_set_callback_cbs_reset_1438_0);
}


namespace gsi
{

extern gsi::Class<QGestureRecognizer> decl_QGestureRecognizer;

gsi::Class<QGestureRecognizer_Adaptor> decl_QGestureRecognizer_Adaptor (decl_QGestureRecognizer, "QGestureRecognizer",
  gsi::Methods(_create_cbs_create_1302_0 ()) +
  gsi::Methods(_create_callback_cbs_create_1302_0 ()) +
  gsi::Methods(_create_cbs_recognize_3741_0 ()) +
  gsi::Methods(_create_callback_cbs_recognize_3741_0 ()) +
  gsi::Methods(_create_cbs_reset_1438_0 ()) +
  gsi::Methods(_create_callback_cbs_reset_1438_0 ()) +
  gsi::Methods(_create_ctor_QGestureRecognizer_Adaptor_0 ()),
  "@qt\n@brief Binding of QGestureRecognizer");

}


//  Implementation of the enum wrapper class for QGestureRecognizer::ResultFlag
namespace qt_gsi
{

static QGestureRecognizer_ResultFlag_Enum *c_1_QGestureRecognizer_ResultFlag_Enum () { return new QGestureRecognizer_ResultFlag_Enum (QGestureRecognizer::Ignore); }
static QGestureRecognizer_ResultFlag_Enum *c_2_QGestureRecognizer_ResultFlag_Enum () { return new QGestureRecognizer_ResultFlag_Enum (QGestureRecognizer::MayBeGesture); }
static QGestureRecognizer_ResultFlag_Enum *c_3_QGestureRecognizer_ResultFlag_Enum () { return new QGestureRecognizer_ResultFlag_Enum (QGestureRecognizer::TriggerGesture); }
static QGestureRecognizer_ResultFlag_Enum *c_4_QGestureRecognizer_ResultFlag_Enum () { return new QGestureRecognizer_ResultFlag_Enum (QGestureRecognizer::FinishGesture); }
static QGestureRecognizer_ResultFlag_Enum *c_5_QGestureRecognizer_ResultFlag_Enum () { return new QGestureRecognizer_ResultFlag_Enum (QGestureRecognizer::CancelGesture); }
static QGestureRecognizer_ResultFlag_Enum *c_6_QGestureRecognizer_ResultFlag_Enum () { return new QGestureRecognizer_ResultFlag_Enum (QGestureRecognizer::ResultState_Mask); }
static QGestureRecognizer_ResultFlag_Enum *c_7_QGestureRecognizer_ResultFlag_Enum () { return new QGestureRecognizer_ResultFlag_Enum (QGestureRecognizer::ConsumeEventHint); }
static QGestureRecognizer_ResultFlag_Enum *c_8_QGestureRecognizer_ResultFlag_Enum () { return new QGestureRecognizer_ResultFlag_Enum (QGestureRecognizer::ResultHint_Mask); }

static gsi::Methods mkdefs_QGestureRecognizer_ResultFlag () {
  return
    gsi::constant ("Ignore", &qt_gsi::c_1_QGestureRecognizer_ResultFlag_Enum, "@brief Enum constant QGestureRecognizer::Ignore") +
    gsi::constant ("MayBeGesture", &qt_gsi::c_2_QGestureRecognizer_ResultFlag_Enum, "@brief Enum constant QGestureRecognizer::MayBeGesture") +
    gsi::constant ("TriggerGesture", &qt_gsi::c_3_QGestureRecognizer_ResultFlag_Enum, "@brief Enum constant QGestureRecognizer::TriggerGesture") +
    gsi::constant ("FinishGesture", &qt_gsi::c_4_QGestureRecognizer_ResultFlag_Enum, "@brief Enum constant QGestureRecognizer::FinishGesture") +
    gsi::constant ("CancelGesture", &qt_gsi::c_5_QGestureRecognizer_ResultFlag_Enum, "@brief Enum constant QGestureRecognizer::CancelGesture") +
    gsi::constant ("ResultState_Mask", &qt_gsi::c_6_QGestureRecognizer_ResultFlag_Enum, "@brief Enum constant QGestureRecognizer::ResultState_Mask") +
    gsi::constant ("ConsumeEventHint", &qt_gsi::c_7_QGestureRecognizer_ResultFlag_Enum, "@brief Enum constant QGestureRecognizer::ConsumeEventHint") +
    gsi::constant ("ResultHint_Mask", &qt_gsi::c_8_QGestureRecognizer_ResultFlag_Enum, "@brief Enum constant QGestureRecognizer::ResultHint_Mask");
}

static std::string to_s_QGestureRecognizer_ResultFlag_Enum (const QGestureRecognizer_ResultFlag_Enum *e)
{
  if (e->value () == QGestureRecognizer::Ignore) { return tl::sprintf ("Ignore (%u)", (unsigned int) e->value ()); }
  if (e->value () == QGestureRecognizer::MayBeGesture) { return tl::sprintf ("MayBeGesture (%u)", (unsigned int) e->value ()); }
  if (e->value () == QGestureRecognizer::TriggerGesture) { return tl::sprintf ("TriggerGesture (%u)", (unsigned int) e->value ()); }
  if (e->value () == QGestureRecognizer::FinishGesture) { return tl::sprintf ("FinishGesture (%u)", (unsigned int) e->value ()); }
  if (e->value () == QGestureRecognizer::CancelGesture) { return tl::sprintf ("CancelGesture (%u)", (unsigned int) e->value ()); }
  if (e->value () == QGestureRecognizer::ResultState_Mask) { return tl::sprintf ("ResultState_Mask (%u)", (unsigned int) e->value ()); }
  if (e->value () == QGestureRecognizer::ConsumeEventHint) { return tl::sprintf ("ConsumeEventHint (%u)", (unsigned int) e->value ()); }
  if (e->value () == QGestureRecognizer::ResultHint_Mask) { return tl::sprintf ("ResultHint_Mask (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QGestureRecognizer_ResultFlag_Enum (const QGestureRecognizer_ResultFlag_Enum *e)
{
  return (unsigned int) e->value ();
}

static QGestureRecognizer_ResultFlag_Enum *from_i_QGestureRecognizer_ResultFlag_Enum (unsigned int i)
{
  return new QGestureRecognizer_ResultFlag_Enum ((QGestureRecognizer::ResultFlag) i);
}

static bool equalQGestureRecognizer_ResultFlag_Enum (const QGestureRecognizer_ResultFlag_Enum *e, QGestureRecognizer_ResultFlag_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QGestureRecognizer_ResultFlag_Enum (const QGestureRecognizer_ResultFlag_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QGestureRecognizer_ResultFlag_Enums oropQGestureRecognizer_ResultFlag_Enums (const QGestureRecognizer_ResultFlag_Enums *e, const QGestureRecognizer_ResultFlag_Enums &d)
{
  return e->flags () | d.flags ();
}

static QGestureRecognizer_ResultFlag_Enums andopQGestureRecognizer_ResultFlag_Enums (const QGestureRecognizer_ResultFlag_Enums *e, const QGestureRecognizer_ResultFlag_Enums &d)
{
  return e->flags () & d.flags ();
}

static QGestureRecognizer_ResultFlag_Enums xoropQGestureRecognizer_ResultFlag_Enums (const QGestureRecognizer_ResultFlag_Enums *e, const QGestureRecognizer_ResultFlag_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QGestureRecognizer_ResultFlag_Enums (const QGestureRecognizer_ResultFlag_Enums *e)
{
  std::string l;
  if (e->testFlag (QGestureRecognizer::Ignore)) { if (!l.empty ()) l += "|"; l += "Ignore"; }
  if (e->testFlag (QGestureRecognizer::MayBeGesture)) { if (!l.empty ()) l += "|"; l += "MayBeGesture"; }
  if (e->testFlag (QGestureRecognizer::TriggerGesture)) { if (!l.empty ()) l += "|"; l += "TriggerGesture"; }
  if (e->testFlag (QGestureRecognizer::FinishGesture)) { if (!l.empty ()) l += "|"; l += "FinishGesture"; }
  if (e->testFlag (QGestureRecognizer::CancelGesture)) { if (!l.empty ()) l += "|"; l += "CancelGesture"; }
  if (e->testFlag (QGestureRecognizer::ResultState_Mask)) { if (!l.empty ()) l += "|"; l += "ResultState_Mask"; }
  if (e->testFlag (QGestureRecognizer::ConsumeEventHint)) { if (!l.empty ()) l += "|"; l += "ConsumeEventHint"; }
  if (e->testFlag (QGestureRecognizer::ResultHint_Mask)) { if (!l.empty ()) l += "|"; l += "ResultHint_Mask"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QGestureRecognizer_ResultFlag_Enums (const QGestureRecognizer_ResultFlag_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QGestureRecognizer_ResultFlag_Enums (const QGestureRecognizer_ResultFlag_Enums *e, const QGestureRecognizer_ResultFlag_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QGestureRecognizer_ResultFlag_Enums> decl_QGestureRecognizer_ResultFlag_Enums ("QGestureRecognizer_QFlags_ResultFlag",
  gsi::method_ext ("|", &qt_gsi::oropQGestureRecognizer_ResultFlag_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQGestureRecognizer_ResultFlag_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQGestureRecognizer_ResultFlag_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QGestureRecognizer_ResultFlag_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QGestureRecognizer_ResultFlag_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QGestureRecognizer_ResultFlag_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QGestureRecognizer::ResultFlag> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QGestureRecognizer_ResultFlag_Enum> decl_QGestureRecognizer_ResultFlag_Enum (decl_QGestureRecognizer_ResultFlag_Enums, "QGestureRecognizer_ResultFlag",
  qt_gsi::mkdefs_QGestureRecognizer_ResultFlag () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QGestureRecognizer_ResultFlag_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QGestureRecognizer_ResultFlag_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQGestureRecognizer_ResultFlag_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QGestureRecognizer_ResultFlag_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QGestureRecognizer_ResultFlag_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QGestureRecognizer::ResultFlag enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QGestureRecognizer> inject_QGestureRecognizer_ResultFlag_Enum_in_parent (qt_gsi::mkdefs_QGestureRecognizer_ResultFlag ());
static gsi::ClassExt<QGestureRecognizer> decl_QGestureRecognizer_ResultFlag_Enum_as_child (decl_QGestureRecognizer_ResultFlag_Enum, "ResultFlag");

}

