
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQGraphicsProxyWidget_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQGraphicsProxyWidget_Enums
#define _HDR_gsiDeclQGraphicsProxyWidget_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QGraphicsItem::CacheMode>
class QGraphicsItem_CacheMode_Enums : public QFlags<enum QGraphicsItem::CacheMode> {
public:
  QGraphicsItem_CacheMode_Enums () : m_flags () { }
  QGraphicsItem_CacheMode_Enums (enum QGraphicsItem::CacheMode v) : m_flags (v) { }
  QGraphicsItem_CacheMode_Enums (const QFlags<enum QGraphicsItem::CacheMode> &v) : m_flags (v) { }
  QFlags<enum QGraphicsItem::CacheMode> flags () const { return m_flags; }
private:
  QFlags<QGraphicsItem::CacheMode> m_flags;
};

//  Wrapper class for enum QGraphicsItem::CacheMode
class QGraphicsItem_CacheMode_Enum : public QGraphicsItem_CacheMode_Enums {
public:
  QGraphicsItem_CacheMode_Enum () { }
  QGraphicsItem_CacheMode_Enum (enum QGraphicsItem::CacheMode v) : QGraphicsItem_CacheMode_Enums (v) { }
  enum QGraphicsItem::CacheMode value () const { return (enum QGraphicsItem::CacheMode) flags ().operator int (); }
};

//  Converter for QFlags<enum QGraphicsItem::CacheMode>
template <>
struct Converter<QFlags<enum QGraphicsItem::CacheMode> >
{
public:
  typedef QFlags<enum QGraphicsItem::CacheMode> source_type;
  typedef QGraphicsItem_CacheMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QGraphicsItem::CacheMode
template <>
struct Converter<enum QGraphicsItem::CacheMode>
{
public:
  typedef enum QGraphicsItem::CacheMode source_type;
  typedef QGraphicsItem_CacheMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QGraphicsItem::GraphicsItemChange>
class QGraphicsItem_GraphicsItemChange_Enums : public QFlags<enum QGraphicsItem::GraphicsItemChange> {
public:
  QGraphicsItem_GraphicsItemChange_Enums () : m_flags () { }
  QGraphicsItem_GraphicsItemChange_Enums (enum QGraphicsItem::GraphicsItemChange v) : m_flags (v) { }
  QGraphicsItem_GraphicsItemChange_Enums (const QFlags<enum QGraphicsItem::GraphicsItemChange> &v) : m_flags (v) { }
  QFlags<enum QGraphicsItem::GraphicsItemChange> flags () const { return m_flags; }
private:
  QFlags<QGraphicsItem::GraphicsItemChange> m_flags;
};

//  Wrapper class for enum QGraphicsItem::GraphicsItemChange
class QGraphicsItem_GraphicsItemChange_Enum : public QGraphicsItem_GraphicsItemChange_Enums {
public:
  QGraphicsItem_GraphicsItemChange_Enum () { }
  QGraphicsItem_GraphicsItemChange_Enum (enum QGraphicsItem::GraphicsItemChange v) : QGraphicsItem_GraphicsItemChange_Enums (v) { }
  enum QGraphicsItem::GraphicsItemChange value () const { return (enum QGraphicsItem::GraphicsItemChange) flags ().operator int (); }
};

//  Converter for QFlags<enum QGraphicsItem::GraphicsItemChange>
template <>
struct Converter<QFlags<enum QGraphicsItem::GraphicsItemChange> >
{
public:
  typedef QFlags<enum QGraphicsItem::GraphicsItemChange> source_type;
  typedef QGraphicsItem_GraphicsItemChange_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QGraphicsItem::GraphicsItemChange
template <>
struct Converter<enum QGraphicsItem::GraphicsItemChange>
{
public:
  typedef enum QGraphicsItem::GraphicsItemChange source_type;
  typedef QGraphicsItem_GraphicsItemChange_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QGraphicsItem::GraphicsItemFlag>
class QGraphicsItem_GraphicsItemFlag_Enums : public QFlags<enum QGraphicsItem::GraphicsItemFlag> {
public:
  QGraphicsItem_GraphicsItemFlag_Enums () : m_flags () { }
  QGraphicsItem_GraphicsItemFlag_Enums (enum QGraphicsItem::GraphicsItemFlag v) : m_flags (v) { }
  QGraphicsItem_GraphicsItemFlag_Enums (const QFlags<enum QGraphicsItem::GraphicsItemFlag> &v) : m_flags (v) { }
  QFlags<enum QGraphicsItem::GraphicsItemFlag> flags () const { return m_flags; }
private:
  QFlags<QGraphicsItem::GraphicsItemFlag> m_flags;
};

//  Wrapper class for enum QGraphicsItem::GraphicsItemFlag
class QGraphicsItem_GraphicsItemFlag_Enum : public QGraphicsItem_GraphicsItemFlag_Enums {
public:
  QGraphicsItem_GraphicsItemFlag_Enum () { }
  QGraphicsItem_GraphicsItemFlag_Enum (enum QGraphicsItem::GraphicsItemFlag v) : QGraphicsItem_GraphicsItemFlag_Enums (v) { }
  enum QGraphicsItem::GraphicsItemFlag value () const { return (enum QGraphicsItem::GraphicsItemFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum QGraphicsItem::GraphicsItemFlag>
template <>
struct Converter<QFlags<enum QGraphicsItem::GraphicsItemFlag> >
{
public:
  typedef QFlags<enum QGraphicsItem::GraphicsItemFlag> source_type;
  typedef QGraphicsItem_GraphicsItemFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QGraphicsItem::GraphicsItemFlag
template <>
struct Converter<enum QGraphicsItem::GraphicsItemFlag>
{
public:
  typedef enum QGraphicsItem::GraphicsItemFlag source_type;
  typedef QGraphicsItem_GraphicsItemFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QGraphicsItem::PanelModality>
class QGraphicsItem_PanelModality_Enums : public QFlags<enum QGraphicsItem::PanelModality> {
public:
  QGraphicsItem_PanelModality_Enums () : m_flags () { }
  QGraphicsItem_PanelModality_Enums (enum QGraphicsItem::PanelModality v) : m_flags (v) { }
  QGraphicsItem_PanelModality_Enums (const QFlags<enum QGraphicsItem::PanelModality> &v) : m_flags (v) { }
  QFlags<enum QGraphicsItem::PanelModality> flags () const { return m_flags; }
private:
  QFlags<QGraphicsItem::PanelModality> m_flags;
};

//  Wrapper class for enum QGraphicsItem::PanelModality
class QGraphicsItem_PanelModality_Enum : public QGraphicsItem_PanelModality_Enums {
public:
  QGraphicsItem_PanelModality_Enum () { }
  QGraphicsItem_PanelModality_Enum (enum QGraphicsItem::PanelModality v) : QGraphicsItem_PanelModality_Enums (v) { }
  enum QGraphicsItem::PanelModality value () const { return (enum QGraphicsItem::PanelModality) flags ().operator int (); }
};

//  Converter for QFlags<enum QGraphicsItem::PanelModality>
template <>
struct Converter<QFlags<enum QGraphicsItem::PanelModality> >
{
public:
  typedef QFlags<enum QGraphicsItem::PanelModality> source_type;
  typedef QGraphicsItem_PanelModality_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QGraphicsItem::PanelModality
template <>
struct Converter<enum QGraphicsItem::PanelModality>
{
public:
  typedef enum QGraphicsItem::PanelModality source_type;
  typedef QGraphicsItem_PanelModality_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSizePolicy::ControlType>
class QSizePolicy_ControlType_Enums : public QFlags<enum QSizePolicy::ControlType> {
public:
  QSizePolicy_ControlType_Enums () : m_flags () { }
  QSizePolicy_ControlType_Enums (enum QSizePolicy::ControlType v) : m_flags (v) { }
  QSizePolicy_ControlType_Enums (const QFlags<enum QSizePolicy::ControlType> &v) : m_flags (v) { }
  QFlags<enum QSizePolicy::ControlType> flags () const { return m_flags; }
private:
  QFlags<QSizePolicy::ControlType> m_flags;
};

//  Wrapper class for enum QSizePolicy::ControlType
class QSizePolicy_ControlType_Enum : public QSizePolicy_ControlType_Enums {
public:
  QSizePolicy_ControlType_Enum () { }
  QSizePolicy_ControlType_Enum (enum QSizePolicy::ControlType v) : QSizePolicy_ControlType_Enums (v) { }
  enum QSizePolicy::ControlType value () const { return (enum QSizePolicy::ControlType) flags ().operator int (); }
};

//  Converter for QFlags<enum QSizePolicy::ControlType>
template <>
struct Converter<QFlags<enum QSizePolicy::ControlType> >
{
public:
  typedef QFlags<enum QSizePolicy::ControlType> source_type;
  typedef QSizePolicy_ControlType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSizePolicy::ControlType
template <>
struct Converter<enum QSizePolicy::ControlType>
{
public:
  typedef enum QSizePolicy::ControlType source_type;
  typedef QSizePolicy_ControlType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QSizePolicy::Policy>
class QSizePolicy_Policy_Enums : public QFlags<enum QSizePolicy::Policy> {
public:
  QSizePolicy_Policy_Enums () : m_flags () { }
  QSizePolicy_Policy_Enums (enum QSizePolicy::Policy v) : m_flags (v) { }
  QSizePolicy_Policy_Enums (const QFlags<enum QSizePolicy::Policy> &v) : m_flags (v) { }
  QFlags<enum QSizePolicy::Policy> flags () const { return m_flags; }
private:
  QFlags<QSizePolicy::Policy> m_flags;
};

//  Wrapper class for enum QSizePolicy::Policy
class QSizePolicy_Policy_Enum : public QSizePolicy_Policy_Enums {
public:
  QSizePolicy_Policy_Enum () { }
  QSizePolicy_Policy_Enum (enum QSizePolicy::Policy v) : QSizePolicy_Policy_Enums (v) { }
  enum QSizePolicy::Policy value () const { return (enum QSizePolicy::Policy) flags ().operator int (); }
};

//  Converter for QFlags<enum QSizePolicy::Policy>
template <>
struct Converter<QFlags<enum QSizePolicy::Policy> >
{
public:
  typedef QFlags<enum QSizePolicy::Policy> source_type;
  typedef QSizePolicy_Policy_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QSizePolicy::Policy
template <>
struct Converter<enum QSizePolicy::Policy>
{
public:
  typedef enum QSizePolicy::Policy source_type;
  typedef QSizePolicy_Policy_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ConnectionType>
class Qt_ConnectionType_Enums : public QFlags<enum Qt::ConnectionType> {
public:
  Qt_ConnectionType_Enums () : m_flags () { }
  Qt_ConnectionType_Enums (enum Qt::ConnectionType v) : m_flags (v) { }
  Qt_ConnectionType_Enums (const QFlags<enum Qt::ConnectionType> &v) : m_flags (v) { }
  QFlags<enum Qt::ConnectionType> flags () const { return m_flags; }
private:
  QFlags<Qt::ConnectionType> m_flags;
};

//  Wrapper class for enum Qt::ConnectionType
class Qt_ConnectionType_Enum : public Qt_ConnectionType_Enums {
public:
  Qt_ConnectionType_Enum () { }
  Qt_ConnectionType_Enum (enum Qt::ConnectionType v) : Qt_ConnectionType_Enums (v) { }
  enum Qt::ConnectionType value () const { return (enum Qt::ConnectionType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ConnectionType>
template <>
struct Converter<QFlags<enum Qt::ConnectionType> >
{
public:
  typedef QFlags<enum Qt::ConnectionType> source_type;
  typedef Qt_ConnectionType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ConnectionType
template <>
struct Converter<enum Qt::ConnectionType>
{
public:
  typedef enum Qt::ConnectionType source_type;
  typedef Qt_ConnectionType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::FocusPolicy>
class Qt_FocusPolicy_Enums : public QFlags<enum Qt::FocusPolicy> {
public:
  Qt_FocusPolicy_Enums () : m_flags () { }
  Qt_FocusPolicy_Enums (enum Qt::FocusPolicy v) : m_flags (v) { }
  Qt_FocusPolicy_Enums (const QFlags<enum Qt::FocusPolicy> &v) : m_flags (v) { }
  QFlags<enum Qt::FocusPolicy> flags () const { return m_flags; }
private:
  QFlags<Qt::FocusPolicy> m_flags;
};

//  Wrapper class for enum Qt::FocusPolicy
class Qt_FocusPolicy_Enum : public Qt_FocusPolicy_Enums {
public:
  Qt_FocusPolicy_Enum () { }
  Qt_FocusPolicy_Enum (enum Qt::FocusPolicy v) : Qt_FocusPolicy_Enums (v) { }
  enum Qt::FocusPolicy value () const { return (enum Qt::FocusPolicy) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::FocusPolicy>
template <>
struct Converter<QFlags<enum Qt::FocusPolicy> >
{
public:
  typedef QFlags<enum Qt::FocusPolicy> source_type;
  typedef Qt_FocusPolicy_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::FocusPolicy
template <>
struct Converter<enum Qt::FocusPolicy>
{
public:
  typedef enum Qt::FocusPolicy source_type;
  typedef Qt_FocusPolicy_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::FocusReason>
class Qt_FocusReason_Enums : public QFlags<enum Qt::FocusReason> {
public:
  Qt_FocusReason_Enums () : m_flags () { }
  Qt_FocusReason_Enums (enum Qt::FocusReason v) : m_flags (v) { }
  Qt_FocusReason_Enums (const QFlags<enum Qt::FocusReason> &v) : m_flags (v) { }
  QFlags<enum Qt::FocusReason> flags () const { return m_flags; }
private:
  QFlags<Qt::FocusReason> m_flags;
};

//  Wrapper class for enum Qt::FocusReason
class Qt_FocusReason_Enum : public Qt_FocusReason_Enums {
public:
  Qt_FocusReason_Enum () { }
  Qt_FocusReason_Enum (enum Qt::FocusReason v) : Qt_FocusReason_Enums (v) { }
  enum Qt::FocusReason value () const { return (enum Qt::FocusReason) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::FocusReason>
template <>
struct Converter<QFlags<enum Qt::FocusReason> >
{
public:
  typedef QFlags<enum Qt::FocusReason> source_type;
  typedef Qt_FocusReason_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::FocusReason
template <>
struct Converter<enum Qt::FocusReason>
{
public:
  typedef enum Qt::FocusReason source_type;
  typedef Qt_FocusReason_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::GestureFlag>
class Qt_GestureFlag_Enums : public QFlags<enum Qt::GestureFlag> {
public:
  Qt_GestureFlag_Enums () : m_flags () { }
  Qt_GestureFlag_Enums (enum Qt::GestureFlag v) : m_flags (v) { }
  Qt_GestureFlag_Enums (const QFlags<enum Qt::GestureFlag> &v) : m_flags (v) { }
  QFlags<enum Qt::GestureFlag> flags () const { return m_flags; }
private:
  QFlags<Qt::GestureFlag> m_flags;
};

//  Wrapper class for enum Qt::GestureFlag
class Qt_GestureFlag_Enum : public Qt_GestureFlag_Enums {
public:
  Qt_GestureFlag_Enum () { }
  Qt_GestureFlag_Enum (enum Qt::GestureFlag v) : Qt_GestureFlag_Enums (v) { }
  enum Qt::GestureFlag value () const { return (enum Qt::GestureFlag) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::GestureFlag>
template <>
struct Converter<QFlags<enum Qt::GestureFlag> >
{
public:
  typedef QFlags<enum Qt::GestureFlag> source_type;
  typedef Qt_GestureFlag_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::GestureFlag
template <>
struct Converter<enum Qt::GestureFlag>
{
public:
  typedef enum Qt::GestureFlag source_type;
  typedef Qt_GestureFlag_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::GestureType>
class Qt_GestureType_Enums : public QFlags<enum Qt::GestureType> {
public:
  Qt_GestureType_Enums () : m_flags () { }
  Qt_GestureType_Enums (enum Qt::GestureType v) : m_flags (v) { }
  Qt_GestureType_Enums (const QFlags<enum Qt::GestureType> &v) : m_flags (v) { }
  QFlags<enum Qt::GestureType> flags () const { return m_flags; }
private:
  QFlags<Qt::GestureType> m_flags;
};

//  Wrapper class for enum Qt::GestureType
class Qt_GestureType_Enum : public Qt_GestureType_Enums {
public:
  Qt_GestureType_Enum () { }
  Qt_GestureType_Enum (enum Qt::GestureType v) : Qt_GestureType_Enums (v) { }
  enum Qt::GestureType value () const { return (enum Qt::GestureType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::GestureType>
template <>
struct Converter<QFlags<enum Qt::GestureType> >
{
public:
  typedef QFlags<enum Qt::GestureType> source_type;
  typedef Qt_GestureType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::GestureType
template <>
struct Converter<enum Qt::GestureType>
{
public:
  typedef enum Qt::GestureType source_type;
  typedef Qt_GestureType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::InputMethodHint>
class Qt_InputMethodHint_Enums : public QFlags<enum Qt::InputMethodHint> {
public:
  Qt_InputMethodHint_Enums () : m_flags () { }
  Qt_InputMethodHint_Enums (enum Qt::InputMethodHint v) : m_flags (v) { }
  Qt_InputMethodHint_Enums (const QFlags<enum Qt::InputMethodHint> &v) : m_flags (v) { }
  QFlags<enum Qt::InputMethodHint> flags () const { return m_flags; }
private:
  QFlags<Qt::InputMethodHint> m_flags;
};

//  Wrapper class for enum Qt::InputMethodHint
class Qt_InputMethodHint_Enum : public Qt_InputMethodHint_Enums {
public:
  Qt_InputMethodHint_Enum () { }
  Qt_InputMethodHint_Enum (enum Qt::InputMethodHint v) : Qt_InputMethodHint_Enums (v) { }
  enum Qt::InputMethodHint value () const { return (enum Qt::InputMethodHint) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::InputMethodHint>
template <>
struct Converter<QFlags<enum Qt::InputMethodHint> >
{
public:
  typedef QFlags<enum Qt::InputMethodHint> source_type;
  typedef Qt_InputMethodHint_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::InputMethodHint
template <>
struct Converter<enum Qt::InputMethodHint>
{
public:
  typedef enum Qt::InputMethodHint source_type;
  typedef Qt_InputMethodHint_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::InputMethodQuery>
class Qt_InputMethodQuery_Enums : public QFlags<enum Qt::InputMethodQuery> {
public:
  Qt_InputMethodQuery_Enums () : m_flags () { }
  Qt_InputMethodQuery_Enums (enum Qt::InputMethodQuery v) : m_flags (v) { }
  Qt_InputMethodQuery_Enums (const QFlags<enum Qt::InputMethodQuery> &v) : m_flags (v) { }
  QFlags<enum Qt::InputMethodQuery> flags () const { return m_flags; }
private:
  QFlags<Qt::InputMethodQuery> m_flags;
};

//  Wrapper class for enum Qt::InputMethodQuery
class Qt_InputMethodQuery_Enum : public Qt_InputMethodQuery_Enums {
public:
  Qt_InputMethodQuery_Enum () { }
  Qt_InputMethodQuery_Enum (enum Qt::InputMethodQuery v) : Qt_InputMethodQuery_Enums (v) { }
  enum Qt::InputMethodQuery value () const { return (enum Qt::InputMethodQuery) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::InputMethodQuery>
template <>
struct Converter<QFlags<enum Qt::InputMethodQuery> >
{
public:
  typedef QFlags<enum Qt::InputMethodQuery> source_type;
  typedef Qt_InputMethodQuery_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::InputMethodQuery
template <>
struct Converter<enum Qt::InputMethodQuery>
{
public:
  typedef enum Qt::InputMethodQuery source_type;
  typedef Qt_InputMethodQuery_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ItemSelectionMode>
class Qt_ItemSelectionMode_Enums : public QFlags<enum Qt::ItemSelectionMode> {
public:
  Qt_ItemSelectionMode_Enums () : m_flags () { }
  Qt_ItemSelectionMode_Enums (enum Qt::ItemSelectionMode v) : m_flags (v) { }
  Qt_ItemSelectionMode_Enums (const QFlags<enum Qt::ItemSelectionMode> &v) : m_flags (v) { }
  QFlags<enum Qt::ItemSelectionMode> flags () const { return m_flags; }
private:
  QFlags<Qt::ItemSelectionMode> m_flags;
};

//  Wrapper class for enum Qt::ItemSelectionMode
class Qt_ItemSelectionMode_Enum : public Qt_ItemSelectionMode_Enums {
public:
  Qt_ItemSelectionMode_Enum () { }
  Qt_ItemSelectionMode_Enum (enum Qt::ItemSelectionMode v) : Qt_ItemSelectionMode_Enums (v) { }
  enum Qt::ItemSelectionMode value () const { return (enum Qt::ItemSelectionMode) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ItemSelectionMode>
template <>
struct Converter<QFlags<enum Qt::ItemSelectionMode> >
{
public:
  typedef QFlags<enum Qt::ItemSelectionMode> source_type;
  typedef Qt_ItemSelectionMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ItemSelectionMode
template <>
struct Converter<enum Qt::ItemSelectionMode>
{
public:
  typedef enum Qt::ItemSelectionMode source_type;
  typedef Qt_ItemSelectionMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::LayoutDirection>
class Qt_LayoutDirection_Enums : public QFlags<enum Qt::LayoutDirection> {
public:
  Qt_LayoutDirection_Enums () : m_flags () { }
  Qt_LayoutDirection_Enums (enum Qt::LayoutDirection v) : m_flags (v) { }
  Qt_LayoutDirection_Enums (const QFlags<enum Qt::LayoutDirection> &v) : m_flags (v) { }
  QFlags<enum Qt::LayoutDirection> flags () const { return m_flags; }
private:
  QFlags<Qt::LayoutDirection> m_flags;
};

//  Wrapper class for enum Qt::LayoutDirection
class Qt_LayoutDirection_Enum : public Qt_LayoutDirection_Enums {
public:
  Qt_LayoutDirection_Enum () { }
  Qt_LayoutDirection_Enum (enum Qt::LayoutDirection v) : Qt_LayoutDirection_Enums (v) { }
  enum Qt::LayoutDirection value () const { return (enum Qt::LayoutDirection) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::LayoutDirection>
template <>
struct Converter<QFlags<enum Qt::LayoutDirection> >
{
public:
  typedef QFlags<enum Qt::LayoutDirection> source_type;
  typedef Qt_LayoutDirection_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::LayoutDirection
template <>
struct Converter<enum Qt::LayoutDirection>
{
public:
  typedef enum Qt::LayoutDirection source_type;
  typedef Qt_LayoutDirection_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::MouseButton>
class Qt_MouseButton_Enums : public QFlags<enum Qt::MouseButton> {
public:
  Qt_MouseButton_Enums () : m_flags () { }
  Qt_MouseButton_Enums (enum Qt::MouseButton v) : m_flags (v) { }
  Qt_MouseButton_Enums (const QFlags<enum Qt::MouseButton> &v) : m_flags (v) { }
  QFlags<enum Qt::MouseButton> flags () const { return m_flags; }
private:
  QFlags<Qt::MouseButton> m_flags;
};

//  Wrapper class for enum Qt::MouseButton
class Qt_MouseButton_Enum : public Qt_MouseButton_Enums {
public:
  Qt_MouseButton_Enum () { }
  Qt_MouseButton_Enum (enum Qt::MouseButton v) : Qt_MouseButton_Enums (v) { }
  enum Qt::MouseButton value () const { return (enum Qt::MouseButton) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::MouseButton>
template <>
struct Converter<QFlags<enum Qt::MouseButton> >
{
public:
  typedef QFlags<enum Qt::MouseButton> source_type;
  typedef Qt_MouseButton_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::MouseButton
template <>
struct Converter<enum Qt::MouseButton>
{
public:
  typedef enum Qt::MouseButton source_type;
  typedef Qt_MouseButton_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ShortcutContext>
class Qt_ShortcutContext_Enums : public QFlags<enum Qt::ShortcutContext> {
public:
  Qt_ShortcutContext_Enums () : m_flags () { }
  Qt_ShortcutContext_Enums (enum Qt::ShortcutContext v) : m_flags (v) { }
  Qt_ShortcutContext_Enums (const QFlags<enum Qt::ShortcutContext> &v) : m_flags (v) { }
  QFlags<enum Qt::ShortcutContext> flags () const { return m_flags; }
private:
  QFlags<Qt::ShortcutContext> m_flags;
};

//  Wrapper class for enum Qt::ShortcutContext
class Qt_ShortcutContext_Enum : public Qt_ShortcutContext_Enums {
public:
  Qt_ShortcutContext_Enum () { }
  Qt_ShortcutContext_Enum (enum Qt::ShortcutContext v) : Qt_ShortcutContext_Enums (v) { }
  enum Qt::ShortcutContext value () const { return (enum Qt::ShortcutContext) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ShortcutContext>
template <>
struct Converter<QFlags<enum Qt::ShortcutContext> >
{
public:
  typedef QFlags<enum Qt::ShortcutContext> source_type;
  typedef Qt_ShortcutContext_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ShortcutContext
template <>
struct Converter<enum Qt::ShortcutContext>
{
public:
  typedef enum Qt::ShortcutContext source_type;
  typedef Qt_ShortcutContext_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::SizeHint>
class Qt_SizeHint_Enums : public QFlags<enum Qt::SizeHint> {
public:
  Qt_SizeHint_Enums () : m_flags () { }
  Qt_SizeHint_Enums (enum Qt::SizeHint v) : m_flags (v) { }
  Qt_SizeHint_Enums (const QFlags<enum Qt::SizeHint> &v) : m_flags (v) { }
  QFlags<enum Qt::SizeHint> flags () const { return m_flags; }
private:
  QFlags<Qt::SizeHint> m_flags;
};

//  Wrapper class for enum Qt::SizeHint
class Qt_SizeHint_Enum : public Qt_SizeHint_Enums {
public:
  Qt_SizeHint_Enum () { }
  Qt_SizeHint_Enum (enum Qt::SizeHint v) : Qt_SizeHint_Enums (v) { }
  enum Qt::SizeHint value () const { return (enum Qt::SizeHint) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::SizeHint>
template <>
struct Converter<QFlags<enum Qt::SizeHint> >
{
public:
  typedef QFlags<enum Qt::SizeHint> source_type;
  typedef Qt_SizeHint_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::SizeHint
template <>
struct Converter<enum Qt::SizeHint>
{
public:
  typedef enum Qt::SizeHint source_type;
  typedef Qt_SizeHint_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::WidgetAttribute>
class Qt_WidgetAttribute_Enums : public QFlags<enum Qt::WidgetAttribute> {
public:
  Qt_WidgetAttribute_Enums () : m_flags () { }
  Qt_WidgetAttribute_Enums (enum Qt::WidgetAttribute v) : m_flags (v) { }
  Qt_WidgetAttribute_Enums (const QFlags<enum Qt::WidgetAttribute> &v) : m_flags (v) { }
  QFlags<enum Qt::WidgetAttribute> flags () const { return m_flags; }
private:
  QFlags<Qt::WidgetAttribute> m_flags;
};

//  Wrapper class for enum Qt::WidgetAttribute
class Qt_WidgetAttribute_Enum : public Qt_WidgetAttribute_Enums {
public:
  Qt_WidgetAttribute_Enum () { }
  Qt_WidgetAttribute_Enum (enum Qt::WidgetAttribute v) : Qt_WidgetAttribute_Enums (v) { }
  enum Qt::WidgetAttribute value () const { return (enum Qt::WidgetAttribute) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::WidgetAttribute>
template <>
struct Converter<QFlags<enum Qt::WidgetAttribute> >
{
public:
  typedef QFlags<enum Qt::WidgetAttribute> source_type;
  typedef Qt_WidgetAttribute_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::WidgetAttribute
template <>
struct Converter<enum Qt::WidgetAttribute>
{
public:
  typedef enum Qt::WidgetAttribute source_type;
  typedef Qt_WidgetAttribute_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::WindowFrameSection>
class Qt_WindowFrameSection_Enums : public QFlags<enum Qt::WindowFrameSection> {
public:
  Qt_WindowFrameSection_Enums () : m_flags () { }
  Qt_WindowFrameSection_Enums (enum Qt::WindowFrameSection v) : m_flags (v) { }
  Qt_WindowFrameSection_Enums (const QFlags<enum Qt::WindowFrameSection> &v) : m_flags (v) { }
  QFlags<enum Qt::WindowFrameSection> flags () const { return m_flags; }
private:
  QFlags<Qt::WindowFrameSection> m_flags;
};

//  Wrapper class for enum Qt::WindowFrameSection
class Qt_WindowFrameSection_Enum : public Qt_WindowFrameSection_Enums {
public:
  Qt_WindowFrameSection_Enum () { }
  Qt_WindowFrameSection_Enum (enum Qt::WindowFrameSection v) : Qt_WindowFrameSection_Enums (v) { }
  enum Qt::WindowFrameSection value () const { return (enum Qt::WindowFrameSection) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::WindowFrameSection>
template <>
struct Converter<QFlags<enum Qt::WindowFrameSection> >
{
public:
  typedef QFlags<enum Qt::WindowFrameSection> source_type;
  typedef Qt_WindowFrameSection_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::WindowFrameSection
template <>
struct Converter<enum Qt::WindowFrameSection>
{
public:
  typedef enum Qt::WindowFrameSection source_type;
  typedef Qt_WindowFrameSection_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::WindowType>
class Qt_WindowType_Enums : public QFlags<enum Qt::WindowType> {
public:
  Qt_WindowType_Enums () : m_flags () { }
  Qt_WindowType_Enums (enum Qt::WindowType v) : m_flags (v) { }
  Qt_WindowType_Enums (const QFlags<enum Qt::WindowType> &v) : m_flags (v) { }
  QFlags<enum Qt::WindowType> flags () const { return m_flags; }
private:
  QFlags<Qt::WindowType> m_flags;
};

//  Wrapper class for enum Qt::WindowType
class Qt_WindowType_Enum : public Qt_WindowType_Enums {
public:
  Qt_WindowType_Enum () { }
  Qt_WindowType_Enum (enum Qt::WindowType v) : Qt_WindowType_Enums (v) { }
  enum Qt::WindowType value () const { return (enum Qt::WindowType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::WindowType>
template <>
struct Converter<QFlags<enum Qt::WindowType> >
{
public:
  typedef QFlags<enum Qt::WindowType> source_type;
  typedef Qt_WindowType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::WindowType
template <>
struct Converter<enum Qt::WindowType>
{
public:
  typedef enum Qt::WindowType source_type;
  typedef Qt_WindowType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
