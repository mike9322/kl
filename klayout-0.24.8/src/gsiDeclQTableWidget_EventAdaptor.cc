
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file generated/gsiDeclQTableWidget_EventAdaptor.cc
*  @brief Event adaptor implementations for QTableWidget
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQTableWidget_EventAdaptor.h"

// -----------------------------------------------------------------------
// class QTableWidget_EventAdaptor

QTableWidget_EventAdaptor::QTableWidget_EventAdaptor (QObject *host)
  : QObject ()
{
  connect (host, SIGNAL(activated(const QModelIndex &)), this, SLOT(activated(const QModelIndex &)));
  connect (host, SIGNAL(cellActivated(int, int)), this, SLOT(cellActivated(int, int)));
  connect (host, SIGNAL(cellChanged(int, int)), this, SLOT(cellChanged(int, int)));
  connect (host, SIGNAL(cellClicked(int, int)), this, SLOT(cellClicked(int, int)));
  connect (host, SIGNAL(cellDoubleClicked(int, int)), this, SLOT(cellDoubleClicked(int, int)));
  connect (host, SIGNAL(cellEntered(int, int)), this, SLOT(cellEntered(int, int)));
  connect (host, SIGNAL(cellPressed(int, int)), this, SLOT(cellPressed(int, int)));
  connect (host, SIGNAL(clicked(const QModelIndex &)), this, SLOT(clicked(const QModelIndex &)));
  connect (host, SIGNAL(currentCellChanged(int, int, int, int)), this, SLOT(currentCellChanged(int, int, int, int)));
  connect (host, SIGNAL(currentItemChanged(QTableWidgetItem *, QTableWidgetItem *)), this, SLOT(currentItemChanged(QTableWidgetItem *, QTableWidgetItem *)));
  connect (host, SIGNAL(customContextMenuRequested(const QPoint &)), this, SLOT(customContextMenuRequested(const QPoint &)));
  connect (host, SIGNAL(destroyed(QObject *)), this, SLOT(destroyed(QObject *)));
  connect (host, SIGNAL(doubleClicked(const QModelIndex &)), this, SLOT(doubleClicked(const QModelIndex &)));
  connect (host, SIGNAL(entered(const QModelIndex &)), this, SLOT(entered(const QModelIndex &)));
  connect (host, SIGNAL(itemActivated(QTableWidgetItem *)), this, SLOT(itemActivated(QTableWidgetItem *)));
  connect (host, SIGNAL(itemChanged(QTableWidgetItem *)), this, SLOT(itemChanged(QTableWidgetItem *)));
  connect (host, SIGNAL(itemClicked(QTableWidgetItem *)), this, SLOT(itemClicked(QTableWidgetItem *)));
  connect (host, SIGNAL(itemDoubleClicked(QTableWidgetItem *)), this, SLOT(itemDoubleClicked(QTableWidgetItem *)));
  connect (host, SIGNAL(itemEntered(QTableWidgetItem *)), this, SLOT(itemEntered(QTableWidgetItem *)));
  connect (host, SIGNAL(itemPressed(QTableWidgetItem *)), this, SLOT(itemPressed(QTableWidgetItem *)));
  connect (host, SIGNAL(itemSelectionChanged()), this, SLOT(itemSelectionChanged()));
  connect (host, SIGNAL(pressed(const QModelIndex &)), this, SLOT(pressed(const QModelIndex &)));
  connect (host, SIGNAL(viewportEntered()), this, SLOT(viewportEntered()));
}

//  Event QTableWidget::activated(const QModelIndex &index)
void QTableWidget_EventAdaptor::activated(const QModelIndex &index) {
BEGIN_PROTECTED
  activated_e_2395(index);
END_PROTECTED
}

//  Event QTableWidget::cellActivated(int row, int column)
void QTableWidget_EventAdaptor::cellActivated(int row, int column) {
BEGIN_PROTECTED
  cellActivated_e_1426(row, column);
END_PROTECTED
}

//  Event QTableWidget::cellChanged(int row, int column)
void QTableWidget_EventAdaptor::cellChanged(int row, int column) {
BEGIN_PROTECTED
  cellChanged_e_1426(row, column);
END_PROTECTED
}

//  Event QTableWidget::cellClicked(int row, int column)
void QTableWidget_EventAdaptor::cellClicked(int row, int column) {
BEGIN_PROTECTED
  cellClicked_e_1426(row, column);
END_PROTECTED
}

//  Event QTableWidget::cellDoubleClicked(int row, int column)
void QTableWidget_EventAdaptor::cellDoubleClicked(int row, int column) {
BEGIN_PROTECTED
  cellDoubleClicked_e_1426(row, column);
END_PROTECTED
}

//  Event QTableWidget::cellEntered(int row, int column)
void QTableWidget_EventAdaptor::cellEntered(int row, int column) {
BEGIN_PROTECTED
  cellEntered_e_1426(row, column);
END_PROTECTED
}

//  Event QTableWidget::cellPressed(int row, int column)
void QTableWidget_EventAdaptor::cellPressed(int row, int column) {
BEGIN_PROTECTED
  cellPressed_e_1426(row, column);
END_PROTECTED
}

//  Event QTableWidget::clicked(const QModelIndex &index)
void QTableWidget_EventAdaptor::clicked(const QModelIndex &index) {
BEGIN_PROTECTED
  clicked_e_2395(index);
END_PROTECTED
}

//  Event QTableWidget::currentCellChanged(int currentRow, int currentColumn, int previousRow, int previousColumn)
void QTableWidget_EventAdaptor::currentCellChanged(int currentRow, int currentColumn, int previousRow, int previousColumn) {
BEGIN_PROTECTED
  currentCellChanged_e_2744(currentRow, currentColumn, previousRow, previousColumn);
END_PROTECTED
}

//  Event QTableWidget::currentItemChanged(QTableWidgetItem *current, QTableWidgetItem *previous)
void QTableWidget_EventAdaptor::currentItemChanged(QTableWidgetItem *current, QTableWidgetItem *previous) {
BEGIN_PROTECTED
  currentItemChanged_e_4296(current, previous);
END_PROTECTED
}

//  Event QTableWidget::customContextMenuRequested(const QPoint &pos)
void QTableWidget_EventAdaptor::customContextMenuRequested(const QPoint &pos) {
BEGIN_PROTECTED
  customContextMenuRequested_e_1916(pos);
END_PROTECTED
}

//  Event QTableWidget::destroyed(QObject *arg1)
void QTableWidget_EventAdaptor::destroyed(QObject *arg1) {
BEGIN_PROTECTED
  destroyed_e_1302(arg1);
END_PROTECTED
}

//  Event QTableWidget::doubleClicked(const QModelIndex &index)
void QTableWidget_EventAdaptor::doubleClicked(const QModelIndex &index) {
BEGIN_PROTECTED
  doubleClicked_e_2395(index);
END_PROTECTED
}

//  Event QTableWidget::entered(const QModelIndex &index)
void QTableWidget_EventAdaptor::entered(const QModelIndex &index) {
BEGIN_PROTECTED
  entered_e_2395(index);
END_PROTECTED
}

//  Event QTableWidget::itemActivated(QTableWidgetItem *item)
void QTableWidget_EventAdaptor::itemActivated(QTableWidgetItem *item) {
BEGIN_PROTECTED
  itemActivated_e_2202(item);
END_PROTECTED
}

//  Event QTableWidget::itemChanged(QTableWidgetItem *item)
void QTableWidget_EventAdaptor::itemChanged(QTableWidgetItem *item) {
BEGIN_PROTECTED
  itemChanged_e_2202(item);
END_PROTECTED
}

//  Event QTableWidget::itemClicked(QTableWidgetItem *item)
void QTableWidget_EventAdaptor::itemClicked(QTableWidgetItem *item) {
BEGIN_PROTECTED
  itemClicked_e_2202(item);
END_PROTECTED
}

//  Event QTableWidget::itemDoubleClicked(QTableWidgetItem *item)
void QTableWidget_EventAdaptor::itemDoubleClicked(QTableWidgetItem *item) {
BEGIN_PROTECTED
  itemDoubleClicked_e_2202(item);
END_PROTECTED
}

//  Event QTableWidget::itemEntered(QTableWidgetItem *item)
void QTableWidget_EventAdaptor::itemEntered(QTableWidgetItem *item) {
BEGIN_PROTECTED
  itemEntered_e_2202(item);
END_PROTECTED
}

//  Event QTableWidget::itemPressed(QTableWidgetItem *item)
void QTableWidget_EventAdaptor::itemPressed(QTableWidgetItem *item) {
BEGIN_PROTECTED
  itemPressed_e_2202(item);
END_PROTECTED
}

//  Event QTableWidget::itemSelectionChanged()
void QTableWidget_EventAdaptor::itemSelectionChanged() {
BEGIN_PROTECTED
  itemSelectionChanged_e_0();
END_PROTECTED
}

//  Event QTableWidget::pressed(const QModelIndex &index)
void QTableWidget_EventAdaptor::pressed(const QModelIndex &index) {
BEGIN_PROTECTED
  pressed_e_2395(index);
END_PROTECTED
}

//  Event QTableWidget::viewportEntered()
void QTableWidget_EventAdaptor::viewportEntered() {
BEGIN_PROTECTED
  viewportEntered_e_0();
END_PROTECTED
}
