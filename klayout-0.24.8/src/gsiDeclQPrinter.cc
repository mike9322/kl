
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQPrinter.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQPrinter_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QPrinter

// bool QPrinter::abort()


static void _init_f_abort_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_abort_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QPrinter *)cls)->abort ());
}

static qt_gsi::GenericMethod *_create_f_abort_0 ()
{
  return new qt_gsi::GenericMethod ("abort", "@brief Method bool QPrinter::abort()\n", false, &_init_f_abort_0, &_call_f_abort_0);
}

// int QPrinter::actualNumCopies()


static void _init_f_actualNumCopies_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_actualNumCopies_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QPrinter *)cls)->actualNumCopies ());
}

static qt_gsi::GenericMethod *_create_f_actualNumCopies_c0 ()
{
  return new qt_gsi::GenericMethod ("actualNumCopies", "@brief Method int QPrinter::actualNumCopies()\n", true, &_init_f_actualNumCopies_c0, &_call_f_actualNumCopies_c0);
}

// bool QPrinter::collateCopies()


static void _init_f_collateCopies_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_collateCopies_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QPrinter *)cls)->collateCopies ());
}

static qt_gsi::GenericMethod *_create_f_collateCopies_c0 ()
{
  return new qt_gsi::GenericMethod (":collateCopies", "@brief Method bool QPrinter::collateCopies()\n", true, &_init_f_collateCopies_c0, &_call_f_collateCopies_c0);
}

// QPrinter::ColorMode QPrinter::colorMode()


static void _init_f_colorMode_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPrinter::ColorMode>::target_type > ();
}

static void _call_f_colorMode_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QPrinter::ColorMode>::target_type > ((qt_gsi::Converter<QPrinter::ColorMode>::target_type)qt_gsi::CppToQtAdaptor<QPrinter::ColorMode>(((QPrinter *)cls)->colorMode ()));
}

static qt_gsi::GenericMethod *_create_f_colorMode_c0 ()
{
  return new qt_gsi::GenericMethod (":colorMode", "@brief Method QPrinter::ColorMode QPrinter::colorMode()\n", true, &_init_f_colorMode_c0, &_call_f_colorMode_c0);
}

// QString QPrinter::creator()


static void _init_f_creator_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_creator_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QPrinter *)cls)->creator ());
}

static qt_gsi::GenericMethod *_create_f_creator_c0 ()
{
  return new qt_gsi::GenericMethod (":creator", "@brief Method QString QPrinter::creator()\n", true, &_init_f_creator_c0, &_call_f_creator_c0);
}

// QString QPrinter::docName()


static void _init_f_docName_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_docName_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QPrinter *)cls)->docName ());
}

static qt_gsi::GenericMethod *_create_f_docName_c0 ()
{
  return new qt_gsi::GenericMethod (":docName", "@brief Method QString QPrinter::docName()\n", true, &_init_f_docName_c0, &_call_f_docName_c0);
}

// bool QPrinter::doubleSidedPrinting()


static void _init_f_doubleSidedPrinting_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_doubleSidedPrinting_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QPrinter *)cls)->doubleSidedPrinting ());
}

static qt_gsi::GenericMethod *_create_f_doubleSidedPrinting_c0 ()
{
  return new qt_gsi::GenericMethod (":doubleSidedPrinting", "@brief Method bool QPrinter::doubleSidedPrinting()\n", true, &_init_f_doubleSidedPrinting_c0, &_call_f_doubleSidedPrinting_c0);
}

// QPrinter::DuplexMode QPrinter::duplex()


static void _init_f_duplex_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPrinter::DuplexMode>::target_type > ();
}

static void _call_f_duplex_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QPrinter::DuplexMode>::target_type > ((qt_gsi::Converter<QPrinter::DuplexMode>::target_type)qt_gsi::CppToQtAdaptor<QPrinter::DuplexMode>(((QPrinter *)cls)->duplex ()));
}

static qt_gsi::GenericMethod *_create_f_duplex_c0 ()
{
  return new qt_gsi::GenericMethod (":duplex", "@brief Method QPrinter::DuplexMode QPrinter::duplex()\n", true, &_init_f_duplex_c0, &_call_f_duplex_c0);
}

// bool QPrinter::fontEmbeddingEnabled()


static void _init_f_fontEmbeddingEnabled_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_fontEmbeddingEnabled_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QPrinter *)cls)->fontEmbeddingEnabled ());
}

static qt_gsi::GenericMethod *_create_f_fontEmbeddingEnabled_c0 ()
{
  return new qt_gsi::GenericMethod (":fontEmbeddingEnabled", "@brief Method bool QPrinter::fontEmbeddingEnabled()\n", true, &_init_f_fontEmbeddingEnabled_c0, &_call_f_fontEmbeddingEnabled_c0);
}

// int QPrinter::fromPage()


static void _init_f_fromPage_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_fromPage_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QPrinter *)cls)->fromPage ());
}

static qt_gsi::GenericMethod *_create_f_fromPage_c0 ()
{
  return new qt_gsi::GenericMethod ("fromPage", "@brief Method int QPrinter::fromPage()\n", true, &_init_f_fromPage_c0, &_call_f_fromPage_c0);
}

// bool QPrinter::fullPage()


static void _init_f_fullPage_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_fullPage_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QPrinter *)cls)->fullPage ());
}

static qt_gsi::GenericMethod *_create_f_fullPage_c0 ()
{
  return new qt_gsi::GenericMethod (":fullPage", "@brief Method bool QPrinter::fullPage()\n", true, &_init_f_fullPage_c0, &_call_f_fullPage_c0);
}

// void QPrinter::getPageMargins(double *left, double *top, double *right, double *bottom, QPrinter::Unit unit)


static void _init_f_getPageMargins_c6385 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("left");
  decl->add_arg<double * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("top");
  decl->add_arg<double * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("right");
  decl->add_arg<double * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("bottom");
  decl->add_arg<double * > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("unit");
  decl->add_arg<const qt_gsi::Converter<QPrinter::Unit>::target_type & > (argspec_4);
  decl->set_return<void > ();
}

static void _call_f_getPageMargins_c6385 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  double *arg1 = args.read<double * > ();
  double *arg2 = args.read<double * > ();
  double *arg3 = args.read<double * > ();
  double *arg4 = args.read<double * > ();
  const qt_gsi::Converter<QPrinter::Unit>::target_type & arg5 = args.read<const qt_gsi::Converter<QPrinter::Unit>::target_type & > ();
  ((QPrinter *)cls)->getPageMargins (arg1, arg2, arg3, arg4, qt_gsi::QtToCppAdaptor<QPrinter::Unit>(arg5).cref());
}

static qt_gsi::GenericMethod *_create_f_getPageMargins_c6385 ()
{
  return new qt_gsi::GenericMethod ("getPageMargins", "@brief Method void QPrinter::getPageMargins(double *left, double *top, double *right, double *bottom, QPrinter::Unit unit)\n", true, &_init_f_getPageMargins_c6385, &_call_f_getPageMargins_c6385);
}

// bool QPrinter::isValid()


static void _init_f_isValid_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isValid_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QPrinter *)cls)->isValid ());
}

static qt_gsi::GenericMethod *_create_f_isValid_c0 ()
{
  return new qt_gsi::GenericMethod ("isValid?", "@brief Method bool QPrinter::isValid()\n", true, &_init_f_isValid_c0, &_call_f_isValid_c0);
}

// bool QPrinter::newPage()


static void _init_f_newPage_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_newPage_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QPrinter *)cls)->newPage ());
}

static qt_gsi::GenericMethod *_create_f_newPage_0 ()
{
  return new qt_gsi::GenericMethod ("newPage", "@brief Method bool QPrinter::newPage()\n", false, &_init_f_newPage_0, &_call_f_newPage_0);
}

// int QPrinter::numCopies()


static void _init_f_numCopies_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_numCopies_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QPrinter *)cls)->numCopies ());
}

static qt_gsi::GenericMethod *_create_f_numCopies_c0 ()
{
  return new qt_gsi::GenericMethod (":numCopies", "@brief Method int QPrinter::numCopies()\n", true, &_init_f_numCopies_c0, &_call_f_numCopies_c0);
}

// QPrinter::Orientation QPrinter::orientation()


static void _init_f_orientation_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPrinter::Orientation>::target_type > ();
}

static void _call_f_orientation_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QPrinter::Orientation>::target_type > ((qt_gsi::Converter<QPrinter::Orientation>::target_type)qt_gsi::CppToQtAdaptor<QPrinter::Orientation>(((QPrinter *)cls)->orientation ()));
}

static qt_gsi::GenericMethod *_create_f_orientation_c0 ()
{
  return new qt_gsi::GenericMethod (":orientation", "@brief Method QPrinter::Orientation QPrinter::orientation()\n", true, &_init_f_orientation_c0, &_call_f_orientation_c0);
}

// QString QPrinter::outputFileName()


static void _init_f_outputFileName_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_outputFileName_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QPrinter *)cls)->outputFileName ());
}

static qt_gsi::GenericMethod *_create_f_outputFileName_c0 ()
{
  return new qt_gsi::GenericMethod (":outputFileName", "@brief Method QString QPrinter::outputFileName()\n", true, &_init_f_outputFileName_c0, &_call_f_outputFileName_c0);
}

// QPrinter::OutputFormat QPrinter::outputFormat()


static void _init_f_outputFormat_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPrinter::OutputFormat>::target_type > ();
}

static void _call_f_outputFormat_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QPrinter::OutputFormat>::target_type > ((qt_gsi::Converter<QPrinter::OutputFormat>::target_type)qt_gsi::CppToQtAdaptor<QPrinter::OutputFormat>(((QPrinter *)cls)->outputFormat ()));
}

static qt_gsi::GenericMethod *_create_f_outputFormat_c0 ()
{
  return new qt_gsi::GenericMethod (":outputFormat", "@brief Method QPrinter::OutputFormat QPrinter::outputFormat()\n", true, &_init_f_outputFormat_c0, &_call_f_outputFormat_c0);
}

// QPrinter::PageOrder QPrinter::pageOrder()


static void _init_f_pageOrder_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPrinter::PageOrder>::target_type > ();
}

static void _call_f_pageOrder_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QPrinter::PageOrder>::target_type > ((qt_gsi::Converter<QPrinter::PageOrder>::target_type)qt_gsi::CppToQtAdaptor<QPrinter::PageOrder>(((QPrinter *)cls)->pageOrder ()));
}

static qt_gsi::GenericMethod *_create_f_pageOrder_c0 ()
{
  return new qt_gsi::GenericMethod (":pageOrder", "@brief Method QPrinter::PageOrder QPrinter::pageOrder()\n", true, &_init_f_pageOrder_c0, &_call_f_pageOrder_c0);
}

// QRect QPrinter::pageRect()


static void _init_f_pageRect_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QRect > ();
}

static void _call_f_pageRect_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QRect > ((QRect)((QPrinter *)cls)->pageRect ());
}

static qt_gsi::GenericMethod *_create_f_pageRect_c0 ()
{
  return new qt_gsi::GenericMethod ("pageRect", "@brief Method QRect QPrinter::pageRect()\n", true, &_init_f_pageRect_c0, &_call_f_pageRect_c0);
}

// QRectF QPrinter::pageRect(QPrinter::Unit)


static void _init_f_pageRect_c1789 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const qt_gsi::Converter<QPrinter::Unit>::target_type & > (argspec_0);
  decl->set_return<QRectF > ();
}

static void _call_f_pageRect_c1789 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QPrinter::Unit>::target_type & arg1 = args.read<const qt_gsi::Converter<QPrinter::Unit>::target_type & > ();
  ret.write<QRectF > ((QRectF)((QPrinter *)cls)->pageRect (qt_gsi::QtToCppAdaptor<QPrinter::Unit>(arg1).cref()));
}

static qt_gsi::GenericMethod *_create_f_pageRect_c1789 ()
{
  return new qt_gsi::GenericMethod ("pageRect", "@brief Method QRectF QPrinter::pageRect(QPrinter::Unit)\n", true, &_init_f_pageRect_c1789, &_call_f_pageRect_c1789);
}

// QPrinter::PageSize QPrinter::pageSize()


static void _init_f_pageSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPrinter::PageSize>::target_type > ();
}

static void _call_f_pageSize_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QPrinter::PageSize>::target_type > ((qt_gsi::Converter<QPrinter::PageSize>::target_type)qt_gsi::CppToQtAdaptor<QPrinter::PageSize>(((QPrinter *)cls)->pageSize ()));
}

static qt_gsi::GenericMethod *_create_f_pageSize_c0 ()
{
  return new qt_gsi::GenericMethod (":pageSize", "@brief Method QPrinter::PageSize QPrinter::pageSize()\n", true, &_init_f_pageSize_c0, &_call_f_pageSize_c0);
}

// QPaintEngine *QPrinter::paintEngine()


static void _init_f_paintEngine_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QPaintEngine * > ();
}

static void _call_f_paintEngine_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QPaintEngine * > ((QPaintEngine *)((QPrinter *)cls)->paintEngine ());
}

static qt_gsi::GenericMethod *_create_f_paintEngine_c0 ()
{
  return new qt_gsi::GenericMethod ("paintEngine", "@brief Method QPaintEngine *QPrinter::paintEngine()\nThis is a reimplementation of QPaintDevice::paintEngine", true, &_init_f_paintEngine_c0, &_call_f_paintEngine_c0);
}

// QRect QPrinter::paperRect()


static void _init_f_paperRect_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QRect > ();
}

static void _call_f_paperRect_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QRect > ((QRect)((QPrinter *)cls)->paperRect ());
}

static qt_gsi::GenericMethod *_create_f_paperRect_c0 ()
{
  return new qt_gsi::GenericMethod ("paperRect", "@brief Method QRect QPrinter::paperRect()\n", true, &_init_f_paperRect_c0, &_call_f_paperRect_c0);
}

// QRectF QPrinter::paperRect(QPrinter::Unit)


static void _init_f_paperRect_c1789 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const qt_gsi::Converter<QPrinter::Unit>::target_type & > (argspec_0);
  decl->set_return<QRectF > ();
}

static void _call_f_paperRect_c1789 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QPrinter::Unit>::target_type & arg1 = args.read<const qt_gsi::Converter<QPrinter::Unit>::target_type & > ();
  ret.write<QRectF > ((QRectF)((QPrinter *)cls)->paperRect (qt_gsi::QtToCppAdaptor<QPrinter::Unit>(arg1).cref()));
}

static qt_gsi::GenericMethod *_create_f_paperRect_c1789 ()
{
  return new qt_gsi::GenericMethod ("paperRect", "@brief Method QRectF QPrinter::paperRect(QPrinter::Unit)\n", true, &_init_f_paperRect_c1789, &_call_f_paperRect_c1789);
}

// QPrinter::PageSize QPrinter::paperSize()


static void _init_f_paperSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPrinter::PageSize>::target_type > ();
}

static void _call_f_paperSize_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QPrinter::PageSize>::target_type > ((qt_gsi::Converter<QPrinter::PageSize>::target_type)qt_gsi::CppToQtAdaptor<QPrinter::PageSize>(((QPrinter *)cls)->paperSize ()));
}

static qt_gsi::GenericMethod *_create_f_paperSize_c0 ()
{
  return new qt_gsi::GenericMethod (":paperSize", "@brief Method QPrinter::PageSize QPrinter::paperSize()\n", true, &_init_f_paperSize_c0, &_call_f_paperSize_c0);
}

// QSizeF QPrinter::paperSize(QPrinter::Unit unit)


static void _init_f_paperSize_c1789 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("unit");
  decl->add_arg<const qt_gsi::Converter<QPrinter::Unit>::target_type & > (argspec_0);
  decl->set_return<QSizeF > ();
}

static void _call_f_paperSize_c1789 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QPrinter::Unit>::target_type & arg1 = args.read<const qt_gsi::Converter<QPrinter::Unit>::target_type & > ();
  ret.write<QSizeF > ((QSizeF)((QPrinter *)cls)->paperSize (qt_gsi::QtToCppAdaptor<QPrinter::Unit>(arg1).cref()));
}

static qt_gsi::GenericMethod *_create_f_paperSize_c1789 ()
{
  return new qt_gsi::GenericMethod ("paperSize", "@brief Method QSizeF QPrinter::paperSize(QPrinter::Unit unit)\n", true, &_init_f_paperSize_c1789, &_call_f_paperSize_c1789);
}

// QPrinter::PaperSource QPrinter::paperSource()


static void _init_f_paperSource_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPrinter::PaperSource>::target_type > ();
}

static void _call_f_paperSource_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QPrinter::PaperSource>::target_type > ((qt_gsi::Converter<QPrinter::PaperSource>::target_type)qt_gsi::CppToQtAdaptor<QPrinter::PaperSource>(((QPrinter *)cls)->paperSource ()));
}

static qt_gsi::GenericMethod *_create_f_paperSource_c0 ()
{
  return new qt_gsi::GenericMethod (":paperSource", "@brief Method QPrinter::PaperSource QPrinter::paperSource()\n", true, &_init_f_paperSource_c0, &_call_f_paperSource_c0);
}

// QPrintEngine *QPrinter::printEngine()


static void _init_f_printEngine_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QPrintEngine * > ();
}

static void _call_f_printEngine_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QPrintEngine * > ((QPrintEngine *)((QPrinter *)cls)->printEngine ());
}

static qt_gsi::GenericMethod *_create_f_printEngine_c0 ()
{
  return new qt_gsi::GenericMethod ("printEngine", "@brief Method QPrintEngine *QPrinter::printEngine()\n", true, &_init_f_printEngine_c0, &_call_f_printEngine_c0);
}

// QString QPrinter::printProgram()


static void _init_f_printProgram_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_printProgram_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QPrinter *)cls)->printProgram ());
}

static qt_gsi::GenericMethod *_create_f_printProgram_c0 ()
{
  return new qt_gsi::GenericMethod (":printProgram", "@brief Method QString QPrinter::printProgram()\n", true, &_init_f_printProgram_c0, &_call_f_printProgram_c0);
}

// QPrinter::PrintRange QPrinter::printRange()


static void _init_f_printRange_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPrinter::PrintRange>::target_type > ();
}

static void _call_f_printRange_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QPrinter::PrintRange>::target_type > ((qt_gsi::Converter<QPrinter::PrintRange>::target_type)qt_gsi::CppToQtAdaptor<QPrinter::PrintRange>(((QPrinter *)cls)->printRange ()));
}

static qt_gsi::GenericMethod *_create_f_printRange_c0 ()
{
  return new qt_gsi::GenericMethod (":printRange", "@brief Method QPrinter::PrintRange QPrinter::printRange()\n", true, &_init_f_printRange_c0, &_call_f_printRange_c0);
}

// QString QPrinter::printerName()


static void _init_f_printerName_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_printerName_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QPrinter *)cls)->printerName ());
}

static qt_gsi::GenericMethod *_create_f_printerName_c0 ()
{
  return new qt_gsi::GenericMethod (":printerName", "@brief Method QString QPrinter::printerName()\n", true, &_init_f_printerName_c0, &_call_f_printerName_c0);
}

// QPrinter::PrinterState QPrinter::printerState()


static void _init_f_printerState_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPrinter::PrinterState>::target_type > ();
}

static void _call_f_printerState_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QPrinter::PrinterState>::target_type > ((qt_gsi::Converter<QPrinter::PrinterState>::target_type)qt_gsi::CppToQtAdaptor<QPrinter::PrinterState>(((QPrinter *)cls)->printerState ()));
}

static qt_gsi::GenericMethod *_create_f_printerState_c0 ()
{
  return new qt_gsi::GenericMethod ("printerState", "@brief Method QPrinter::PrinterState QPrinter::printerState()\n", true, &_init_f_printerState_c0, &_call_f_printerState_c0);
}

// int QPrinter::resolution()


static void _init_f_resolution_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_resolution_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QPrinter *)cls)->resolution ());
}

static qt_gsi::GenericMethod *_create_f_resolution_c0 ()
{
  return new qt_gsi::GenericMethod (":resolution", "@brief Method int QPrinter::resolution()\n", true, &_init_f_resolution_c0, &_call_f_resolution_c0);
}

// void QPrinter::setCollateCopies(bool collate)


static void _init_f_setCollateCopies_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("collate");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setCollateCopies_864 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QPrinter *)cls)->setCollateCopies (arg1);
}

static qt_gsi::GenericMethod *_create_f_setCollateCopies_864 ()
{
  return new qt_gsi::GenericMethod ("setCollateCopies|collateCopies=", "@brief Method void QPrinter::setCollateCopies(bool collate)\n", false, &_init_f_setCollateCopies_864, &_call_f_setCollateCopies_864);
}

// void QPrinter::setColorMode(QPrinter::ColorMode)


static void _init_f_setColorMode_2273 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const qt_gsi::Converter<QPrinter::ColorMode>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setColorMode_2273 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QPrinter::ColorMode>::target_type & arg1 = args.read<const qt_gsi::Converter<QPrinter::ColorMode>::target_type & > ();
  ((QPrinter *)cls)->setColorMode (qt_gsi::QtToCppAdaptor<QPrinter::ColorMode>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setColorMode_2273 ()
{
  return new qt_gsi::GenericMethod ("setColorMode|colorMode=", "@brief Method void QPrinter::setColorMode(QPrinter::ColorMode)\n", false, &_init_f_setColorMode_2273, &_call_f_setColorMode_2273);
}

// void QPrinter::setCreator(const QString &)


static void _init_f_setCreator_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setCreator_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QPrinter *)cls)->setCreator (arg1);
}

static qt_gsi::GenericMethod *_create_f_setCreator_2025 ()
{
  return new qt_gsi::GenericMethod ("setCreator|creator=", "@brief Method void QPrinter::setCreator(const QString &)\n", false, &_init_f_setCreator_2025, &_call_f_setCreator_2025);
}

// void QPrinter::setDocName(const QString &)


static void _init_f_setDocName_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setDocName_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QPrinter *)cls)->setDocName (arg1);
}

static qt_gsi::GenericMethod *_create_f_setDocName_2025 ()
{
  return new qt_gsi::GenericMethod ("setDocName|docName=", "@brief Method void QPrinter::setDocName(const QString &)\n", false, &_init_f_setDocName_2025, &_call_f_setDocName_2025);
}

// void QPrinter::setDoubleSidedPrinting(bool enable)


static void _init_f_setDoubleSidedPrinting_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("enable");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setDoubleSidedPrinting_864 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QPrinter *)cls)->setDoubleSidedPrinting (arg1);
}

static qt_gsi::GenericMethod *_create_f_setDoubleSidedPrinting_864 ()
{
  return new qt_gsi::GenericMethod ("setDoubleSidedPrinting|doubleSidedPrinting=", "@brief Method void QPrinter::setDoubleSidedPrinting(bool enable)\n", false, &_init_f_setDoubleSidedPrinting_864, &_call_f_setDoubleSidedPrinting_864);
}

// void QPrinter::setDuplex(QPrinter::DuplexMode duplex)


static void _init_f_setDuplex_2388 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("duplex");
  decl->add_arg<const qt_gsi::Converter<QPrinter::DuplexMode>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setDuplex_2388 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QPrinter::DuplexMode>::target_type & arg1 = args.read<const qt_gsi::Converter<QPrinter::DuplexMode>::target_type & > ();
  ((QPrinter *)cls)->setDuplex (qt_gsi::QtToCppAdaptor<QPrinter::DuplexMode>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setDuplex_2388 ()
{
  return new qt_gsi::GenericMethod ("setDuplex|duplex=", "@brief Method void QPrinter::setDuplex(QPrinter::DuplexMode duplex)\n", false, &_init_f_setDuplex_2388, &_call_f_setDuplex_2388);
}

// void QPrinter::setFontEmbeddingEnabled(bool enable)


static void _init_f_setFontEmbeddingEnabled_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("enable");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFontEmbeddingEnabled_864 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QPrinter *)cls)->setFontEmbeddingEnabled (arg1);
}

static qt_gsi::GenericMethod *_create_f_setFontEmbeddingEnabled_864 ()
{
  return new qt_gsi::GenericMethod ("setFontEmbeddingEnabled|fontEmbeddingEnabled=", "@brief Method void QPrinter::setFontEmbeddingEnabled(bool enable)\n", false, &_init_f_setFontEmbeddingEnabled_864, &_call_f_setFontEmbeddingEnabled_864);
}

// void QPrinter::setFromTo(int fromPage, int toPage)


static void _init_f_setFromTo_1426 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("fromPage");
  decl->add_arg<int > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("toPage");
  decl->add_arg<int > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_setFromTo_1426 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  int arg2 = args.read<int > ();
  ((QPrinter *)cls)->setFromTo (arg1, arg2);
}

static qt_gsi::GenericMethod *_create_f_setFromTo_1426 ()
{
  return new qt_gsi::GenericMethod ("setFromTo", "@brief Method void QPrinter::setFromTo(int fromPage, int toPage)\n", false, &_init_f_setFromTo_1426, &_call_f_setFromTo_1426);
}

// void QPrinter::setFullPage(bool)


static void _init_f_setFullPage_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFullPage_864 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QPrinter *)cls)->setFullPage (arg1);
}

static qt_gsi::GenericMethod *_create_f_setFullPage_864 ()
{
  return new qt_gsi::GenericMethod ("setFullPage|fullPage=", "@brief Method void QPrinter::setFullPage(bool)\n", false, &_init_f_setFullPage_864, &_call_f_setFullPage_864);
}

// void QPrinter::setNumCopies(int)


static void _init_f_setNumCopies_767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<int > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setNumCopies_767 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ((QPrinter *)cls)->setNumCopies (arg1);
}

static qt_gsi::GenericMethod *_create_f_setNumCopies_767 ()
{
  return new qt_gsi::GenericMethod ("setNumCopies|numCopies=", "@brief Method void QPrinter::setNumCopies(int)\n", false, &_init_f_setNumCopies_767, &_call_f_setNumCopies_767);
}

// void QPrinter::setOrientation(QPrinter::Orientation)


static void _init_f_setOrientation_2537 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const qt_gsi::Converter<QPrinter::Orientation>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setOrientation_2537 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QPrinter::Orientation>::target_type & arg1 = args.read<const qt_gsi::Converter<QPrinter::Orientation>::target_type & > ();
  ((QPrinter *)cls)->setOrientation (qt_gsi::QtToCppAdaptor<QPrinter::Orientation>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setOrientation_2537 ()
{
  return new qt_gsi::GenericMethod ("setOrientation|orientation=", "@brief Method void QPrinter::setOrientation(QPrinter::Orientation)\n", false, &_init_f_setOrientation_2537, &_call_f_setOrientation_2537);
}

// void QPrinter::setOutputFileName(const QString &)


static void _init_f_setOutputFileName_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setOutputFileName_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QPrinter *)cls)->setOutputFileName (arg1);
}

static qt_gsi::GenericMethod *_create_f_setOutputFileName_2025 ()
{
  return new qt_gsi::GenericMethod ("setOutputFileName|outputFileName=", "@brief Method void QPrinter::setOutputFileName(const QString &)\n", false, &_init_f_setOutputFileName_2025, &_call_f_setOutputFileName_2025);
}

// void QPrinter::setOutputFormat(QPrinter::OutputFormat format)


static void _init_f_setOutputFormat_2647 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("format");
  decl->add_arg<const qt_gsi::Converter<QPrinter::OutputFormat>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setOutputFormat_2647 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QPrinter::OutputFormat>::target_type & arg1 = args.read<const qt_gsi::Converter<QPrinter::OutputFormat>::target_type & > ();
  ((QPrinter *)cls)->setOutputFormat (qt_gsi::QtToCppAdaptor<QPrinter::OutputFormat>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setOutputFormat_2647 ()
{
  return new qt_gsi::GenericMethod ("setOutputFormat|outputFormat=", "@brief Method void QPrinter::setOutputFormat(QPrinter::OutputFormat format)\n", false, &_init_f_setOutputFormat_2647, &_call_f_setOutputFormat_2647);
}

// void QPrinter::setPageMargins(double left, double top, double right, double bottom, QPrinter::Unit unit)


static void _init_f_setPageMargins_5641 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("left");
  decl->add_arg<double > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("top");
  decl->add_arg<double > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("right");
  decl->add_arg<double > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("bottom");
  decl->add_arg<double > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("unit");
  decl->add_arg<const qt_gsi::Converter<QPrinter::Unit>::target_type & > (argspec_4);
  decl->set_return<void > ();
}

static void _call_f_setPageMargins_5641 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  double arg1 = args.read<double > ();
  double arg2 = args.read<double > ();
  double arg3 = args.read<double > ();
  double arg4 = args.read<double > ();
  const qt_gsi::Converter<QPrinter::Unit>::target_type & arg5 = args.read<const qt_gsi::Converter<QPrinter::Unit>::target_type & > ();
  ((QPrinter *)cls)->setPageMargins (arg1, arg2, arg3, arg4, qt_gsi::QtToCppAdaptor<QPrinter::Unit>(arg5).cref());
}

static qt_gsi::GenericMethod *_create_f_setPageMargins_5641 ()
{
  return new qt_gsi::GenericMethod ("setPageMargins", "@brief Method void QPrinter::setPageMargins(double left, double top, double right, double bottom, QPrinter::Unit unit)\n", false, &_init_f_setPageMargins_5641, &_call_f_setPageMargins_5641);
}

// void QPrinter::setPageOrder(QPrinter::PageOrder)


static void _init_f_setPageOrder_2262 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const qt_gsi::Converter<QPrinter::PageOrder>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPageOrder_2262 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QPrinter::PageOrder>::target_type & arg1 = args.read<const qt_gsi::Converter<QPrinter::PageOrder>::target_type & > ();
  ((QPrinter *)cls)->setPageOrder (qt_gsi::QtToCppAdaptor<QPrinter::PageOrder>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setPageOrder_2262 ()
{
  return new qt_gsi::GenericMethod ("setPageOrder|pageOrder=", "@brief Method void QPrinter::setPageOrder(QPrinter::PageOrder)\n", false, &_init_f_setPageOrder_2262, &_call_f_setPageOrder_2262);
}

// void QPrinter::setPageSize(QPrinter::PageSize)


static void _init_f_setPageSize_2165 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const qt_gsi::Converter<QPrinter::PageSize>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPageSize_2165 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QPrinter::PageSize>::target_type & arg1 = args.read<const qt_gsi::Converter<QPrinter::PageSize>::target_type & > ();
  ((QPrinter *)cls)->setPageSize (qt_gsi::QtToCppAdaptor<QPrinter::PageSize>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setPageSize_2165 ()
{
  return new qt_gsi::GenericMethod ("setPageSize|pageSize=", "@brief Method void QPrinter::setPageSize(QPrinter::PageSize)\n", false, &_init_f_setPageSize_2165, &_call_f_setPageSize_2165);
}

// void QPrinter::setPaperSize(QPrinter::PageSize)


static void _init_f_setPaperSize_2165 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const qt_gsi::Converter<QPrinter::PageSize>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPaperSize_2165 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QPrinter::PageSize>::target_type & arg1 = args.read<const qt_gsi::Converter<QPrinter::PageSize>::target_type & > ();
  ((QPrinter *)cls)->setPaperSize (qt_gsi::QtToCppAdaptor<QPrinter::PageSize>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setPaperSize_2165 ()
{
  return new qt_gsi::GenericMethod ("setPaperSize|paperSize=", "@brief Method void QPrinter::setPaperSize(QPrinter::PageSize)\n", false, &_init_f_setPaperSize_2165, &_call_f_setPaperSize_2165);
}

// void QPrinter::setPaperSize(const QSizeF &paperSize, QPrinter::Unit unit)


static void _init_f_setPaperSize_3556 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("paperSize");
  decl->add_arg<const QSizeF & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("unit");
  decl->add_arg<const qt_gsi::Converter<QPrinter::Unit>::target_type & > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_setPaperSize_3556 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QSizeF &arg1 = args.read<const QSizeF & > ();
  const qt_gsi::Converter<QPrinter::Unit>::target_type & arg2 = args.read<const qt_gsi::Converter<QPrinter::Unit>::target_type & > ();
  ((QPrinter *)cls)->setPaperSize (arg1, qt_gsi::QtToCppAdaptor<QPrinter::Unit>(arg2).cref());
}

static qt_gsi::GenericMethod *_create_f_setPaperSize_3556 ()
{
  return new qt_gsi::GenericMethod ("setPaperSize", "@brief Method void QPrinter::setPaperSize(const QSizeF &paperSize, QPrinter::Unit unit)\n", false, &_init_f_setPaperSize_3556, &_call_f_setPaperSize_3556);
}

// void QPrinter::setPaperSource(QPrinter::PaperSource)


static void _init_f_setPaperSource_2502 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const qt_gsi::Converter<QPrinter::PaperSource>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPaperSource_2502 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QPrinter::PaperSource>::target_type & arg1 = args.read<const qt_gsi::Converter<QPrinter::PaperSource>::target_type & > ();
  ((QPrinter *)cls)->setPaperSource (qt_gsi::QtToCppAdaptor<QPrinter::PaperSource>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setPaperSource_2502 ()
{
  return new qt_gsi::GenericMethod ("setPaperSource|paperSource=", "@brief Method void QPrinter::setPaperSource(QPrinter::PaperSource)\n", false, &_init_f_setPaperSource_2502, &_call_f_setPaperSource_2502);
}

// void QPrinter::setPrintProgram(const QString &)


static void _init_f_setPrintProgram_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPrintProgram_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QPrinter *)cls)->setPrintProgram (arg1);
}

static qt_gsi::GenericMethod *_create_f_setPrintProgram_2025 ()
{
  return new qt_gsi::GenericMethod ("setPrintProgram|printProgram=", "@brief Method void QPrinter::setPrintProgram(const QString &)\n", false, &_init_f_setPrintProgram_2025, &_call_f_setPrintProgram_2025);
}

// void QPrinter::setPrintRange(QPrinter::PrintRange range)


static void _init_f_setPrintRange_2391 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("range");
  decl->add_arg<const qt_gsi::Converter<QPrinter::PrintRange>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPrintRange_2391 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QPrinter::PrintRange>::target_type & arg1 = args.read<const qt_gsi::Converter<QPrinter::PrintRange>::target_type & > ();
  ((QPrinter *)cls)->setPrintRange (qt_gsi::QtToCppAdaptor<QPrinter::PrintRange>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setPrintRange_2391 ()
{
  return new qt_gsi::GenericMethod ("setPrintRange|printRange=", "@brief Method void QPrinter::setPrintRange(QPrinter::PrintRange range)\n", false, &_init_f_setPrintRange_2391, &_call_f_setPrintRange_2391);
}

// void QPrinter::setPrinterName(const QString &)


static void _init_f_setPrinterName_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPrinterName_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QPrinter *)cls)->setPrinterName (arg1);
}

static qt_gsi::GenericMethod *_create_f_setPrinterName_2025 ()
{
  return new qt_gsi::GenericMethod ("setPrinterName|printerName=", "@brief Method void QPrinter::setPrinterName(const QString &)\n", false, &_init_f_setPrinterName_2025, &_call_f_setPrinterName_2025);
}

// void QPrinter::setResolution(int)


static void _init_f_setResolution_767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<int > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setResolution_767 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ((QPrinter *)cls)->setResolution (arg1);
}

static qt_gsi::GenericMethod *_create_f_setResolution_767 ()
{
  return new qt_gsi::GenericMethod ("setResolution|resolution=", "@brief Method void QPrinter::setResolution(int)\n", false, &_init_f_setResolution_767, &_call_f_setResolution_767);
}

// QList<int> QPrinter::supportedResolutions()


static void _init_f_supportedResolutions_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QList<int> >::target_type > ();
}

static void _call_f_supportedResolutions_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QList<int> >::target_type > ((qt_gsi::Converter<QList<int> >::target_type)qt_gsi::CppToQtAdaptor<QList<int> >(((QPrinter *)cls)->supportedResolutions ()));
}

static qt_gsi::GenericMethod *_create_f_supportedResolutions_c0 ()
{
  return new qt_gsi::GenericMethod ("supportedResolutions", "@brief Method QList<int> QPrinter::supportedResolutions()\n", true, &_init_f_supportedResolutions_c0, &_call_f_supportedResolutions_c0);
}

// int QPrinter::toPage()


static void _init_f_toPage_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_toPage_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QPrinter *)cls)->toPage ());
}

static qt_gsi::GenericMethod *_create_f_toPage_c0 ()
{
  return new qt_gsi::GenericMethod ("toPage", "@brief Method int QPrinter::toPage()\n", true, &_init_f_toPage_c0, &_call_f_toPage_c0);
}

namespace gsi
{
extern gsi::Class<QPaintDevice> decl_QPaintDevice;

gsi::Class<QPrinter> decl_QPrinter (decl_QPaintDevice, "QPrinter_Native",
  gsi::Methods(_create_f_abort_0 ()) +
  gsi::Methods(_create_f_actualNumCopies_c0 ()) +
  gsi::Methods(_create_f_collateCopies_c0 ()) +
  gsi::Methods(_create_f_colorMode_c0 ()) +
  gsi::Methods(_create_f_creator_c0 ()) +
  gsi::Methods(_create_f_docName_c0 ()) +
  gsi::Methods(_create_f_doubleSidedPrinting_c0 ()) +
  gsi::Methods(_create_f_duplex_c0 ()) +
  gsi::Methods(_create_f_fontEmbeddingEnabled_c0 ()) +
  gsi::Methods(_create_f_fromPage_c0 ()) +
  gsi::Methods(_create_f_fullPage_c0 ()) +
  gsi::Methods(_create_f_getPageMargins_c6385 ()) +
  gsi::Methods(_create_f_isValid_c0 ()) +
  gsi::Methods(_create_f_newPage_0 ()) +
  gsi::Methods(_create_f_numCopies_c0 ()) +
  gsi::Methods(_create_f_orientation_c0 ()) +
  gsi::Methods(_create_f_outputFileName_c0 ()) +
  gsi::Methods(_create_f_outputFormat_c0 ()) +
  gsi::Methods(_create_f_pageOrder_c0 ()) +
  gsi::Methods(_create_f_pageRect_c0 ()) +
  gsi::Methods(_create_f_pageRect_c1789 ()) +
  gsi::Methods(_create_f_pageSize_c0 ()) +
  gsi::Methods(_create_f_paintEngine_c0 ()) +
  gsi::Methods(_create_f_paperRect_c0 ()) +
  gsi::Methods(_create_f_paperRect_c1789 ()) +
  gsi::Methods(_create_f_paperSize_c0 ()) +
  gsi::Methods(_create_f_paperSize_c1789 ()) +
  gsi::Methods(_create_f_paperSource_c0 ()) +
  gsi::Methods(_create_f_printEngine_c0 ()) +
  gsi::Methods(_create_f_printProgram_c0 ()) +
  gsi::Methods(_create_f_printRange_c0 ()) +
  gsi::Methods(_create_f_printerName_c0 ()) +
  gsi::Methods(_create_f_printerState_c0 ()) +
  gsi::Methods(_create_f_resolution_c0 ()) +
  gsi::Methods(_create_f_setCollateCopies_864 ()) +
  gsi::Methods(_create_f_setColorMode_2273 ()) +
  gsi::Methods(_create_f_setCreator_2025 ()) +
  gsi::Methods(_create_f_setDocName_2025 ()) +
  gsi::Methods(_create_f_setDoubleSidedPrinting_864 ()) +
  gsi::Methods(_create_f_setDuplex_2388 ()) +
  gsi::Methods(_create_f_setFontEmbeddingEnabled_864 ()) +
  gsi::Methods(_create_f_setFromTo_1426 ()) +
  gsi::Methods(_create_f_setFullPage_864 ()) +
  gsi::Methods(_create_f_setNumCopies_767 ()) +
  gsi::Methods(_create_f_setOrientation_2537 ()) +
  gsi::Methods(_create_f_setOutputFileName_2025 ()) +
  gsi::Methods(_create_f_setOutputFormat_2647 ()) +
  gsi::Methods(_create_f_setPageMargins_5641 ()) +
  gsi::Methods(_create_f_setPageOrder_2262 ()) +
  gsi::Methods(_create_f_setPageSize_2165 ()) +
  gsi::Methods(_create_f_setPaperSize_2165 ()) +
  gsi::Methods(_create_f_setPaperSize_3556 ()) +
  gsi::Methods(_create_f_setPaperSource_2502 ()) +
  gsi::Methods(_create_f_setPrintProgram_2025 ()) +
  gsi::Methods(_create_f_setPrintRange_2391 ()) +
  gsi::Methods(_create_f_setPrinterName_2025 ()) +
  gsi::Methods(_create_f_setResolution_767 ()) +
  gsi::Methods(_create_f_supportedResolutions_c0 ()) +
  gsi::Methods(_create_f_toPage_c0 ()),
  "@hide\n@alias QPrinter");
}


class QPrinter_Adaptor : public QPrinter, public qt_gsi::QtObjectBase
{
public:

  virtual ~QPrinter_Adaptor();

  //  [adaptor ctor] QPrinter::QPrinter(QPrinter::PrinterMode mode)
  QPrinter_Adaptor() : QPrinter()
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QPrinter::QPrinter(QPrinter::PrinterMode mode)
  QPrinter_Adaptor(QPrinter::PrinterMode mode) : QPrinter(mode)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QPrinter::QPrinter(const QPrinterInfo &printer, QPrinter::PrinterMode mode)
  QPrinter_Adaptor(const QPrinterInfo &printer) : QPrinter(printer)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QPrinter::QPrinter(const QPrinterInfo &printer, QPrinter::PrinterMode mode)
  QPrinter_Adaptor(const QPrinterInfo &printer, QPrinter::PrinterMode mode) : QPrinter(printer, mode)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  void QPrinter::setEngines(QPrintEngine *printEngine, QPaintEngine *paintEngine)
  void fp_QPrinter_setEngines_3527 (QPrintEngine *printEngine, QPaintEngine *paintEngine) {
    QPrinter::setEngines(printEngine, paintEngine);
  }

  //  [adaptor impl] QPaintEngine *QPrinter::paintEngine()
  QPaintEngine * cbs_paintEngine_c0_0() const
  {
    return QPrinter::paintEngine();
  }

  virtual QPaintEngine * paintEngine() const
  {
    if (cb_paintEngine_c0_0.can_issue()) {
      return cb_paintEngine_c0_0.issue<QPrinter_Adaptor, QPaintEngine *>(&QPrinter_Adaptor::cbs_paintEngine_c0_0);
    } else {
      return QPrinter::paintEngine();
    }
  }

  //  [adaptor impl] int QPrinter::metric(QPaintDevice::PaintDeviceMetric)
  int cbs_metric_c3445_0(const qt_gsi::Converter<QPaintDevice::PaintDeviceMetric>::target_type & arg1) const
  {
    return QPrinter::metric(qt_gsi::QtToCppAdaptor<QPaintDevice::PaintDeviceMetric>(arg1).cref());
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric arg1) const
  {
    if (cb_metric_c3445_0.can_issue()) {
      return cb_metric_c3445_0.issue<QPrinter_Adaptor, int, const qt_gsi::Converter<QPaintDevice::PaintDeviceMetric>::target_type &>(&QPrinter_Adaptor::cbs_metric_c3445_0, qt_gsi::CppToQtAdaptor<QPaintDevice::PaintDeviceMetric>(arg1));
    } else {
      return QPrinter::metric(arg1);
    }
  }

  gsi::Callback cb_paintEngine_c0_0;
  gsi::Callback cb_metric_c3445_0;
};

QPrinter_Adaptor::~QPrinter_Adaptor() { }

//  Constructor QPrinter::QPrinter(QPrinter::PrinterMode mode) (adaptor class)

static void _init_ctor_QPrinter_Adaptor_2502 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("mode", true, "QPrinter::ScreenResolution");
  decl->add_arg<const qt_gsi::Converter<QPrinter::PrinterMode>::target_type & > (argspec_0);
  decl->set_return_new<QPrinter_Adaptor *> ();
}

static void _call_ctor_QPrinter_Adaptor_2502 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  tl::Heap heap;
  const qt_gsi::Converter<QPrinter::PrinterMode>::target_type & arg1 = args ? args.read<const qt_gsi::Converter<QPrinter::PrinterMode>::target_type & > () : (const qt_gsi::Converter<QPrinter::PrinterMode>::target_type &)(qt_gsi::CppToQtReadAdaptor<QPrinter::PrinterMode>(heap, QPrinter::ScreenResolution));
  ret.write<QPrinter_Adaptor *> (new QPrinter_Adaptor (qt_gsi::QtToCppAdaptor<QPrinter::PrinterMode>(arg1).cref()));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QPrinter_Adaptor_2502 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QPrinter::QPrinter(QPrinter::PrinterMode mode)\nThis method creates an object of class QPrinter.", &_init_ctor_QPrinter_Adaptor_2502, &_call_ctor_QPrinter_Adaptor_2502);
}

//  Constructor QPrinter::QPrinter(const QPrinterInfo &printer, QPrinter::PrinterMode mode) (adaptor class)

static void _init_ctor_QPrinter_Adaptor_4924 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("printer");
  decl->add_arg<const QPrinterInfo & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("mode", true, "QPrinter::ScreenResolution");
  decl->add_arg<const qt_gsi::Converter<QPrinter::PrinterMode>::target_type & > (argspec_1);
  decl->set_return_new<QPrinter_Adaptor *> ();
}

static void _call_ctor_QPrinter_Adaptor_4924 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QPrinterInfo &arg1 = args.read<const QPrinterInfo & > ();
  tl::Heap heap;
  const qt_gsi::Converter<QPrinter::PrinterMode>::target_type & arg2 = args ? args.read<const qt_gsi::Converter<QPrinter::PrinterMode>::target_type & > () : (const qt_gsi::Converter<QPrinter::PrinterMode>::target_type &)(qt_gsi::CppToQtReadAdaptor<QPrinter::PrinterMode>(heap, QPrinter::ScreenResolution));
  ret.write<QPrinter_Adaptor *> (new QPrinter_Adaptor (arg1, qt_gsi::QtToCppAdaptor<QPrinter::PrinterMode>(arg2).cref()));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QPrinter_Adaptor_4924 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QPrinter::QPrinter(const QPrinterInfo &printer, QPrinter::PrinterMode mode)\nThis method creates an object of class QPrinter.", &_init_ctor_QPrinter_Adaptor_4924, &_call_ctor_QPrinter_Adaptor_4924);
}

// void QPrinter::setEngines(QPrintEngine *printEngine, QPaintEngine *paintEngine)

static void _init_fp_setEngines_3527 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("printEngine");
  decl->add_arg<QPrintEngine * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("paintEngine");
  decl->add_arg<QPaintEngine * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_fp_setEngines_3527 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QPrintEngine *arg1 = args.read<QPrintEngine * > ();
  QPaintEngine *arg2 = args.read<QPaintEngine * > ();
  ((QPrinter_Adaptor *)cls)->fp_QPrinter_setEngines_3527 (arg1, arg2);
}

static qt_gsi::GenericMethod*_create_fp_setEngines_3527 ()
{
  return new qt_gsi::GenericMethod("*setEngines", "@brief Method void QPrinter::setEngines(QPrintEngine *printEngine, QPaintEngine *paintEngine)\nThis method is protected and can only be called from inside a derived class.", false, &_init_fp_setEngines_3527, &_call_fp_setEngines_3527);
}


// QPaintEngine *QPrinter::paintEngine()

static void _init_cbs_paintEngine_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QPaintEngine * > ();
}

static void _call_cbs_paintEngine_c0_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QPaintEngine * > ((QPaintEngine *)((QPrinter_Adaptor *)cls)->cbs_paintEngine_c0_0 ());
}

static void _set_callback_cbs_paintEngine_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QPrinter_Adaptor *)cls)->cb_paintEngine_c0_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_paintEngine_c0_0 ()
{
  return new qt_gsi::GenericMethod ("paintEngine", "@hide", true, &_init_cbs_paintEngine_c0_0, &_call_cbs_paintEngine_c0_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_paintEngine_c0_0 ()
{
  return new qt_gsi::GenericMethod ("paintEngine", "@brief Virtual method QPaintEngine *QPrinter::paintEngine()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_paintEngine_c0_0, &_call_cbs_paintEngine_c0_0, &_set_callback_cbs_paintEngine_c0_0);
}


// int QPrinter::metric(QPaintDevice::PaintDeviceMetric)

static void _init_cbs_metric_c3445_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const qt_gsi::Converter<QPaintDevice::PaintDeviceMetric>::target_type & > (argspec_0);
  decl->set_return<int > ();
}

static void _call_cbs_metric_c3445_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QPaintDevice::PaintDeviceMetric>::target_type & arg1 = args.read<const qt_gsi::Converter<QPaintDevice::PaintDeviceMetric>::target_type & > ();
  ret.write<int > ((int)((QPrinter_Adaptor *)cls)->cbs_metric_c3445_0 (arg1));
}

static void _set_callback_cbs_metric_c3445_0 (void *cls, const gsi::Callback &cb)
{
  ((QPrinter_Adaptor *)cls)->cb_metric_c3445_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_metric_c3445_0 ()
{
  return new qt_gsi::GenericMethod ("*metric", "@hide", true, &_init_cbs_metric_c3445_0, &_call_cbs_metric_c3445_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_metric_c3445_0 ()
{
  return new qt_gsi::GenericMethod ("*metric", "@brief Virtual method int QPrinter::metric(QPaintDevice::PaintDeviceMetric)\nThis method can be reimplemented in a derived class.", true, &_init_cbs_metric_c3445_0, &_call_cbs_metric_c3445_0, &_set_callback_cbs_metric_c3445_0);
}


namespace gsi
{

extern gsi::Class<QPrinter> decl_QPrinter;

gsi::Class<QPrinter_Adaptor> decl_QPrinter_Adaptor (decl_QPrinter, "QPrinter",
  gsi::Methods(_create_fp_setEngines_3527 ()) +
  gsi::Methods(_create_cbs_paintEngine_c0_0 ()) +
  gsi::Methods(_create_callback_cbs_paintEngine_c0_0 ()) +
  gsi::Methods(_create_cbs_metric_c3445_0 ()) +
  gsi::Methods(_create_callback_cbs_metric_c3445_0 ()) +
  gsi::Methods(_create_ctor_QPrinter_Adaptor_2502 ()) +
  gsi::Methods(_create_ctor_QPrinter_Adaptor_4924 ()),
  "@qt\n@brief Binding of QPrinter");

}


//  Implementation of the enum wrapper class for QPrinter::ColorMode
namespace qt_gsi
{

static QPrinter_ColorMode_Enum *c_1_QPrinter_ColorMode_Enum () { return new QPrinter_ColorMode_Enum (QPrinter::GrayScale); }
static QPrinter_ColorMode_Enum *c_2_QPrinter_ColorMode_Enum () { return new QPrinter_ColorMode_Enum (QPrinter::Color); }

static gsi::Methods mkdefs_QPrinter_ColorMode () {
  return
    gsi::constant ("GrayScale", &qt_gsi::c_1_QPrinter_ColorMode_Enum, "@brief Enum constant QPrinter::GrayScale") +
    gsi::constant ("Color", &qt_gsi::c_2_QPrinter_ColorMode_Enum, "@brief Enum constant QPrinter::Color");
}

static std::string to_s_QPrinter_ColorMode_Enum (const QPrinter_ColorMode_Enum *e)
{
  if (e->value () == QPrinter::GrayScale) { return tl::sprintf ("GrayScale (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Color) { return tl::sprintf ("Color (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QPrinter_ColorMode_Enum (const QPrinter_ColorMode_Enum *e)
{
  return (unsigned int) e->value ();
}

static QPrinter_ColorMode_Enum *from_i_QPrinter_ColorMode_Enum (unsigned int i)
{
  return new QPrinter_ColorMode_Enum ((QPrinter::ColorMode) i);
}

static bool equalQPrinter_ColorMode_Enum (const QPrinter_ColorMode_Enum *e, QPrinter_ColorMode_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QPrinter_ColorMode_Enum (const QPrinter_ColorMode_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QPrinter_ColorMode_Enums oropQPrinter_ColorMode_Enums (const QPrinter_ColorMode_Enums *e, const QPrinter_ColorMode_Enums &d)
{
  return e->flags () | d.flags ();
}

static QPrinter_ColorMode_Enums andopQPrinter_ColorMode_Enums (const QPrinter_ColorMode_Enums *e, const QPrinter_ColorMode_Enums &d)
{
  return e->flags () & d.flags ();
}

static QPrinter_ColorMode_Enums xoropQPrinter_ColorMode_Enums (const QPrinter_ColorMode_Enums *e, const QPrinter_ColorMode_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QPrinter_ColorMode_Enums (const QPrinter_ColorMode_Enums *e)
{
  std::string l;
  if (e->testFlag (QPrinter::GrayScale)) { if (!l.empty ()) l += "|"; l += "GrayScale"; }
  if (e->testFlag (QPrinter::Color)) { if (!l.empty ()) l += "|"; l += "Color"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QPrinter_ColorMode_Enums (const QPrinter_ColorMode_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QPrinter_ColorMode_Enums (const QPrinter_ColorMode_Enums *e, const QPrinter_ColorMode_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QPrinter_ColorMode_Enums> decl_QPrinter_ColorMode_Enums ("QPrinter_QFlags_ColorMode",
  gsi::method_ext ("|", &qt_gsi::oropQPrinter_ColorMode_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQPrinter_ColorMode_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQPrinter_ColorMode_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_ColorMode_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_ColorMode_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QPrinter_ColorMode_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QPrinter::ColorMode> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QPrinter_ColorMode_Enum> decl_QPrinter_ColorMode_Enum (decl_QPrinter_ColorMode_Enums, "QPrinter_ColorMode",
  qt_gsi::mkdefs_QPrinter_ColorMode () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_ColorMode_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_ColorMode_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQPrinter_ColorMode_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QPrinter_ColorMode_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QPrinter_ColorMode_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QPrinter::ColorMode enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QPrinter> inject_QPrinter_ColorMode_Enum_in_parent (qt_gsi::mkdefs_QPrinter_ColorMode ());
static gsi::ClassExt<QPrinter> decl_QPrinter_ColorMode_Enum_as_child (decl_QPrinter_ColorMode_Enum, "ColorMode");

}


//  Implementation of the enum wrapper class for QPrinter::DuplexMode
namespace qt_gsi
{

static QPrinter_DuplexMode_Enum *c_1_QPrinter_DuplexMode_Enum () { return new QPrinter_DuplexMode_Enum (QPrinter::DuplexNone); }
static QPrinter_DuplexMode_Enum *c_2_QPrinter_DuplexMode_Enum () { return new QPrinter_DuplexMode_Enum (QPrinter::DuplexAuto); }
static QPrinter_DuplexMode_Enum *c_3_QPrinter_DuplexMode_Enum () { return new QPrinter_DuplexMode_Enum (QPrinter::DuplexLongSide); }
static QPrinter_DuplexMode_Enum *c_4_QPrinter_DuplexMode_Enum () { return new QPrinter_DuplexMode_Enum (QPrinter::DuplexShortSide); }

static gsi::Methods mkdefs_QPrinter_DuplexMode () {
  return
    gsi::constant ("DuplexNone", &qt_gsi::c_1_QPrinter_DuplexMode_Enum, "@brief Enum constant QPrinter::DuplexNone") +
    gsi::constant ("DuplexAuto", &qt_gsi::c_2_QPrinter_DuplexMode_Enum, "@brief Enum constant QPrinter::DuplexAuto") +
    gsi::constant ("DuplexLongSide", &qt_gsi::c_3_QPrinter_DuplexMode_Enum, "@brief Enum constant QPrinter::DuplexLongSide") +
    gsi::constant ("DuplexShortSide", &qt_gsi::c_4_QPrinter_DuplexMode_Enum, "@brief Enum constant QPrinter::DuplexShortSide");
}

static std::string to_s_QPrinter_DuplexMode_Enum (const QPrinter_DuplexMode_Enum *e)
{
  if (e->value () == QPrinter::DuplexNone) { return tl::sprintf ("DuplexNone (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::DuplexAuto) { return tl::sprintf ("DuplexAuto (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::DuplexLongSide) { return tl::sprintf ("DuplexLongSide (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::DuplexShortSide) { return tl::sprintf ("DuplexShortSide (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QPrinter_DuplexMode_Enum (const QPrinter_DuplexMode_Enum *e)
{
  return (unsigned int) e->value ();
}

static QPrinter_DuplexMode_Enum *from_i_QPrinter_DuplexMode_Enum (unsigned int i)
{
  return new QPrinter_DuplexMode_Enum ((QPrinter::DuplexMode) i);
}

static bool equalQPrinter_DuplexMode_Enum (const QPrinter_DuplexMode_Enum *e, QPrinter_DuplexMode_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QPrinter_DuplexMode_Enum (const QPrinter_DuplexMode_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QPrinter_DuplexMode_Enums oropQPrinter_DuplexMode_Enums (const QPrinter_DuplexMode_Enums *e, const QPrinter_DuplexMode_Enums &d)
{
  return e->flags () | d.flags ();
}

static QPrinter_DuplexMode_Enums andopQPrinter_DuplexMode_Enums (const QPrinter_DuplexMode_Enums *e, const QPrinter_DuplexMode_Enums &d)
{
  return e->flags () & d.flags ();
}

static QPrinter_DuplexMode_Enums xoropQPrinter_DuplexMode_Enums (const QPrinter_DuplexMode_Enums *e, const QPrinter_DuplexMode_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QPrinter_DuplexMode_Enums (const QPrinter_DuplexMode_Enums *e)
{
  std::string l;
  if (e->testFlag (QPrinter::DuplexNone)) { if (!l.empty ()) l += "|"; l += "DuplexNone"; }
  if (e->testFlag (QPrinter::DuplexAuto)) { if (!l.empty ()) l += "|"; l += "DuplexAuto"; }
  if (e->testFlag (QPrinter::DuplexLongSide)) { if (!l.empty ()) l += "|"; l += "DuplexLongSide"; }
  if (e->testFlag (QPrinter::DuplexShortSide)) { if (!l.empty ()) l += "|"; l += "DuplexShortSide"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QPrinter_DuplexMode_Enums (const QPrinter_DuplexMode_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QPrinter_DuplexMode_Enums (const QPrinter_DuplexMode_Enums *e, const QPrinter_DuplexMode_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QPrinter_DuplexMode_Enums> decl_QPrinter_DuplexMode_Enums ("QPrinter_QFlags_DuplexMode",
  gsi::method_ext ("|", &qt_gsi::oropQPrinter_DuplexMode_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQPrinter_DuplexMode_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQPrinter_DuplexMode_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_DuplexMode_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_DuplexMode_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QPrinter_DuplexMode_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QPrinter::DuplexMode> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QPrinter_DuplexMode_Enum> decl_QPrinter_DuplexMode_Enum (decl_QPrinter_DuplexMode_Enums, "QPrinter_DuplexMode",
  qt_gsi::mkdefs_QPrinter_DuplexMode () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_DuplexMode_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_DuplexMode_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQPrinter_DuplexMode_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QPrinter_DuplexMode_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QPrinter_DuplexMode_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QPrinter::DuplexMode enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QPrinter> inject_QPrinter_DuplexMode_Enum_in_parent (qt_gsi::mkdefs_QPrinter_DuplexMode ());
static gsi::ClassExt<QPrinter> decl_QPrinter_DuplexMode_Enum_as_child (decl_QPrinter_DuplexMode_Enum, "DuplexMode");

}


//  Implementation of the enum wrapper class for QPrinter::Orientation
namespace qt_gsi
{

static QPrinter_Orientation_Enum *c_1_QPrinter_Orientation_Enum () { return new QPrinter_Orientation_Enum (QPrinter::Portrait); }
static QPrinter_Orientation_Enum *c_2_QPrinter_Orientation_Enum () { return new QPrinter_Orientation_Enum (QPrinter::Landscape); }

static gsi::Methods mkdefs_QPrinter_Orientation () {
  return
    gsi::constant ("Portrait", &qt_gsi::c_1_QPrinter_Orientation_Enum, "@brief Enum constant QPrinter::Portrait") +
    gsi::constant ("Landscape", &qt_gsi::c_2_QPrinter_Orientation_Enum, "@brief Enum constant QPrinter::Landscape");
}

static std::string to_s_QPrinter_Orientation_Enum (const QPrinter_Orientation_Enum *e)
{
  if (e->value () == QPrinter::Portrait) { return tl::sprintf ("Portrait (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Landscape) { return tl::sprintf ("Landscape (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QPrinter_Orientation_Enum (const QPrinter_Orientation_Enum *e)
{
  return (unsigned int) e->value ();
}

static QPrinter_Orientation_Enum *from_i_QPrinter_Orientation_Enum (unsigned int i)
{
  return new QPrinter_Orientation_Enum ((QPrinter::Orientation) i);
}

static bool equalQPrinter_Orientation_Enum (const QPrinter_Orientation_Enum *e, QPrinter_Orientation_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QPrinter_Orientation_Enum (const QPrinter_Orientation_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QPrinter_Orientation_Enums oropQPrinter_Orientation_Enums (const QPrinter_Orientation_Enums *e, const QPrinter_Orientation_Enums &d)
{
  return e->flags () | d.flags ();
}

static QPrinter_Orientation_Enums andopQPrinter_Orientation_Enums (const QPrinter_Orientation_Enums *e, const QPrinter_Orientation_Enums &d)
{
  return e->flags () & d.flags ();
}

static QPrinter_Orientation_Enums xoropQPrinter_Orientation_Enums (const QPrinter_Orientation_Enums *e, const QPrinter_Orientation_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QPrinter_Orientation_Enums (const QPrinter_Orientation_Enums *e)
{
  std::string l;
  if (e->testFlag (QPrinter::Portrait)) { if (!l.empty ()) l += "|"; l += "Portrait"; }
  if (e->testFlag (QPrinter::Landscape)) { if (!l.empty ()) l += "|"; l += "Landscape"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QPrinter_Orientation_Enums (const QPrinter_Orientation_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QPrinter_Orientation_Enums (const QPrinter_Orientation_Enums *e, const QPrinter_Orientation_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QPrinter_Orientation_Enums> decl_QPrinter_Orientation_Enums ("QPrinter_QFlags_Orientation",
  gsi::method_ext ("|", &qt_gsi::oropQPrinter_Orientation_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQPrinter_Orientation_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQPrinter_Orientation_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_Orientation_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_Orientation_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QPrinter_Orientation_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QPrinter::Orientation> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QPrinter_Orientation_Enum> decl_QPrinter_Orientation_Enum (decl_QPrinter_Orientation_Enums, "QPrinter_Orientation",
  qt_gsi::mkdefs_QPrinter_Orientation () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_Orientation_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_Orientation_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQPrinter_Orientation_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QPrinter_Orientation_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QPrinter_Orientation_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QPrinter::Orientation enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QPrinter> inject_QPrinter_Orientation_Enum_in_parent (qt_gsi::mkdefs_QPrinter_Orientation ());
static gsi::ClassExt<QPrinter> decl_QPrinter_Orientation_Enum_as_child (decl_QPrinter_Orientation_Enum, "Orientation");

}


//  Implementation of the enum wrapper class for QPrinter::OutputFormat
namespace qt_gsi
{

static QPrinter_OutputFormat_Enum *c_1_QPrinter_OutputFormat_Enum () { return new QPrinter_OutputFormat_Enum (QPrinter::NativeFormat); }
static QPrinter_OutputFormat_Enum *c_2_QPrinter_OutputFormat_Enum () { return new QPrinter_OutputFormat_Enum (QPrinter::PdfFormat); }
static QPrinter_OutputFormat_Enum *c_3_QPrinter_OutputFormat_Enum () { return new QPrinter_OutputFormat_Enum (QPrinter::PostScriptFormat); }

static gsi::Methods mkdefs_QPrinter_OutputFormat () {
  return
    gsi::constant ("NativeFormat", &qt_gsi::c_1_QPrinter_OutputFormat_Enum, "@brief Enum constant QPrinter::NativeFormat") +
    gsi::constant ("PdfFormat", &qt_gsi::c_2_QPrinter_OutputFormat_Enum, "@brief Enum constant QPrinter::PdfFormat") +
    gsi::constant ("PostScriptFormat", &qt_gsi::c_3_QPrinter_OutputFormat_Enum, "@brief Enum constant QPrinter::PostScriptFormat");
}

static std::string to_s_QPrinter_OutputFormat_Enum (const QPrinter_OutputFormat_Enum *e)
{
  if (e->value () == QPrinter::NativeFormat) { return tl::sprintf ("NativeFormat (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::PdfFormat) { return tl::sprintf ("PdfFormat (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::PostScriptFormat) { return tl::sprintf ("PostScriptFormat (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QPrinter_OutputFormat_Enum (const QPrinter_OutputFormat_Enum *e)
{
  return (unsigned int) e->value ();
}

static QPrinter_OutputFormat_Enum *from_i_QPrinter_OutputFormat_Enum (unsigned int i)
{
  return new QPrinter_OutputFormat_Enum ((QPrinter::OutputFormat) i);
}

static bool equalQPrinter_OutputFormat_Enum (const QPrinter_OutputFormat_Enum *e, QPrinter_OutputFormat_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QPrinter_OutputFormat_Enum (const QPrinter_OutputFormat_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QPrinter_OutputFormat_Enums oropQPrinter_OutputFormat_Enums (const QPrinter_OutputFormat_Enums *e, const QPrinter_OutputFormat_Enums &d)
{
  return e->flags () | d.flags ();
}

static QPrinter_OutputFormat_Enums andopQPrinter_OutputFormat_Enums (const QPrinter_OutputFormat_Enums *e, const QPrinter_OutputFormat_Enums &d)
{
  return e->flags () & d.flags ();
}

static QPrinter_OutputFormat_Enums xoropQPrinter_OutputFormat_Enums (const QPrinter_OutputFormat_Enums *e, const QPrinter_OutputFormat_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QPrinter_OutputFormat_Enums (const QPrinter_OutputFormat_Enums *e)
{
  std::string l;
  if (e->testFlag (QPrinter::NativeFormat)) { if (!l.empty ()) l += "|"; l += "NativeFormat"; }
  if (e->testFlag (QPrinter::PdfFormat)) { if (!l.empty ()) l += "|"; l += "PdfFormat"; }
  if (e->testFlag (QPrinter::PostScriptFormat)) { if (!l.empty ()) l += "|"; l += "PostScriptFormat"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QPrinter_OutputFormat_Enums (const QPrinter_OutputFormat_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QPrinter_OutputFormat_Enums (const QPrinter_OutputFormat_Enums *e, const QPrinter_OutputFormat_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QPrinter_OutputFormat_Enums> decl_QPrinter_OutputFormat_Enums ("QPrinter_QFlags_OutputFormat",
  gsi::method_ext ("|", &qt_gsi::oropQPrinter_OutputFormat_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQPrinter_OutputFormat_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQPrinter_OutputFormat_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_OutputFormat_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_OutputFormat_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QPrinter_OutputFormat_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QPrinter::OutputFormat> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QPrinter_OutputFormat_Enum> decl_QPrinter_OutputFormat_Enum (decl_QPrinter_OutputFormat_Enums, "QPrinter_OutputFormat",
  qt_gsi::mkdefs_QPrinter_OutputFormat () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_OutputFormat_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_OutputFormat_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQPrinter_OutputFormat_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QPrinter_OutputFormat_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QPrinter_OutputFormat_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QPrinter::OutputFormat enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QPrinter> inject_QPrinter_OutputFormat_Enum_in_parent (qt_gsi::mkdefs_QPrinter_OutputFormat ());
static gsi::ClassExt<QPrinter> decl_QPrinter_OutputFormat_Enum_as_child (decl_QPrinter_OutputFormat_Enum, "OutputFormat");

}


//  Implementation of the enum wrapper class for QPrinter::PageOrder
namespace qt_gsi
{

static QPrinter_PageOrder_Enum *c_1_QPrinter_PageOrder_Enum () { return new QPrinter_PageOrder_Enum (QPrinter::FirstPageFirst); }
static QPrinter_PageOrder_Enum *c_2_QPrinter_PageOrder_Enum () { return new QPrinter_PageOrder_Enum (QPrinter::LastPageFirst); }

static gsi::Methods mkdefs_QPrinter_PageOrder () {
  return
    gsi::constant ("FirstPageFirst", &qt_gsi::c_1_QPrinter_PageOrder_Enum, "@brief Enum constant QPrinter::FirstPageFirst") +
    gsi::constant ("LastPageFirst", &qt_gsi::c_2_QPrinter_PageOrder_Enum, "@brief Enum constant QPrinter::LastPageFirst");
}

static std::string to_s_QPrinter_PageOrder_Enum (const QPrinter_PageOrder_Enum *e)
{
  if (e->value () == QPrinter::FirstPageFirst) { return tl::sprintf ("FirstPageFirst (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::LastPageFirst) { return tl::sprintf ("LastPageFirst (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QPrinter_PageOrder_Enum (const QPrinter_PageOrder_Enum *e)
{
  return (unsigned int) e->value ();
}

static QPrinter_PageOrder_Enum *from_i_QPrinter_PageOrder_Enum (unsigned int i)
{
  return new QPrinter_PageOrder_Enum ((QPrinter::PageOrder) i);
}

static bool equalQPrinter_PageOrder_Enum (const QPrinter_PageOrder_Enum *e, QPrinter_PageOrder_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QPrinter_PageOrder_Enum (const QPrinter_PageOrder_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QPrinter_PageOrder_Enums oropQPrinter_PageOrder_Enums (const QPrinter_PageOrder_Enums *e, const QPrinter_PageOrder_Enums &d)
{
  return e->flags () | d.flags ();
}

static QPrinter_PageOrder_Enums andopQPrinter_PageOrder_Enums (const QPrinter_PageOrder_Enums *e, const QPrinter_PageOrder_Enums &d)
{
  return e->flags () & d.flags ();
}

static QPrinter_PageOrder_Enums xoropQPrinter_PageOrder_Enums (const QPrinter_PageOrder_Enums *e, const QPrinter_PageOrder_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QPrinter_PageOrder_Enums (const QPrinter_PageOrder_Enums *e)
{
  std::string l;
  if (e->testFlag (QPrinter::FirstPageFirst)) { if (!l.empty ()) l += "|"; l += "FirstPageFirst"; }
  if (e->testFlag (QPrinter::LastPageFirst)) { if (!l.empty ()) l += "|"; l += "LastPageFirst"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QPrinter_PageOrder_Enums (const QPrinter_PageOrder_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QPrinter_PageOrder_Enums (const QPrinter_PageOrder_Enums *e, const QPrinter_PageOrder_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QPrinter_PageOrder_Enums> decl_QPrinter_PageOrder_Enums ("QPrinter_QFlags_PageOrder",
  gsi::method_ext ("|", &qt_gsi::oropQPrinter_PageOrder_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQPrinter_PageOrder_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQPrinter_PageOrder_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_PageOrder_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_PageOrder_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QPrinter_PageOrder_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QPrinter::PageOrder> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QPrinter_PageOrder_Enum> decl_QPrinter_PageOrder_Enum (decl_QPrinter_PageOrder_Enums, "QPrinter_PageOrder",
  qt_gsi::mkdefs_QPrinter_PageOrder () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_PageOrder_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_PageOrder_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQPrinter_PageOrder_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QPrinter_PageOrder_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QPrinter_PageOrder_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QPrinter::PageOrder enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QPrinter> inject_QPrinter_PageOrder_Enum_in_parent (qt_gsi::mkdefs_QPrinter_PageOrder ());
static gsi::ClassExt<QPrinter> decl_QPrinter_PageOrder_Enum_as_child (decl_QPrinter_PageOrder_Enum, "PageOrder");

}


//  Implementation of the enum wrapper class for QPrinter::PageSize
namespace qt_gsi
{

static QPrinter_PageSize_Enum *c_1_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::A4); }
static QPrinter_PageSize_Enum *c_2_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::B5); }
static QPrinter_PageSize_Enum *c_3_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::Letter); }
static QPrinter_PageSize_Enum *c_4_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::Legal); }
static QPrinter_PageSize_Enum *c_5_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::Executive); }
static QPrinter_PageSize_Enum *c_6_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::A0); }
static QPrinter_PageSize_Enum *c_7_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::A1); }
static QPrinter_PageSize_Enum *c_8_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::A2); }
static QPrinter_PageSize_Enum *c_9_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::A3); }
static QPrinter_PageSize_Enum *c_10_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::A5); }
static QPrinter_PageSize_Enum *c_11_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::A6); }
static QPrinter_PageSize_Enum *c_12_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::A7); }
static QPrinter_PageSize_Enum *c_13_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::A8); }
static QPrinter_PageSize_Enum *c_14_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::A9); }
static QPrinter_PageSize_Enum *c_15_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::B0); }
static QPrinter_PageSize_Enum *c_16_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::B1); }
static QPrinter_PageSize_Enum *c_17_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::B10); }
static QPrinter_PageSize_Enum *c_18_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::B2); }
static QPrinter_PageSize_Enum *c_19_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::B3); }
static QPrinter_PageSize_Enum *c_20_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::B4); }
static QPrinter_PageSize_Enum *c_21_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::B6); }
static QPrinter_PageSize_Enum *c_22_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::B7); }
static QPrinter_PageSize_Enum *c_23_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::B8); }
static QPrinter_PageSize_Enum *c_24_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::B9); }
static QPrinter_PageSize_Enum *c_25_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::C5E); }
static QPrinter_PageSize_Enum *c_26_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::Comm10E); }
static QPrinter_PageSize_Enum *c_27_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::DLE); }
static QPrinter_PageSize_Enum *c_28_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::Folio); }
static QPrinter_PageSize_Enum *c_29_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::Ledger); }
static QPrinter_PageSize_Enum *c_30_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::Tabloid); }
static QPrinter_PageSize_Enum *c_31_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::Custom); }
static QPrinter_PageSize_Enum *c_32_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::NPageSize); }
static QPrinter_PageSize_Enum *c_33_QPrinter_PageSize_Enum () { return new QPrinter_PageSize_Enum (QPrinter::NPaperSize); }

static gsi::Methods mkdefs_QPrinter_PageSize () {
  return
    gsi::constant ("A4", &qt_gsi::c_1_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::A4") +
    gsi::constant ("B5", &qt_gsi::c_2_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::B5") +
    gsi::constant ("Letter", &qt_gsi::c_3_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::Letter") +
    gsi::constant ("Legal", &qt_gsi::c_4_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::Legal") +
    gsi::constant ("Executive", &qt_gsi::c_5_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::Executive") +
    gsi::constant ("A0", &qt_gsi::c_6_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::A0") +
    gsi::constant ("A1", &qt_gsi::c_7_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::A1") +
    gsi::constant ("A2", &qt_gsi::c_8_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::A2") +
    gsi::constant ("A3", &qt_gsi::c_9_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::A3") +
    gsi::constant ("A5", &qt_gsi::c_10_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::A5") +
    gsi::constant ("A6", &qt_gsi::c_11_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::A6") +
    gsi::constant ("A7", &qt_gsi::c_12_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::A7") +
    gsi::constant ("A8", &qt_gsi::c_13_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::A8") +
    gsi::constant ("A9", &qt_gsi::c_14_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::A9") +
    gsi::constant ("B0", &qt_gsi::c_15_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::B0") +
    gsi::constant ("B1", &qt_gsi::c_16_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::B1") +
    gsi::constant ("B10", &qt_gsi::c_17_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::B10") +
    gsi::constant ("B2", &qt_gsi::c_18_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::B2") +
    gsi::constant ("B3", &qt_gsi::c_19_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::B3") +
    gsi::constant ("B4", &qt_gsi::c_20_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::B4") +
    gsi::constant ("B6", &qt_gsi::c_21_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::B6") +
    gsi::constant ("B7", &qt_gsi::c_22_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::B7") +
    gsi::constant ("B8", &qt_gsi::c_23_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::B8") +
    gsi::constant ("B9", &qt_gsi::c_24_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::B9") +
    gsi::constant ("C5E", &qt_gsi::c_25_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::C5E") +
    gsi::constant ("Comm10E", &qt_gsi::c_26_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::Comm10E") +
    gsi::constant ("DLE", &qt_gsi::c_27_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::DLE") +
    gsi::constant ("Folio", &qt_gsi::c_28_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::Folio") +
    gsi::constant ("Ledger", &qt_gsi::c_29_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::Ledger") +
    gsi::constant ("Tabloid", &qt_gsi::c_30_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::Tabloid") +
    gsi::constant ("Custom", &qt_gsi::c_31_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::Custom") +
    gsi::constant ("NPageSize", &qt_gsi::c_32_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::NPageSize") +
    gsi::constant ("NPaperSize", &qt_gsi::c_33_QPrinter_PageSize_Enum, "@brief Enum constant QPrinter::NPaperSize");
}

static std::string to_s_QPrinter_PageSize_Enum (const QPrinter_PageSize_Enum *e)
{
  if (e->value () == QPrinter::A4) { return tl::sprintf ("A4 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::B5) { return tl::sprintf ("B5 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Letter) { return tl::sprintf ("Letter (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Legal) { return tl::sprintf ("Legal (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Executive) { return tl::sprintf ("Executive (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::A0) { return tl::sprintf ("A0 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::A1) { return tl::sprintf ("A1 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::A2) { return tl::sprintf ("A2 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::A3) { return tl::sprintf ("A3 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::A5) { return tl::sprintf ("A5 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::A6) { return tl::sprintf ("A6 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::A7) { return tl::sprintf ("A7 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::A8) { return tl::sprintf ("A8 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::A9) { return tl::sprintf ("A9 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::B0) { return tl::sprintf ("B0 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::B1) { return tl::sprintf ("B1 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::B10) { return tl::sprintf ("B10 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::B2) { return tl::sprintf ("B2 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::B3) { return tl::sprintf ("B3 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::B4) { return tl::sprintf ("B4 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::B6) { return tl::sprintf ("B6 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::B7) { return tl::sprintf ("B7 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::B8) { return tl::sprintf ("B8 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::B9) { return tl::sprintf ("B9 (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::C5E) { return tl::sprintf ("C5E (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Comm10E) { return tl::sprintf ("Comm10E (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::DLE) { return tl::sprintf ("DLE (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Folio) { return tl::sprintf ("Folio (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Ledger) { return tl::sprintf ("Ledger (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Tabloid) { return tl::sprintf ("Tabloid (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Custom) { return tl::sprintf ("Custom (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::NPageSize) { return tl::sprintf ("NPageSize (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::NPaperSize) { return tl::sprintf ("NPaperSize (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QPrinter_PageSize_Enum (const QPrinter_PageSize_Enum *e)
{
  return (unsigned int) e->value ();
}

static QPrinter_PageSize_Enum *from_i_QPrinter_PageSize_Enum (unsigned int i)
{
  return new QPrinter_PageSize_Enum ((QPrinter::PageSize) i);
}

static bool equalQPrinter_PageSize_Enum (const QPrinter_PageSize_Enum *e, QPrinter_PageSize_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QPrinter_PageSize_Enum (const QPrinter_PageSize_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QPrinter_PageSize_Enums oropQPrinter_PageSize_Enums (const QPrinter_PageSize_Enums *e, const QPrinter_PageSize_Enums &d)
{
  return e->flags () | d.flags ();
}

static QPrinter_PageSize_Enums andopQPrinter_PageSize_Enums (const QPrinter_PageSize_Enums *e, const QPrinter_PageSize_Enums &d)
{
  return e->flags () & d.flags ();
}

static QPrinter_PageSize_Enums xoropQPrinter_PageSize_Enums (const QPrinter_PageSize_Enums *e, const QPrinter_PageSize_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QPrinter_PageSize_Enums (const QPrinter_PageSize_Enums *e)
{
  std::string l;
  if (e->testFlag (QPrinter::A4)) { if (!l.empty ()) l += "|"; l += "A4"; }
  if (e->testFlag (QPrinter::B5)) { if (!l.empty ()) l += "|"; l += "B5"; }
  if (e->testFlag (QPrinter::Letter)) { if (!l.empty ()) l += "|"; l += "Letter"; }
  if (e->testFlag (QPrinter::Legal)) { if (!l.empty ()) l += "|"; l += "Legal"; }
  if (e->testFlag (QPrinter::Executive)) { if (!l.empty ()) l += "|"; l += "Executive"; }
  if (e->testFlag (QPrinter::A0)) { if (!l.empty ()) l += "|"; l += "A0"; }
  if (e->testFlag (QPrinter::A1)) { if (!l.empty ()) l += "|"; l += "A1"; }
  if (e->testFlag (QPrinter::A2)) { if (!l.empty ()) l += "|"; l += "A2"; }
  if (e->testFlag (QPrinter::A3)) { if (!l.empty ()) l += "|"; l += "A3"; }
  if (e->testFlag (QPrinter::A5)) { if (!l.empty ()) l += "|"; l += "A5"; }
  if (e->testFlag (QPrinter::A6)) { if (!l.empty ()) l += "|"; l += "A6"; }
  if (e->testFlag (QPrinter::A7)) { if (!l.empty ()) l += "|"; l += "A7"; }
  if (e->testFlag (QPrinter::A8)) { if (!l.empty ()) l += "|"; l += "A8"; }
  if (e->testFlag (QPrinter::A9)) { if (!l.empty ()) l += "|"; l += "A9"; }
  if (e->testFlag (QPrinter::B0)) { if (!l.empty ()) l += "|"; l += "B0"; }
  if (e->testFlag (QPrinter::B1)) { if (!l.empty ()) l += "|"; l += "B1"; }
  if (e->testFlag (QPrinter::B10)) { if (!l.empty ()) l += "|"; l += "B10"; }
  if (e->testFlag (QPrinter::B2)) { if (!l.empty ()) l += "|"; l += "B2"; }
  if (e->testFlag (QPrinter::B3)) { if (!l.empty ()) l += "|"; l += "B3"; }
  if (e->testFlag (QPrinter::B4)) { if (!l.empty ()) l += "|"; l += "B4"; }
  if (e->testFlag (QPrinter::B6)) { if (!l.empty ()) l += "|"; l += "B6"; }
  if (e->testFlag (QPrinter::B7)) { if (!l.empty ()) l += "|"; l += "B7"; }
  if (e->testFlag (QPrinter::B8)) { if (!l.empty ()) l += "|"; l += "B8"; }
  if (e->testFlag (QPrinter::B9)) { if (!l.empty ()) l += "|"; l += "B9"; }
  if (e->testFlag (QPrinter::C5E)) { if (!l.empty ()) l += "|"; l += "C5E"; }
  if (e->testFlag (QPrinter::Comm10E)) { if (!l.empty ()) l += "|"; l += "Comm10E"; }
  if (e->testFlag (QPrinter::DLE)) { if (!l.empty ()) l += "|"; l += "DLE"; }
  if (e->testFlag (QPrinter::Folio)) { if (!l.empty ()) l += "|"; l += "Folio"; }
  if (e->testFlag (QPrinter::Ledger)) { if (!l.empty ()) l += "|"; l += "Ledger"; }
  if (e->testFlag (QPrinter::Tabloid)) { if (!l.empty ()) l += "|"; l += "Tabloid"; }
  if (e->testFlag (QPrinter::Custom)) { if (!l.empty ()) l += "|"; l += "Custom"; }
  if (e->testFlag (QPrinter::NPageSize)) { if (!l.empty ()) l += "|"; l += "NPageSize"; }
  if (e->testFlag (QPrinter::NPaperSize)) { if (!l.empty ()) l += "|"; l += "NPaperSize"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QPrinter_PageSize_Enums (const QPrinter_PageSize_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QPrinter_PageSize_Enums (const QPrinter_PageSize_Enums *e, const QPrinter_PageSize_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QPrinter_PageSize_Enums> decl_QPrinter_PageSize_Enums ("QPrinter_QFlags_PageSize",
  gsi::method_ext ("|", &qt_gsi::oropQPrinter_PageSize_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQPrinter_PageSize_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQPrinter_PageSize_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_PageSize_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_PageSize_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QPrinter_PageSize_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QPrinter::PageSize> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QPrinter_PageSize_Enum> decl_QPrinter_PageSize_Enum (decl_QPrinter_PageSize_Enums, "QPrinter_PageSize",
  qt_gsi::mkdefs_QPrinter_PageSize () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_PageSize_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_PageSize_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQPrinter_PageSize_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QPrinter_PageSize_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QPrinter_PageSize_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QPrinter::PageSize enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QPrinter> inject_QPrinter_PageSize_Enum_in_parent (qt_gsi::mkdefs_QPrinter_PageSize ());
static gsi::ClassExt<QPrinter> decl_QPrinter_PageSize_Enum_as_child (decl_QPrinter_PageSize_Enum, "PageSize");

}


//  Implementation of the enum wrapper class for QPrinter::PaperSource
namespace qt_gsi
{

static QPrinter_PaperSource_Enum *c_1_QPrinter_PaperSource_Enum () { return new QPrinter_PaperSource_Enum (QPrinter::OnlyOne); }
static QPrinter_PaperSource_Enum *c_2_QPrinter_PaperSource_Enum () { return new QPrinter_PaperSource_Enum (QPrinter::Lower); }
static QPrinter_PaperSource_Enum *c_3_QPrinter_PaperSource_Enum () { return new QPrinter_PaperSource_Enum (QPrinter::Middle); }
static QPrinter_PaperSource_Enum *c_4_QPrinter_PaperSource_Enum () { return new QPrinter_PaperSource_Enum (QPrinter::Manual); }
static QPrinter_PaperSource_Enum *c_5_QPrinter_PaperSource_Enum () { return new QPrinter_PaperSource_Enum (QPrinter::Envelope); }
static QPrinter_PaperSource_Enum *c_6_QPrinter_PaperSource_Enum () { return new QPrinter_PaperSource_Enum (QPrinter::EnvelopeManual); }
static QPrinter_PaperSource_Enum *c_7_QPrinter_PaperSource_Enum () { return new QPrinter_PaperSource_Enum (QPrinter::Auto); }
static QPrinter_PaperSource_Enum *c_8_QPrinter_PaperSource_Enum () { return new QPrinter_PaperSource_Enum (QPrinter::Tractor); }
static QPrinter_PaperSource_Enum *c_9_QPrinter_PaperSource_Enum () { return new QPrinter_PaperSource_Enum (QPrinter::SmallFormat); }
static QPrinter_PaperSource_Enum *c_10_QPrinter_PaperSource_Enum () { return new QPrinter_PaperSource_Enum (QPrinter::LargeFormat); }
static QPrinter_PaperSource_Enum *c_11_QPrinter_PaperSource_Enum () { return new QPrinter_PaperSource_Enum (QPrinter::LargeCapacity); }
static QPrinter_PaperSource_Enum *c_12_QPrinter_PaperSource_Enum () { return new QPrinter_PaperSource_Enum (QPrinter::Cassette); }
static QPrinter_PaperSource_Enum *c_13_QPrinter_PaperSource_Enum () { return new QPrinter_PaperSource_Enum (QPrinter::FormSource); }
static QPrinter_PaperSource_Enum *c_14_QPrinter_PaperSource_Enum () { return new QPrinter_PaperSource_Enum (QPrinter::MaxPageSource); }

static gsi::Methods mkdefs_QPrinter_PaperSource () {
  return
    gsi::constant ("OnlyOne", &qt_gsi::c_1_QPrinter_PaperSource_Enum, "@brief Enum constant QPrinter::OnlyOne") +
    gsi::constant ("Lower", &qt_gsi::c_2_QPrinter_PaperSource_Enum, "@brief Enum constant QPrinter::Lower") +
    gsi::constant ("Middle", &qt_gsi::c_3_QPrinter_PaperSource_Enum, "@brief Enum constant QPrinter::Middle") +
    gsi::constant ("Manual", &qt_gsi::c_4_QPrinter_PaperSource_Enum, "@brief Enum constant QPrinter::Manual") +
    gsi::constant ("Envelope", &qt_gsi::c_5_QPrinter_PaperSource_Enum, "@brief Enum constant QPrinter::Envelope") +
    gsi::constant ("EnvelopeManual", &qt_gsi::c_6_QPrinter_PaperSource_Enum, "@brief Enum constant QPrinter::EnvelopeManual") +
    gsi::constant ("Auto", &qt_gsi::c_7_QPrinter_PaperSource_Enum, "@brief Enum constant QPrinter::Auto") +
    gsi::constant ("Tractor", &qt_gsi::c_8_QPrinter_PaperSource_Enum, "@brief Enum constant QPrinter::Tractor") +
    gsi::constant ("SmallFormat", &qt_gsi::c_9_QPrinter_PaperSource_Enum, "@brief Enum constant QPrinter::SmallFormat") +
    gsi::constant ("LargeFormat", &qt_gsi::c_10_QPrinter_PaperSource_Enum, "@brief Enum constant QPrinter::LargeFormat") +
    gsi::constant ("LargeCapacity", &qt_gsi::c_11_QPrinter_PaperSource_Enum, "@brief Enum constant QPrinter::LargeCapacity") +
    gsi::constant ("Cassette", &qt_gsi::c_12_QPrinter_PaperSource_Enum, "@brief Enum constant QPrinter::Cassette") +
    gsi::constant ("FormSource", &qt_gsi::c_13_QPrinter_PaperSource_Enum, "@brief Enum constant QPrinter::FormSource") +
    gsi::constant ("MaxPageSource", &qt_gsi::c_14_QPrinter_PaperSource_Enum, "@brief Enum constant QPrinter::MaxPageSource");
}

static std::string to_s_QPrinter_PaperSource_Enum (const QPrinter_PaperSource_Enum *e)
{
  if (e->value () == QPrinter::OnlyOne) { return tl::sprintf ("OnlyOne (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Lower) { return tl::sprintf ("Lower (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Middle) { return tl::sprintf ("Middle (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Manual) { return tl::sprintf ("Manual (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Envelope) { return tl::sprintf ("Envelope (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::EnvelopeManual) { return tl::sprintf ("EnvelopeManual (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Auto) { return tl::sprintf ("Auto (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Tractor) { return tl::sprintf ("Tractor (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::SmallFormat) { return tl::sprintf ("SmallFormat (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::LargeFormat) { return tl::sprintf ("LargeFormat (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::LargeCapacity) { return tl::sprintf ("LargeCapacity (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Cassette) { return tl::sprintf ("Cassette (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::FormSource) { return tl::sprintf ("FormSource (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::MaxPageSource) { return tl::sprintf ("MaxPageSource (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QPrinter_PaperSource_Enum (const QPrinter_PaperSource_Enum *e)
{
  return (unsigned int) e->value ();
}

static QPrinter_PaperSource_Enum *from_i_QPrinter_PaperSource_Enum (unsigned int i)
{
  return new QPrinter_PaperSource_Enum ((QPrinter::PaperSource) i);
}

static bool equalQPrinter_PaperSource_Enum (const QPrinter_PaperSource_Enum *e, QPrinter_PaperSource_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QPrinter_PaperSource_Enum (const QPrinter_PaperSource_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QPrinter_PaperSource_Enums oropQPrinter_PaperSource_Enums (const QPrinter_PaperSource_Enums *e, const QPrinter_PaperSource_Enums &d)
{
  return e->flags () | d.flags ();
}

static QPrinter_PaperSource_Enums andopQPrinter_PaperSource_Enums (const QPrinter_PaperSource_Enums *e, const QPrinter_PaperSource_Enums &d)
{
  return e->flags () & d.flags ();
}

static QPrinter_PaperSource_Enums xoropQPrinter_PaperSource_Enums (const QPrinter_PaperSource_Enums *e, const QPrinter_PaperSource_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QPrinter_PaperSource_Enums (const QPrinter_PaperSource_Enums *e)
{
  std::string l;
  if (e->testFlag (QPrinter::OnlyOne)) { if (!l.empty ()) l += "|"; l += "OnlyOne"; }
  if (e->testFlag (QPrinter::Lower)) { if (!l.empty ()) l += "|"; l += "Lower"; }
  if (e->testFlag (QPrinter::Middle)) { if (!l.empty ()) l += "|"; l += "Middle"; }
  if (e->testFlag (QPrinter::Manual)) { if (!l.empty ()) l += "|"; l += "Manual"; }
  if (e->testFlag (QPrinter::Envelope)) { if (!l.empty ()) l += "|"; l += "Envelope"; }
  if (e->testFlag (QPrinter::EnvelopeManual)) { if (!l.empty ()) l += "|"; l += "EnvelopeManual"; }
  if (e->testFlag (QPrinter::Auto)) { if (!l.empty ()) l += "|"; l += "Auto"; }
  if (e->testFlag (QPrinter::Tractor)) { if (!l.empty ()) l += "|"; l += "Tractor"; }
  if (e->testFlag (QPrinter::SmallFormat)) { if (!l.empty ()) l += "|"; l += "SmallFormat"; }
  if (e->testFlag (QPrinter::LargeFormat)) { if (!l.empty ()) l += "|"; l += "LargeFormat"; }
  if (e->testFlag (QPrinter::LargeCapacity)) { if (!l.empty ()) l += "|"; l += "LargeCapacity"; }
  if (e->testFlag (QPrinter::Cassette)) { if (!l.empty ()) l += "|"; l += "Cassette"; }
  if (e->testFlag (QPrinter::FormSource)) { if (!l.empty ()) l += "|"; l += "FormSource"; }
  if (e->testFlag (QPrinter::MaxPageSource)) { if (!l.empty ()) l += "|"; l += "MaxPageSource"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QPrinter_PaperSource_Enums (const QPrinter_PaperSource_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QPrinter_PaperSource_Enums (const QPrinter_PaperSource_Enums *e, const QPrinter_PaperSource_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QPrinter_PaperSource_Enums> decl_QPrinter_PaperSource_Enums ("QPrinter_QFlags_PaperSource",
  gsi::method_ext ("|", &qt_gsi::oropQPrinter_PaperSource_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQPrinter_PaperSource_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQPrinter_PaperSource_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_PaperSource_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_PaperSource_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QPrinter_PaperSource_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QPrinter::PaperSource> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QPrinter_PaperSource_Enum> decl_QPrinter_PaperSource_Enum (decl_QPrinter_PaperSource_Enums, "QPrinter_PaperSource",
  qt_gsi::mkdefs_QPrinter_PaperSource () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_PaperSource_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_PaperSource_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQPrinter_PaperSource_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QPrinter_PaperSource_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QPrinter_PaperSource_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QPrinter::PaperSource enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QPrinter> inject_QPrinter_PaperSource_Enum_in_parent (qt_gsi::mkdefs_QPrinter_PaperSource ());
static gsi::ClassExt<QPrinter> decl_QPrinter_PaperSource_Enum_as_child (decl_QPrinter_PaperSource_Enum, "PaperSource");

}


//  Implementation of the enum wrapper class for QPrinter::PrintRange
namespace qt_gsi
{

static QPrinter_PrintRange_Enum *c_1_QPrinter_PrintRange_Enum () { return new QPrinter_PrintRange_Enum (QPrinter::AllPages); }
static QPrinter_PrintRange_Enum *c_2_QPrinter_PrintRange_Enum () { return new QPrinter_PrintRange_Enum (QPrinter::Selection); }
static QPrinter_PrintRange_Enum *c_3_QPrinter_PrintRange_Enum () { return new QPrinter_PrintRange_Enum (QPrinter::PageRange); }

static gsi::Methods mkdefs_QPrinter_PrintRange () {
  return
    gsi::constant ("AllPages", &qt_gsi::c_1_QPrinter_PrintRange_Enum, "@brief Enum constant QPrinter::AllPages") +
    gsi::constant ("Selection", &qt_gsi::c_2_QPrinter_PrintRange_Enum, "@brief Enum constant QPrinter::Selection") +
    gsi::constant ("PageRange", &qt_gsi::c_3_QPrinter_PrintRange_Enum, "@brief Enum constant QPrinter::PageRange");
}

static std::string to_s_QPrinter_PrintRange_Enum (const QPrinter_PrintRange_Enum *e)
{
  if (e->value () == QPrinter::AllPages) { return tl::sprintf ("AllPages (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Selection) { return tl::sprintf ("Selection (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::PageRange) { return tl::sprintf ("PageRange (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QPrinter_PrintRange_Enum (const QPrinter_PrintRange_Enum *e)
{
  return (unsigned int) e->value ();
}

static QPrinter_PrintRange_Enum *from_i_QPrinter_PrintRange_Enum (unsigned int i)
{
  return new QPrinter_PrintRange_Enum ((QPrinter::PrintRange) i);
}

static bool equalQPrinter_PrintRange_Enum (const QPrinter_PrintRange_Enum *e, QPrinter_PrintRange_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QPrinter_PrintRange_Enum (const QPrinter_PrintRange_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QPrinter_PrintRange_Enums oropQPrinter_PrintRange_Enums (const QPrinter_PrintRange_Enums *e, const QPrinter_PrintRange_Enums &d)
{
  return e->flags () | d.flags ();
}

static QPrinter_PrintRange_Enums andopQPrinter_PrintRange_Enums (const QPrinter_PrintRange_Enums *e, const QPrinter_PrintRange_Enums &d)
{
  return e->flags () & d.flags ();
}

static QPrinter_PrintRange_Enums xoropQPrinter_PrintRange_Enums (const QPrinter_PrintRange_Enums *e, const QPrinter_PrintRange_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QPrinter_PrintRange_Enums (const QPrinter_PrintRange_Enums *e)
{
  std::string l;
  if (e->testFlag (QPrinter::AllPages)) { if (!l.empty ()) l += "|"; l += "AllPages"; }
  if (e->testFlag (QPrinter::Selection)) { if (!l.empty ()) l += "|"; l += "Selection"; }
  if (e->testFlag (QPrinter::PageRange)) { if (!l.empty ()) l += "|"; l += "PageRange"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QPrinter_PrintRange_Enums (const QPrinter_PrintRange_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QPrinter_PrintRange_Enums (const QPrinter_PrintRange_Enums *e, const QPrinter_PrintRange_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QPrinter_PrintRange_Enums> decl_QPrinter_PrintRange_Enums ("QPrinter_QFlags_PrintRange",
  gsi::method_ext ("|", &qt_gsi::oropQPrinter_PrintRange_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQPrinter_PrintRange_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQPrinter_PrintRange_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_PrintRange_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_PrintRange_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QPrinter_PrintRange_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QPrinter::PrintRange> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QPrinter_PrintRange_Enum> decl_QPrinter_PrintRange_Enum (decl_QPrinter_PrintRange_Enums, "QPrinter_PrintRange",
  qt_gsi::mkdefs_QPrinter_PrintRange () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_PrintRange_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_PrintRange_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQPrinter_PrintRange_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QPrinter_PrintRange_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QPrinter_PrintRange_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QPrinter::PrintRange enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QPrinter> inject_QPrinter_PrintRange_Enum_in_parent (qt_gsi::mkdefs_QPrinter_PrintRange ());
static gsi::ClassExt<QPrinter> decl_QPrinter_PrintRange_Enum_as_child (decl_QPrinter_PrintRange_Enum, "PrintRange");

}


//  Implementation of the enum wrapper class for QPrinter::PrinterMode
namespace qt_gsi
{

static QPrinter_PrinterMode_Enum *c_1_QPrinter_PrinterMode_Enum () { return new QPrinter_PrinterMode_Enum (QPrinter::ScreenResolution); }
static QPrinter_PrinterMode_Enum *c_2_QPrinter_PrinterMode_Enum () { return new QPrinter_PrinterMode_Enum (QPrinter::PrinterResolution); }
static QPrinter_PrinterMode_Enum *c_3_QPrinter_PrinterMode_Enum () { return new QPrinter_PrinterMode_Enum (QPrinter::HighResolution); }

static gsi::Methods mkdefs_QPrinter_PrinterMode () {
  return
    gsi::constant ("ScreenResolution", &qt_gsi::c_1_QPrinter_PrinterMode_Enum, "@brief Enum constant QPrinter::ScreenResolution") +
    gsi::constant ("PrinterResolution", &qt_gsi::c_2_QPrinter_PrinterMode_Enum, "@brief Enum constant QPrinter::PrinterResolution") +
    gsi::constant ("HighResolution", &qt_gsi::c_3_QPrinter_PrinterMode_Enum, "@brief Enum constant QPrinter::HighResolution");
}

static std::string to_s_QPrinter_PrinterMode_Enum (const QPrinter_PrinterMode_Enum *e)
{
  if (e->value () == QPrinter::ScreenResolution) { return tl::sprintf ("ScreenResolution (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::PrinterResolution) { return tl::sprintf ("PrinterResolution (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::HighResolution) { return tl::sprintf ("HighResolution (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QPrinter_PrinterMode_Enum (const QPrinter_PrinterMode_Enum *e)
{
  return (unsigned int) e->value ();
}

static QPrinter_PrinterMode_Enum *from_i_QPrinter_PrinterMode_Enum (unsigned int i)
{
  return new QPrinter_PrinterMode_Enum ((QPrinter::PrinterMode) i);
}

static bool equalQPrinter_PrinterMode_Enum (const QPrinter_PrinterMode_Enum *e, QPrinter_PrinterMode_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QPrinter_PrinterMode_Enum (const QPrinter_PrinterMode_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QPrinter_PrinterMode_Enums oropQPrinter_PrinterMode_Enums (const QPrinter_PrinterMode_Enums *e, const QPrinter_PrinterMode_Enums &d)
{
  return e->flags () | d.flags ();
}

static QPrinter_PrinterMode_Enums andopQPrinter_PrinterMode_Enums (const QPrinter_PrinterMode_Enums *e, const QPrinter_PrinterMode_Enums &d)
{
  return e->flags () & d.flags ();
}

static QPrinter_PrinterMode_Enums xoropQPrinter_PrinterMode_Enums (const QPrinter_PrinterMode_Enums *e, const QPrinter_PrinterMode_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QPrinter_PrinterMode_Enums (const QPrinter_PrinterMode_Enums *e)
{
  std::string l;
  if (e->testFlag (QPrinter::ScreenResolution)) { if (!l.empty ()) l += "|"; l += "ScreenResolution"; }
  if (e->testFlag (QPrinter::PrinterResolution)) { if (!l.empty ()) l += "|"; l += "PrinterResolution"; }
  if (e->testFlag (QPrinter::HighResolution)) { if (!l.empty ()) l += "|"; l += "HighResolution"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QPrinter_PrinterMode_Enums (const QPrinter_PrinterMode_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QPrinter_PrinterMode_Enums (const QPrinter_PrinterMode_Enums *e, const QPrinter_PrinterMode_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QPrinter_PrinterMode_Enums> decl_QPrinter_PrinterMode_Enums ("QPrinter_QFlags_PrinterMode",
  gsi::method_ext ("|", &qt_gsi::oropQPrinter_PrinterMode_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQPrinter_PrinterMode_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQPrinter_PrinterMode_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_PrinterMode_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_PrinterMode_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QPrinter_PrinterMode_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QPrinter::PrinterMode> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QPrinter_PrinterMode_Enum> decl_QPrinter_PrinterMode_Enum (decl_QPrinter_PrinterMode_Enums, "QPrinter_PrinterMode",
  qt_gsi::mkdefs_QPrinter_PrinterMode () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_PrinterMode_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_PrinterMode_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQPrinter_PrinterMode_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QPrinter_PrinterMode_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QPrinter_PrinterMode_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QPrinter::PrinterMode enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QPrinter> inject_QPrinter_PrinterMode_Enum_in_parent (qt_gsi::mkdefs_QPrinter_PrinterMode ());
static gsi::ClassExt<QPrinter> decl_QPrinter_PrinterMode_Enum_as_child (decl_QPrinter_PrinterMode_Enum, "PrinterMode");

}


//  Implementation of the enum wrapper class for QPrinter::PrinterState
namespace qt_gsi
{

static QPrinter_PrinterState_Enum *c_1_QPrinter_PrinterState_Enum () { return new QPrinter_PrinterState_Enum (QPrinter::Idle); }
static QPrinter_PrinterState_Enum *c_2_QPrinter_PrinterState_Enum () { return new QPrinter_PrinterState_Enum (QPrinter::Active); }
static QPrinter_PrinterState_Enum *c_3_QPrinter_PrinterState_Enum () { return new QPrinter_PrinterState_Enum (QPrinter::Aborted); }
static QPrinter_PrinterState_Enum *c_4_QPrinter_PrinterState_Enum () { return new QPrinter_PrinterState_Enum (QPrinter::Error); }

static gsi::Methods mkdefs_QPrinter_PrinterState () {
  return
    gsi::constant ("Idle", &qt_gsi::c_1_QPrinter_PrinterState_Enum, "@brief Enum constant QPrinter::Idle") +
    gsi::constant ("Active", &qt_gsi::c_2_QPrinter_PrinterState_Enum, "@brief Enum constant QPrinter::Active") +
    gsi::constant ("Aborted", &qt_gsi::c_3_QPrinter_PrinterState_Enum, "@brief Enum constant QPrinter::Aborted") +
    gsi::constant ("Error", &qt_gsi::c_4_QPrinter_PrinterState_Enum, "@brief Enum constant QPrinter::Error");
}

static std::string to_s_QPrinter_PrinterState_Enum (const QPrinter_PrinterState_Enum *e)
{
  if (e->value () == QPrinter::Idle) { return tl::sprintf ("Idle (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Active) { return tl::sprintf ("Active (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Aborted) { return tl::sprintf ("Aborted (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Error) { return tl::sprintf ("Error (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QPrinter_PrinterState_Enum (const QPrinter_PrinterState_Enum *e)
{
  return (unsigned int) e->value ();
}

static QPrinter_PrinterState_Enum *from_i_QPrinter_PrinterState_Enum (unsigned int i)
{
  return new QPrinter_PrinterState_Enum ((QPrinter::PrinterState) i);
}

static bool equalQPrinter_PrinterState_Enum (const QPrinter_PrinterState_Enum *e, QPrinter_PrinterState_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QPrinter_PrinterState_Enum (const QPrinter_PrinterState_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QPrinter_PrinterState_Enums oropQPrinter_PrinterState_Enums (const QPrinter_PrinterState_Enums *e, const QPrinter_PrinterState_Enums &d)
{
  return e->flags () | d.flags ();
}

static QPrinter_PrinterState_Enums andopQPrinter_PrinterState_Enums (const QPrinter_PrinterState_Enums *e, const QPrinter_PrinterState_Enums &d)
{
  return e->flags () & d.flags ();
}

static QPrinter_PrinterState_Enums xoropQPrinter_PrinterState_Enums (const QPrinter_PrinterState_Enums *e, const QPrinter_PrinterState_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QPrinter_PrinterState_Enums (const QPrinter_PrinterState_Enums *e)
{
  std::string l;
  if (e->testFlag (QPrinter::Idle)) { if (!l.empty ()) l += "|"; l += "Idle"; }
  if (e->testFlag (QPrinter::Active)) { if (!l.empty ()) l += "|"; l += "Active"; }
  if (e->testFlag (QPrinter::Aborted)) { if (!l.empty ()) l += "|"; l += "Aborted"; }
  if (e->testFlag (QPrinter::Error)) { if (!l.empty ()) l += "|"; l += "Error"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QPrinter_PrinterState_Enums (const QPrinter_PrinterState_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QPrinter_PrinterState_Enums (const QPrinter_PrinterState_Enums *e, const QPrinter_PrinterState_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QPrinter_PrinterState_Enums> decl_QPrinter_PrinterState_Enums ("QPrinter_QFlags_PrinterState",
  gsi::method_ext ("|", &qt_gsi::oropQPrinter_PrinterState_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQPrinter_PrinterState_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQPrinter_PrinterState_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_PrinterState_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_PrinterState_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QPrinter_PrinterState_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QPrinter::PrinterState> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QPrinter_PrinterState_Enum> decl_QPrinter_PrinterState_Enum (decl_QPrinter_PrinterState_Enums, "QPrinter_PrinterState",
  qt_gsi::mkdefs_QPrinter_PrinterState () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_PrinterState_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_PrinterState_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQPrinter_PrinterState_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QPrinter_PrinterState_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QPrinter_PrinterState_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QPrinter::PrinterState enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QPrinter> inject_QPrinter_PrinterState_Enum_in_parent (qt_gsi::mkdefs_QPrinter_PrinterState ());
static gsi::ClassExt<QPrinter> decl_QPrinter_PrinterState_Enum_as_child (decl_QPrinter_PrinterState_Enum, "PrinterState");

}


//  Implementation of the enum wrapper class for QPrinter::Unit
namespace qt_gsi
{

static QPrinter_Unit_Enum *c_1_QPrinter_Unit_Enum () { return new QPrinter_Unit_Enum (QPrinter::Millimeter); }
static QPrinter_Unit_Enum *c_2_QPrinter_Unit_Enum () { return new QPrinter_Unit_Enum (QPrinter::Point); }
static QPrinter_Unit_Enum *c_3_QPrinter_Unit_Enum () { return new QPrinter_Unit_Enum (QPrinter::Inch); }
static QPrinter_Unit_Enum *c_4_QPrinter_Unit_Enum () { return new QPrinter_Unit_Enum (QPrinter::Pica); }
static QPrinter_Unit_Enum *c_5_QPrinter_Unit_Enum () { return new QPrinter_Unit_Enum (QPrinter::Didot); }
static QPrinter_Unit_Enum *c_6_QPrinter_Unit_Enum () { return new QPrinter_Unit_Enum (QPrinter::Cicero); }
static QPrinter_Unit_Enum *c_7_QPrinter_Unit_Enum () { return new QPrinter_Unit_Enum (QPrinter::DevicePixel); }

static gsi::Methods mkdefs_QPrinter_Unit () {
  return
    gsi::constant ("Millimeter", &qt_gsi::c_1_QPrinter_Unit_Enum, "@brief Enum constant QPrinter::Millimeter") +
    gsi::constant ("Point", &qt_gsi::c_2_QPrinter_Unit_Enum, "@brief Enum constant QPrinter::Point") +
    gsi::constant ("Inch", &qt_gsi::c_3_QPrinter_Unit_Enum, "@brief Enum constant QPrinter::Inch") +
    gsi::constant ("Pica", &qt_gsi::c_4_QPrinter_Unit_Enum, "@brief Enum constant QPrinter::Pica") +
    gsi::constant ("Didot", &qt_gsi::c_5_QPrinter_Unit_Enum, "@brief Enum constant QPrinter::Didot") +
    gsi::constant ("Cicero", &qt_gsi::c_6_QPrinter_Unit_Enum, "@brief Enum constant QPrinter::Cicero") +
    gsi::constant ("DevicePixel", &qt_gsi::c_7_QPrinter_Unit_Enum, "@brief Enum constant QPrinter::DevicePixel");
}

static std::string to_s_QPrinter_Unit_Enum (const QPrinter_Unit_Enum *e)
{
  if (e->value () == QPrinter::Millimeter) { return tl::sprintf ("Millimeter (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Point) { return tl::sprintf ("Point (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Inch) { return tl::sprintf ("Inch (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Pica) { return tl::sprintf ("Pica (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Didot) { return tl::sprintf ("Didot (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::Cicero) { return tl::sprintf ("Cicero (%u)", (unsigned int) e->value ()); }
  if (e->value () == QPrinter::DevicePixel) { return tl::sprintf ("DevicePixel (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QPrinter_Unit_Enum (const QPrinter_Unit_Enum *e)
{
  return (unsigned int) e->value ();
}

static QPrinter_Unit_Enum *from_i_QPrinter_Unit_Enum (unsigned int i)
{
  return new QPrinter_Unit_Enum ((QPrinter::Unit) i);
}

static bool equalQPrinter_Unit_Enum (const QPrinter_Unit_Enum *e, QPrinter_Unit_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QPrinter_Unit_Enum (const QPrinter_Unit_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QPrinter_Unit_Enums oropQPrinter_Unit_Enums (const QPrinter_Unit_Enums *e, const QPrinter_Unit_Enums &d)
{
  return e->flags () | d.flags ();
}

static QPrinter_Unit_Enums andopQPrinter_Unit_Enums (const QPrinter_Unit_Enums *e, const QPrinter_Unit_Enums &d)
{
  return e->flags () & d.flags ();
}

static QPrinter_Unit_Enums xoropQPrinter_Unit_Enums (const QPrinter_Unit_Enums *e, const QPrinter_Unit_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QPrinter_Unit_Enums (const QPrinter_Unit_Enums *e)
{
  std::string l;
  if (e->testFlag (QPrinter::Millimeter)) { if (!l.empty ()) l += "|"; l += "Millimeter"; }
  if (e->testFlag (QPrinter::Point)) { if (!l.empty ()) l += "|"; l += "Point"; }
  if (e->testFlag (QPrinter::Inch)) { if (!l.empty ()) l += "|"; l += "Inch"; }
  if (e->testFlag (QPrinter::Pica)) { if (!l.empty ()) l += "|"; l += "Pica"; }
  if (e->testFlag (QPrinter::Didot)) { if (!l.empty ()) l += "|"; l += "Didot"; }
  if (e->testFlag (QPrinter::Cicero)) { if (!l.empty ()) l += "|"; l += "Cicero"; }
  if (e->testFlag (QPrinter::DevicePixel)) { if (!l.empty ()) l += "|"; l += "DevicePixel"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QPrinter_Unit_Enums (const QPrinter_Unit_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QPrinter_Unit_Enums (const QPrinter_Unit_Enums *e, const QPrinter_Unit_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QPrinter_Unit_Enums> decl_QPrinter_Unit_Enums ("QPrinter_QFlags_Unit",
  gsi::method_ext ("|", &qt_gsi::oropQPrinter_Unit_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQPrinter_Unit_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQPrinter_Unit_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_Unit_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_Unit_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QPrinter_Unit_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QPrinter::Unit> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QPrinter_Unit_Enum> decl_QPrinter_Unit_Enum (decl_QPrinter_Unit_Enums, "QPrinter_Unit",
  qt_gsi::mkdefs_QPrinter_Unit () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QPrinter_Unit_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QPrinter_Unit_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQPrinter_Unit_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QPrinter_Unit_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QPrinter_Unit_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QPrinter::Unit enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QPrinter> inject_QPrinter_Unit_Enum_in_parent (qt_gsi::mkdefs_QPrinter_Unit ());
static gsi::ClassExt<QPrinter> decl_QPrinter_Unit_Enum_as_child (decl_QPrinter_Unit_Enum, "Unit");

}

