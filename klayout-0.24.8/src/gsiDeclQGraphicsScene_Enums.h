
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQGraphicsScene_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQGraphicsScene_Enums
#define _HDR_gsiDeclQGraphicsScene_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QGraphicsScene::ItemIndexMethod>
class QGraphicsScene_ItemIndexMethod_Enums : public QFlags<enum QGraphicsScene::ItemIndexMethod> {
public:
  QGraphicsScene_ItemIndexMethod_Enums () : m_flags () { }
  QGraphicsScene_ItemIndexMethod_Enums (enum QGraphicsScene::ItemIndexMethod v) : m_flags (v) { }
  QGraphicsScene_ItemIndexMethod_Enums (const QFlags<enum QGraphicsScene::ItemIndexMethod> &v) : m_flags (v) { }
  QFlags<enum QGraphicsScene::ItemIndexMethod> flags () const { return m_flags; }
private:
  QFlags<QGraphicsScene::ItemIndexMethod> m_flags;
};

//  Wrapper class for enum QGraphicsScene::ItemIndexMethod
class QGraphicsScene_ItemIndexMethod_Enum : public QGraphicsScene_ItemIndexMethod_Enums {
public:
  QGraphicsScene_ItemIndexMethod_Enum () { }
  QGraphicsScene_ItemIndexMethod_Enum (enum QGraphicsScene::ItemIndexMethod v) : QGraphicsScene_ItemIndexMethod_Enums (v) { }
  enum QGraphicsScene::ItemIndexMethod value () const { return (enum QGraphicsScene::ItemIndexMethod) flags ().operator int (); }
};

//  Converter for QFlags<enum QGraphicsScene::ItemIndexMethod>
template <>
struct Converter<QFlags<enum QGraphicsScene::ItemIndexMethod> >
{
public:
  typedef QFlags<enum QGraphicsScene::ItemIndexMethod> source_type;
  typedef QGraphicsScene_ItemIndexMethod_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QGraphicsScene::ItemIndexMethod
template <>
struct Converter<enum QGraphicsScene::ItemIndexMethod>
{
public:
  typedef enum QGraphicsScene::ItemIndexMethod source_type;
  typedef QGraphicsScene_ItemIndexMethod_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QGraphicsScene::SceneLayer>
class QGraphicsScene_SceneLayer_Enums : public QFlags<enum QGraphicsScene::SceneLayer> {
public:
  QGraphicsScene_SceneLayer_Enums () : m_flags () { }
  QGraphicsScene_SceneLayer_Enums (enum QGraphicsScene::SceneLayer v) : m_flags (v) { }
  QGraphicsScene_SceneLayer_Enums (const QFlags<enum QGraphicsScene::SceneLayer> &v) : m_flags (v) { }
  QFlags<enum QGraphicsScene::SceneLayer> flags () const { return m_flags; }
private:
  QFlags<QGraphicsScene::SceneLayer> m_flags;
};

//  Wrapper class for enum QGraphicsScene::SceneLayer
class QGraphicsScene_SceneLayer_Enum : public QGraphicsScene_SceneLayer_Enums {
public:
  QGraphicsScene_SceneLayer_Enum () { }
  QGraphicsScene_SceneLayer_Enum (enum QGraphicsScene::SceneLayer v) : QGraphicsScene_SceneLayer_Enums (v) { }
  enum QGraphicsScene::SceneLayer value () const { return (enum QGraphicsScene::SceneLayer) flags ().operator int (); }
};

//  Converter for QFlags<enum QGraphicsScene::SceneLayer>
template <>
struct Converter<QFlags<enum QGraphicsScene::SceneLayer> >
{
public:
  typedef QFlags<enum QGraphicsScene::SceneLayer> source_type;
  typedef QGraphicsScene_SceneLayer_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QGraphicsScene::SceneLayer
template <>
struct Converter<enum QGraphicsScene::SceneLayer>
{
public:
  typedef enum QGraphicsScene::SceneLayer source_type;
  typedef QGraphicsScene_SceneLayer_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::AspectRatioMode>
class Qt_AspectRatioMode_Enums : public QFlags<enum Qt::AspectRatioMode> {
public:
  Qt_AspectRatioMode_Enums () : m_flags () { }
  Qt_AspectRatioMode_Enums (enum Qt::AspectRatioMode v) : m_flags (v) { }
  Qt_AspectRatioMode_Enums (const QFlags<enum Qt::AspectRatioMode> &v) : m_flags (v) { }
  QFlags<enum Qt::AspectRatioMode> flags () const { return m_flags; }
private:
  QFlags<Qt::AspectRatioMode> m_flags;
};

//  Wrapper class for enum Qt::AspectRatioMode
class Qt_AspectRatioMode_Enum : public Qt_AspectRatioMode_Enums {
public:
  Qt_AspectRatioMode_Enum () { }
  Qt_AspectRatioMode_Enum (enum Qt::AspectRatioMode v) : Qt_AspectRatioMode_Enums (v) { }
  enum Qt::AspectRatioMode value () const { return (enum Qt::AspectRatioMode) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::AspectRatioMode>
template <>
struct Converter<QFlags<enum Qt::AspectRatioMode> >
{
public:
  typedef QFlags<enum Qt::AspectRatioMode> source_type;
  typedef Qt_AspectRatioMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::AspectRatioMode
template <>
struct Converter<enum Qt::AspectRatioMode>
{
public:
  typedef enum Qt::AspectRatioMode source_type;
  typedef Qt_AspectRatioMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ConnectionType>
class Qt_ConnectionType_Enums : public QFlags<enum Qt::ConnectionType> {
public:
  Qt_ConnectionType_Enums () : m_flags () { }
  Qt_ConnectionType_Enums (enum Qt::ConnectionType v) : m_flags (v) { }
  Qt_ConnectionType_Enums (const QFlags<enum Qt::ConnectionType> &v) : m_flags (v) { }
  QFlags<enum Qt::ConnectionType> flags () const { return m_flags; }
private:
  QFlags<Qt::ConnectionType> m_flags;
};

//  Wrapper class for enum Qt::ConnectionType
class Qt_ConnectionType_Enum : public Qt_ConnectionType_Enums {
public:
  Qt_ConnectionType_Enum () { }
  Qt_ConnectionType_Enum (enum Qt::ConnectionType v) : Qt_ConnectionType_Enums (v) { }
  enum Qt::ConnectionType value () const { return (enum Qt::ConnectionType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ConnectionType>
template <>
struct Converter<QFlags<enum Qt::ConnectionType> >
{
public:
  typedef QFlags<enum Qt::ConnectionType> source_type;
  typedef Qt_ConnectionType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ConnectionType
template <>
struct Converter<enum Qt::ConnectionType>
{
public:
  typedef enum Qt::ConnectionType source_type;
  typedef Qt_ConnectionType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::FocusReason>
class Qt_FocusReason_Enums : public QFlags<enum Qt::FocusReason> {
public:
  Qt_FocusReason_Enums () : m_flags () { }
  Qt_FocusReason_Enums (enum Qt::FocusReason v) : m_flags (v) { }
  Qt_FocusReason_Enums (const QFlags<enum Qt::FocusReason> &v) : m_flags (v) { }
  QFlags<enum Qt::FocusReason> flags () const { return m_flags; }
private:
  QFlags<Qt::FocusReason> m_flags;
};

//  Wrapper class for enum Qt::FocusReason
class Qt_FocusReason_Enum : public Qt_FocusReason_Enums {
public:
  Qt_FocusReason_Enum () { }
  Qt_FocusReason_Enum (enum Qt::FocusReason v) : Qt_FocusReason_Enums (v) { }
  enum Qt::FocusReason value () const { return (enum Qt::FocusReason) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::FocusReason>
template <>
struct Converter<QFlags<enum Qt::FocusReason> >
{
public:
  typedef QFlags<enum Qt::FocusReason> source_type;
  typedef Qt_FocusReason_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::FocusReason
template <>
struct Converter<enum Qt::FocusReason>
{
public:
  typedef enum Qt::FocusReason source_type;
  typedef Qt_FocusReason_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::InputMethodQuery>
class Qt_InputMethodQuery_Enums : public QFlags<enum Qt::InputMethodQuery> {
public:
  Qt_InputMethodQuery_Enums () : m_flags () { }
  Qt_InputMethodQuery_Enums (enum Qt::InputMethodQuery v) : m_flags (v) { }
  Qt_InputMethodQuery_Enums (const QFlags<enum Qt::InputMethodQuery> &v) : m_flags (v) { }
  QFlags<enum Qt::InputMethodQuery> flags () const { return m_flags; }
private:
  QFlags<Qt::InputMethodQuery> m_flags;
};

//  Wrapper class for enum Qt::InputMethodQuery
class Qt_InputMethodQuery_Enum : public Qt_InputMethodQuery_Enums {
public:
  Qt_InputMethodQuery_Enum () { }
  Qt_InputMethodQuery_Enum (enum Qt::InputMethodQuery v) : Qt_InputMethodQuery_Enums (v) { }
  enum Qt::InputMethodQuery value () const { return (enum Qt::InputMethodQuery) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::InputMethodQuery>
template <>
struct Converter<QFlags<enum Qt::InputMethodQuery> >
{
public:
  typedef QFlags<enum Qt::InputMethodQuery> source_type;
  typedef Qt_InputMethodQuery_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::InputMethodQuery
template <>
struct Converter<enum Qt::InputMethodQuery>
{
public:
  typedef enum Qt::InputMethodQuery source_type;
  typedef Qt_InputMethodQuery_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ItemSelectionMode>
class Qt_ItemSelectionMode_Enums : public QFlags<enum Qt::ItemSelectionMode> {
public:
  Qt_ItemSelectionMode_Enums () : m_flags () { }
  Qt_ItemSelectionMode_Enums (enum Qt::ItemSelectionMode v) : m_flags (v) { }
  Qt_ItemSelectionMode_Enums (const QFlags<enum Qt::ItemSelectionMode> &v) : m_flags (v) { }
  QFlags<enum Qt::ItemSelectionMode> flags () const { return m_flags; }
private:
  QFlags<Qt::ItemSelectionMode> m_flags;
};

//  Wrapper class for enum Qt::ItemSelectionMode
class Qt_ItemSelectionMode_Enum : public Qt_ItemSelectionMode_Enums {
public:
  Qt_ItemSelectionMode_Enum () { }
  Qt_ItemSelectionMode_Enum (enum Qt::ItemSelectionMode v) : Qt_ItemSelectionMode_Enums (v) { }
  enum Qt::ItemSelectionMode value () const { return (enum Qt::ItemSelectionMode) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ItemSelectionMode>
template <>
struct Converter<QFlags<enum Qt::ItemSelectionMode> >
{
public:
  typedef QFlags<enum Qt::ItemSelectionMode> source_type;
  typedef Qt_ItemSelectionMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ItemSelectionMode
template <>
struct Converter<enum Qt::ItemSelectionMode>
{
public:
  typedef enum Qt::ItemSelectionMode source_type;
  typedef Qt_ItemSelectionMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::SortOrder>
class Qt_SortOrder_Enums : public QFlags<enum Qt::SortOrder> {
public:
  Qt_SortOrder_Enums () : m_flags () { }
  Qt_SortOrder_Enums (enum Qt::SortOrder v) : m_flags (v) { }
  Qt_SortOrder_Enums (const QFlags<enum Qt::SortOrder> &v) : m_flags (v) { }
  QFlags<enum Qt::SortOrder> flags () const { return m_flags; }
private:
  QFlags<Qt::SortOrder> m_flags;
};

//  Wrapper class for enum Qt::SortOrder
class Qt_SortOrder_Enum : public Qt_SortOrder_Enums {
public:
  Qt_SortOrder_Enum () { }
  Qt_SortOrder_Enum (enum Qt::SortOrder v) : Qt_SortOrder_Enums (v) { }
  enum Qt::SortOrder value () const { return (enum Qt::SortOrder) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::SortOrder>
template <>
struct Converter<QFlags<enum Qt::SortOrder> >
{
public:
  typedef QFlags<enum Qt::SortOrder> source_type;
  typedef Qt_SortOrder_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::SortOrder
template <>
struct Converter<enum Qt::SortOrder>
{
public:
  typedef enum Qt::SortOrder source_type;
  typedef Qt_SortOrder_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::WindowType>
class Qt_WindowType_Enums : public QFlags<enum Qt::WindowType> {
public:
  Qt_WindowType_Enums () : m_flags () { }
  Qt_WindowType_Enums (enum Qt::WindowType v) : m_flags (v) { }
  Qt_WindowType_Enums (const QFlags<enum Qt::WindowType> &v) : m_flags (v) { }
  QFlags<enum Qt::WindowType> flags () const { return m_flags; }
private:
  QFlags<Qt::WindowType> m_flags;
};

//  Wrapper class for enum Qt::WindowType
class Qt_WindowType_Enum : public Qt_WindowType_Enums {
public:
  Qt_WindowType_Enum () { }
  Qt_WindowType_Enum (enum Qt::WindowType v) : Qt_WindowType_Enums (v) { }
  enum Qt::WindowType value () const { return (enum Qt::WindowType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::WindowType>
template <>
struct Converter<QFlags<enum Qt::WindowType> >
{
public:
  typedef QFlags<enum Qt::WindowType> source_type;
  typedef Qt_WindowType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::WindowType
template <>
struct Converter<enum Qt::WindowType>
{
public:
  typedef enum Qt::WindowType source_type;
  typedef Qt_WindowType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
