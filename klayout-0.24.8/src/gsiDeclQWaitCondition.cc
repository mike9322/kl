
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQWaitCondition.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtCore.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQWaitCondition_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QWaitCondition

//  Constructor QWaitCondition::QWaitCondition()


static void _init_ctor_QWaitCondition_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QWaitCondition *> ();
}

static void _call_ctor_QWaitCondition_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QWaitCondition *> (new QWaitCondition ());
}

static qt_gsi::GenericStaticMethod *_create_ctor_QWaitCondition_0 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QWaitCondition::QWaitCondition()\nThis method creates an object of class QWaitCondition.", &_init_ctor_QWaitCondition_0, &_call_ctor_QWaitCondition_0);
}

// bool QWaitCondition::wait(QMutex *mutex, unsigned long int time)


static void _init_f_wait_3474 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("mutex");
  decl->add_arg<QMutex * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("time", true, "ULONG_MAX");
  decl->add_arg<unsigned long int > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_wait_3474 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QMutex *arg1 = args.read<QMutex * > ();
  unsigned long int arg2 = args ? args.read<unsigned long int > () : (unsigned long int)(ULONG_MAX);
  ret.write<bool > ((bool)((QWaitCondition *)cls)->wait (arg1, arg2));
}

static qt_gsi::GenericMethod *_create_f_wait_3474 ()
{
  return new qt_gsi::GenericMethod ("wait", "@brief Method bool QWaitCondition::wait(QMutex *mutex, unsigned long int time)\n", false, &_init_f_wait_3474, &_call_f_wait_3474);
}

// bool QWaitCondition::wait(QReadWriteLock *readWriteLock, unsigned long int time)


static void _init_f_wait_4239 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("readWriteLock");
  decl->add_arg<QReadWriteLock * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("time", true, "ULONG_MAX");
  decl->add_arg<unsigned long int > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_wait_4239 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QReadWriteLock *arg1 = args.read<QReadWriteLock * > ();
  unsigned long int arg2 = args ? args.read<unsigned long int > () : (unsigned long int)(ULONG_MAX);
  ret.write<bool > ((bool)((QWaitCondition *)cls)->wait (arg1, arg2));
}

static qt_gsi::GenericMethod *_create_f_wait_4239 ()
{
  return new qt_gsi::GenericMethod ("wait", "@brief Method bool QWaitCondition::wait(QReadWriteLock *readWriteLock, unsigned long int time)\n", false, &_init_f_wait_4239, &_call_f_wait_4239);
}

// void QWaitCondition::wakeAll()


static void _init_f_wakeAll_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_wakeAll_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QWaitCondition *)cls)->wakeAll ();
}

static qt_gsi::GenericMethod *_create_f_wakeAll_0 ()
{
  return new qt_gsi::GenericMethod ("wakeAll", "@brief Method void QWaitCondition::wakeAll()\n", false, &_init_f_wakeAll_0, &_call_f_wakeAll_0);
}

// void QWaitCondition::wakeOne()


static void _init_f_wakeOne_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_wakeOne_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QWaitCondition *)cls)->wakeOne ();
}

static qt_gsi::GenericMethod *_create_f_wakeOne_0 ()
{
  return new qt_gsi::GenericMethod ("wakeOne", "@brief Method void QWaitCondition::wakeOne()\n", false, &_init_f_wakeOne_0, &_call_f_wakeOne_0);
}


namespace gsi
{
gsi::Class<QWaitCondition> decl_QWaitCondition ("QWaitCondition",
  gsi::Methods(_create_ctor_QWaitCondition_0 ()) +
  gsi::Methods(_create_f_wait_3474 ()) +
  gsi::Methods(_create_f_wait_4239 ()) +
  gsi::Methods(_create_f_wakeAll_0 ()) +
  gsi::Methods(_create_f_wakeOne_0 ()),
  "@qt\n@brief Binding of QWaitCondition");

}

