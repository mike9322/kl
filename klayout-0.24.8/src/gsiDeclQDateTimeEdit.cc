
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQDateTimeEdit.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQDateTimeEdit_EventAdaptor.h"
#include "gsiDeclQDateTimeEdit_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QDateTimeEdit

//  get static meta object

static void _init_smo (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<const QMetaObject &> ();
}

static void _call_smo (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<const QMetaObject &> (QDateTimeEdit::staticMetaObject);
}

static qt_gsi::GenericStaticMethod *_create_smo ()
{
  return new qt_gsi::GenericStaticMethod ("staticMetaObject", "@brief Obtains the static MetaObject for this class.", &_init_smo, &_call_smo);
}

// bool QDateTimeEdit::calendarPopup()


static void _init_f_calendarPopup_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_calendarPopup_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QDateTimeEdit *)cls)->calendarPopup ());
}

static qt_gsi::GenericMethod *_create_f_calendarPopup_c0 ()
{
  return new qt_gsi::GenericMethod (":calendarPopup", "@brief Method bool QDateTimeEdit::calendarPopup()\n", true, &_init_f_calendarPopup_c0, &_call_f_calendarPopup_c0);
}

// QCalendarWidget *QDateTimeEdit::calendarWidget()


static void _init_f_calendarWidget_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QCalendarWidget * > ();
}

static void _call_f_calendarWidget_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QCalendarWidget * > ((QCalendarWidget *)((QDateTimeEdit *)cls)->calendarWidget ());
}

static qt_gsi::GenericMethod *_create_f_calendarWidget_c0 ()
{
  return new qt_gsi::GenericMethod (":calendarWidget", "@brief Method QCalendarWidget *QDateTimeEdit::calendarWidget()\n", true, &_init_f_calendarWidget_c0, &_call_f_calendarWidget_c0);
}

// void QDateTimeEdit::clear()


static void _init_f_clear_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_clear_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QDateTimeEdit *)cls)->clear ();
}

static qt_gsi::GenericMethod *_create_f_clear_0 ()
{
  return new qt_gsi::GenericMethod ("clear", "@brief Method void QDateTimeEdit::clear()\nThis is a reimplementation of QAbstractSpinBox::clear", false, &_init_f_clear_0, &_call_f_clear_0);
}

// void QDateTimeEdit::clearMaximumDate()


static void _init_f_clearMaximumDate_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_clearMaximumDate_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QDateTimeEdit *)cls)->clearMaximumDate ();
}

static qt_gsi::GenericMethod *_create_f_clearMaximumDate_0 ()
{
  return new qt_gsi::GenericMethod ("clearMaximumDate", "@brief Method void QDateTimeEdit::clearMaximumDate()\n", false, &_init_f_clearMaximumDate_0, &_call_f_clearMaximumDate_0);
}

// void QDateTimeEdit::clearMaximumDateTime()


static void _init_f_clearMaximumDateTime_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_clearMaximumDateTime_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QDateTimeEdit *)cls)->clearMaximumDateTime ();
}

static qt_gsi::GenericMethod *_create_f_clearMaximumDateTime_0 ()
{
  return new qt_gsi::GenericMethod ("clearMaximumDateTime", "@brief Method void QDateTimeEdit::clearMaximumDateTime()\n", false, &_init_f_clearMaximumDateTime_0, &_call_f_clearMaximumDateTime_0);
}

// void QDateTimeEdit::clearMaximumTime()


static void _init_f_clearMaximumTime_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_clearMaximumTime_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QDateTimeEdit *)cls)->clearMaximumTime ();
}

static qt_gsi::GenericMethod *_create_f_clearMaximumTime_0 ()
{
  return new qt_gsi::GenericMethod ("clearMaximumTime", "@brief Method void QDateTimeEdit::clearMaximumTime()\n", false, &_init_f_clearMaximumTime_0, &_call_f_clearMaximumTime_0);
}

// void QDateTimeEdit::clearMinimumDate()


static void _init_f_clearMinimumDate_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_clearMinimumDate_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QDateTimeEdit *)cls)->clearMinimumDate ();
}

static qt_gsi::GenericMethod *_create_f_clearMinimumDate_0 ()
{
  return new qt_gsi::GenericMethod ("clearMinimumDate", "@brief Method void QDateTimeEdit::clearMinimumDate()\n", false, &_init_f_clearMinimumDate_0, &_call_f_clearMinimumDate_0);
}

// void QDateTimeEdit::clearMinimumDateTime()


static void _init_f_clearMinimumDateTime_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_clearMinimumDateTime_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QDateTimeEdit *)cls)->clearMinimumDateTime ();
}

static qt_gsi::GenericMethod *_create_f_clearMinimumDateTime_0 ()
{
  return new qt_gsi::GenericMethod ("clearMinimumDateTime", "@brief Method void QDateTimeEdit::clearMinimumDateTime()\n", false, &_init_f_clearMinimumDateTime_0, &_call_f_clearMinimumDateTime_0);
}

// void QDateTimeEdit::clearMinimumTime()


static void _init_f_clearMinimumTime_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_clearMinimumTime_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QDateTimeEdit *)cls)->clearMinimumTime ();
}

static qt_gsi::GenericMethod *_create_f_clearMinimumTime_0 ()
{
  return new qt_gsi::GenericMethod ("clearMinimumTime", "@brief Method void QDateTimeEdit::clearMinimumTime()\n", false, &_init_f_clearMinimumTime_0, &_call_f_clearMinimumTime_0);
}

// QDateTimeEdit::Section QDateTimeEdit::currentSection()


static void _init_f_currentSection_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QDateTimeEdit::Section>::target_type > ();
}

static void _call_f_currentSection_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QDateTimeEdit::Section>::target_type > ((qt_gsi::Converter<QDateTimeEdit::Section>::target_type)qt_gsi::CppToQtAdaptor<QDateTimeEdit::Section>(((QDateTimeEdit *)cls)->currentSection ()));
}

static qt_gsi::GenericMethod *_create_f_currentSection_c0 ()
{
  return new qt_gsi::GenericMethod (":currentSection", "@brief Method QDateTimeEdit::Section QDateTimeEdit::currentSection()\n", true, &_init_f_currentSection_c0, &_call_f_currentSection_c0);
}

// int QDateTimeEdit::currentSectionIndex()


static void _init_f_currentSectionIndex_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_currentSectionIndex_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QDateTimeEdit *)cls)->currentSectionIndex ());
}

static qt_gsi::GenericMethod *_create_f_currentSectionIndex_c0 ()
{
  return new qt_gsi::GenericMethod (":currentSectionIndex", "@brief Method int QDateTimeEdit::currentSectionIndex()\n", true, &_init_f_currentSectionIndex_c0, &_call_f_currentSectionIndex_c0);
}

// QDate QDateTimeEdit::date()


static void _init_f_date_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QDate > ();
}

static void _call_f_date_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QDate > ((QDate)((QDateTimeEdit *)cls)->date ());
}

static qt_gsi::GenericMethod *_create_f_date_c0 ()
{
  return new qt_gsi::GenericMethod (":date", "@brief Method QDate QDateTimeEdit::date()\n", true, &_init_f_date_c0, &_call_f_date_c0);
}

// QDateTime QDateTimeEdit::dateTime()


static void _init_f_dateTime_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QDateTime > ();
}

static void _call_f_dateTime_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QDateTime > ((QDateTime)((QDateTimeEdit *)cls)->dateTime ());
}

static qt_gsi::GenericMethod *_create_f_dateTime_c0 ()
{
  return new qt_gsi::GenericMethod (":dateTime", "@brief Method QDateTime QDateTimeEdit::dateTime()\n", true, &_init_f_dateTime_c0, &_call_f_dateTime_c0);
}

// QString QDateTimeEdit::displayFormat()


static void _init_f_displayFormat_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_displayFormat_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QDateTimeEdit *)cls)->displayFormat ());
}

static qt_gsi::GenericMethod *_create_f_displayFormat_c0 ()
{
  return new qt_gsi::GenericMethod (":displayFormat", "@brief Method QString QDateTimeEdit::displayFormat()\n", true, &_init_f_displayFormat_c0, &_call_f_displayFormat_c0);
}

// QFlags<QDateTimeEdit::Section> QDateTimeEdit::displayedSections()


static void _init_f_displayedSections_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QFlags<QDateTimeEdit::Section> >::target_type > ();
}

static void _call_f_displayedSections_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QFlags<QDateTimeEdit::Section> >::target_type > ((qt_gsi::Converter<QFlags<QDateTimeEdit::Section> >::target_type)qt_gsi::CppToQtAdaptor<QFlags<QDateTimeEdit::Section> >(((QDateTimeEdit *)cls)->displayedSections ()));
}

static qt_gsi::GenericMethod *_create_f_displayedSections_c0 ()
{
  return new qt_gsi::GenericMethod (":displayedSections", "@brief Method QFlags<QDateTimeEdit::Section> QDateTimeEdit::displayedSections()\n", true, &_init_f_displayedSections_c0, &_call_f_displayedSections_c0);
}

// bool QDateTimeEdit::event(QEvent *event)


static void _init_f_event_1217 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_event_1217 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QEvent *arg1 = args.read<QEvent * > ();
  ret.write<bool > ((bool)((QDateTimeEdit *)cls)->event (arg1));
}

static qt_gsi::GenericMethod *_create_f_event_1217 ()
{
  return new qt_gsi::GenericMethod ("event", "@brief Method bool QDateTimeEdit::event(QEvent *event)\nThis is a reimplementation of QAbstractSpinBox::event", false, &_init_f_event_1217, &_call_f_event_1217);
}

// QDate QDateTimeEdit::maximumDate()


static void _init_f_maximumDate_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QDate > ();
}

static void _call_f_maximumDate_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QDate > ((QDate)((QDateTimeEdit *)cls)->maximumDate ());
}

static qt_gsi::GenericMethod *_create_f_maximumDate_c0 ()
{
  return new qt_gsi::GenericMethod (":maximumDate", "@brief Method QDate QDateTimeEdit::maximumDate()\n", true, &_init_f_maximumDate_c0, &_call_f_maximumDate_c0);
}

// QDateTime QDateTimeEdit::maximumDateTime()


static void _init_f_maximumDateTime_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QDateTime > ();
}

static void _call_f_maximumDateTime_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QDateTime > ((QDateTime)((QDateTimeEdit *)cls)->maximumDateTime ());
}

static qt_gsi::GenericMethod *_create_f_maximumDateTime_c0 ()
{
  return new qt_gsi::GenericMethod (":maximumDateTime", "@brief Method QDateTime QDateTimeEdit::maximumDateTime()\n", true, &_init_f_maximumDateTime_c0, &_call_f_maximumDateTime_c0);
}

// QTime QDateTimeEdit::maximumTime()


static void _init_f_maximumTime_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QTime > ();
}

static void _call_f_maximumTime_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QTime > ((QTime)((QDateTimeEdit *)cls)->maximumTime ());
}

static qt_gsi::GenericMethod *_create_f_maximumTime_c0 ()
{
  return new qt_gsi::GenericMethod (":maximumTime", "@brief Method QTime QDateTimeEdit::maximumTime()\n", true, &_init_f_maximumTime_c0, &_call_f_maximumTime_c0);
}

// QDate QDateTimeEdit::minimumDate()


static void _init_f_minimumDate_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QDate > ();
}

static void _call_f_minimumDate_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QDate > ((QDate)((QDateTimeEdit *)cls)->minimumDate ());
}

static qt_gsi::GenericMethod *_create_f_minimumDate_c0 ()
{
  return new qt_gsi::GenericMethod (":minimumDate", "@brief Method QDate QDateTimeEdit::minimumDate()\n", true, &_init_f_minimumDate_c0, &_call_f_minimumDate_c0);
}

// QDateTime QDateTimeEdit::minimumDateTime()


static void _init_f_minimumDateTime_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QDateTime > ();
}

static void _call_f_minimumDateTime_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QDateTime > ((QDateTime)((QDateTimeEdit *)cls)->minimumDateTime ());
}

static qt_gsi::GenericMethod *_create_f_minimumDateTime_c0 ()
{
  return new qt_gsi::GenericMethod (":minimumDateTime", "@brief Method QDateTime QDateTimeEdit::minimumDateTime()\n", true, &_init_f_minimumDateTime_c0, &_call_f_minimumDateTime_c0);
}

// QTime QDateTimeEdit::minimumTime()


static void _init_f_minimumTime_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QTime > ();
}

static void _call_f_minimumTime_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QTime > ((QTime)((QDateTimeEdit *)cls)->minimumTime ());
}

static qt_gsi::GenericMethod *_create_f_minimumTime_c0 ()
{
  return new qt_gsi::GenericMethod (":minimumTime", "@brief Method QTime QDateTimeEdit::minimumTime()\n", true, &_init_f_minimumTime_c0, &_call_f_minimumTime_c0);
}

// QDateTimeEdit::Section QDateTimeEdit::sectionAt(int index)


static void _init_f_sectionAt_c767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("index");
  decl->add_arg<int > (argspec_0);
  decl->set_return<qt_gsi::Converter<QDateTimeEdit::Section>::target_type > ();
}

static void _call_f_sectionAt_c767 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ret.write<qt_gsi::Converter<QDateTimeEdit::Section>::target_type > ((qt_gsi::Converter<QDateTimeEdit::Section>::target_type)qt_gsi::CppToQtAdaptor<QDateTimeEdit::Section>(((QDateTimeEdit *)cls)->sectionAt (arg1)));
}

static qt_gsi::GenericMethod *_create_f_sectionAt_c767 ()
{
  return new qt_gsi::GenericMethod ("sectionAt", "@brief Method QDateTimeEdit::Section QDateTimeEdit::sectionAt(int index)\n", true, &_init_f_sectionAt_c767, &_call_f_sectionAt_c767);
}

// int QDateTimeEdit::sectionCount()


static void _init_f_sectionCount_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_sectionCount_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QDateTimeEdit *)cls)->sectionCount ());
}

static qt_gsi::GenericMethod *_create_f_sectionCount_c0 ()
{
  return new qt_gsi::GenericMethod (":sectionCount", "@brief Method int QDateTimeEdit::sectionCount()\n", true, &_init_f_sectionCount_c0, &_call_f_sectionCount_c0);
}

// QString QDateTimeEdit::sectionText(QDateTimeEdit::Section section)


static void _init_f_sectionText_c2529 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("section");
  decl->add_arg<const qt_gsi::Converter<QDateTimeEdit::Section>::target_type & > (argspec_0);
  decl->set_return<QString > ();
}

static void _call_f_sectionText_c2529 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QDateTimeEdit::Section>::target_type & arg1 = args.read<const qt_gsi::Converter<QDateTimeEdit::Section>::target_type & > ();
  ret.write<QString > ((QString)((QDateTimeEdit *)cls)->sectionText (qt_gsi::QtToCppAdaptor<QDateTimeEdit::Section>(arg1).cref()));
}

static qt_gsi::GenericMethod *_create_f_sectionText_c2529 ()
{
  return new qt_gsi::GenericMethod ("sectionText", "@brief Method QString QDateTimeEdit::sectionText(QDateTimeEdit::Section section)\n", true, &_init_f_sectionText_c2529, &_call_f_sectionText_c2529);
}

// void QDateTimeEdit::setCalendarPopup(bool enable)


static void _init_f_setCalendarPopup_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("enable");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setCalendarPopup_864 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QDateTimeEdit *)cls)->setCalendarPopup (arg1);
}

static qt_gsi::GenericMethod *_create_f_setCalendarPopup_864 ()
{
  return new qt_gsi::GenericMethod ("setCalendarPopup|calendarPopup=", "@brief Method void QDateTimeEdit::setCalendarPopup(bool enable)\n", false, &_init_f_setCalendarPopup_864, &_call_f_setCalendarPopup_864);
}

// void QDateTimeEdit::setCalendarWidget(QCalendarWidget *calendarWidget)


static void _init_f_setCalendarWidget_2109 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("calendarWidget");
  decl->add_arg<QCalendarWidget * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setCalendarWidget_2109 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QCalendarWidget *arg1 = args.read<QCalendarWidget * > ();
  ((QDateTimeEdit *)cls)->setCalendarWidget (arg1);
}

static qt_gsi::GenericMethod *_create_f_setCalendarWidget_2109 ()
{
  return new qt_gsi::GenericMethod ("setCalendarWidget|calendarWidget=", "@brief Method void QDateTimeEdit::setCalendarWidget(QCalendarWidget *calendarWidget)\n", false, &_init_f_setCalendarWidget_2109, &_call_f_setCalendarWidget_2109);
}

// void QDateTimeEdit::setCurrentSection(QDateTimeEdit::Section section)


static void _init_f_setCurrentSection_2529 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("section");
  decl->add_arg<const qt_gsi::Converter<QDateTimeEdit::Section>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setCurrentSection_2529 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QDateTimeEdit::Section>::target_type & arg1 = args.read<const qt_gsi::Converter<QDateTimeEdit::Section>::target_type & > ();
  ((QDateTimeEdit *)cls)->setCurrentSection (qt_gsi::QtToCppAdaptor<QDateTimeEdit::Section>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setCurrentSection_2529 ()
{
  return new qt_gsi::GenericMethod ("setCurrentSection|currentSection=", "@brief Method void QDateTimeEdit::setCurrentSection(QDateTimeEdit::Section section)\n", false, &_init_f_setCurrentSection_2529, &_call_f_setCurrentSection_2529);
}

// void QDateTimeEdit::setCurrentSectionIndex(int index)


static void _init_f_setCurrentSectionIndex_767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("index");
  decl->add_arg<int > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setCurrentSectionIndex_767 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ((QDateTimeEdit *)cls)->setCurrentSectionIndex (arg1);
}

static qt_gsi::GenericMethod *_create_f_setCurrentSectionIndex_767 ()
{
  return new qt_gsi::GenericMethod ("setCurrentSectionIndex|currentSectionIndex=", "@brief Method void QDateTimeEdit::setCurrentSectionIndex(int index)\n", false, &_init_f_setCurrentSectionIndex_767, &_call_f_setCurrentSectionIndex_767);
}

// void QDateTimeEdit::setDate(const QDate &date)


static void _init_f_setDate_1776 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("date");
  decl->add_arg<const QDate & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setDate_1776 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QDate &arg1 = args.read<const QDate & > ();
  ((QDateTimeEdit *)cls)->setDate (arg1);
}

static qt_gsi::GenericMethod *_create_f_setDate_1776 ()
{
  return new qt_gsi::GenericMethod ("setDate|date=", "@brief Method void QDateTimeEdit::setDate(const QDate &date)\n", false, &_init_f_setDate_1776, &_call_f_setDate_1776);
}

// void QDateTimeEdit::setDateRange(const QDate &min, const QDate &max)


static void _init_f_setDateRange_3444 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("min");
  decl->add_arg<const QDate & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("max");
  decl->add_arg<const QDate & > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_setDateRange_3444 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QDate &arg1 = args.read<const QDate & > ();
  const QDate &arg2 = args.read<const QDate & > ();
  ((QDateTimeEdit *)cls)->setDateRange (arg1, arg2);
}

static qt_gsi::GenericMethod *_create_f_setDateRange_3444 ()
{
  return new qt_gsi::GenericMethod ("setDateRange", "@brief Method void QDateTimeEdit::setDateRange(const QDate &min, const QDate &max)\n", false, &_init_f_setDateRange_3444, &_call_f_setDateRange_3444);
}

// void QDateTimeEdit::setDateTime(const QDateTime &dateTime)


static void _init_f_setDateTime_2175 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("dateTime");
  decl->add_arg<const QDateTime & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setDateTime_2175 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QDateTime &arg1 = args.read<const QDateTime & > ();
  ((QDateTimeEdit *)cls)->setDateTime (arg1);
}

static qt_gsi::GenericMethod *_create_f_setDateTime_2175 ()
{
  return new qt_gsi::GenericMethod ("setDateTime|dateTime=", "@brief Method void QDateTimeEdit::setDateTime(const QDateTime &dateTime)\n", false, &_init_f_setDateTime_2175, &_call_f_setDateTime_2175);
}

// void QDateTimeEdit::setDateTimeRange(const QDateTime &min, const QDateTime &max)


static void _init_f_setDateTimeRange_4242 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("min");
  decl->add_arg<const QDateTime & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("max");
  decl->add_arg<const QDateTime & > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_setDateTimeRange_4242 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QDateTime &arg1 = args.read<const QDateTime & > ();
  const QDateTime &arg2 = args.read<const QDateTime & > ();
  ((QDateTimeEdit *)cls)->setDateTimeRange (arg1, arg2);
}

static qt_gsi::GenericMethod *_create_f_setDateTimeRange_4242 ()
{
  return new qt_gsi::GenericMethod ("setDateTimeRange", "@brief Method void QDateTimeEdit::setDateTimeRange(const QDateTime &min, const QDateTime &max)\n", false, &_init_f_setDateTimeRange_4242, &_call_f_setDateTimeRange_4242);
}

// void QDateTimeEdit::setDisplayFormat(const QString &format)


static void _init_f_setDisplayFormat_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("format");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setDisplayFormat_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QDateTimeEdit *)cls)->setDisplayFormat (arg1);
}

static qt_gsi::GenericMethod *_create_f_setDisplayFormat_2025 ()
{
  return new qt_gsi::GenericMethod ("setDisplayFormat|displayFormat=", "@brief Method void QDateTimeEdit::setDisplayFormat(const QString &format)\n", false, &_init_f_setDisplayFormat_2025, &_call_f_setDisplayFormat_2025);
}

// void QDateTimeEdit::setMaximumDate(const QDate &max)


static void _init_f_setMaximumDate_1776 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("max");
  decl->add_arg<const QDate & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setMaximumDate_1776 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QDate &arg1 = args.read<const QDate & > ();
  ((QDateTimeEdit *)cls)->setMaximumDate (arg1);
}

static qt_gsi::GenericMethod *_create_f_setMaximumDate_1776 ()
{
  return new qt_gsi::GenericMethod ("setMaximumDate|maximumDate=", "@brief Method void QDateTimeEdit::setMaximumDate(const QDate &max)\n", false, &_init_f_setMaximumDate_1776, &_call_f_setMaximumDate_1776);
}

// void QDateTimeEdit::setMaximumDateTime(const QDateTime &dt)


static void _init_f_setMaximumDateTime_2175 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("dt");
  decl->add_arg<const QDateTime & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setMaximumDateTime_2175 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QDateTime &arg1 = args.read<const QDateTime & > ();
  ((QDateTimeEdit *)cls)->setMaximumDateTime (arg1);
}

static qt_gsi::GenericMethod *_create_f_setMaximumDateTime_2175 ()
{
  return new qt_gsi::GenericMethod ("setMaximumDateTime|maximumDateTime=", "@brief Method void QDateTimeEdit::setMaximumDateTime(const QDateTime &dt)\n", false, &_init_f_setMaximumDateTime_2175, &_call_f_setMaximumDateTime_2175);
}

// void QDateTimeEdit::setMaximumTime(const QTime &max)


static void _init_f_setMaximumTime_1793 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("max");
  decl->add_arg<const QTime & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setMaximumTime_1793 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QTime &arg1 = args.read<const QTime & > ();
  ((QDateTimeEdit *)cls)->setMaximumTime (arg1);
}

static qt_gsi::GenericMethod *_create_f_setMaximumTime_1793 ()
{
  return new qt_gsi::GenericMethod ("setMaximumTime|maximumTime=", "@brief Method void QDateTimeEdit::setMaximumTime(const QTime &max)\n", false, &_init_f_setMaximumTime_1793, &_call_f_setMaximumTime_1793);
}

// void QDateTimeEdit::setMinimumDate(const QDate &min)


static void _init_f_setMinimumDate_1776 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("min");
  decl->add_arg<const QDate & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setMinimumDate_1776 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QDate &arg1 = args.read<const QDate & > ();
  ((QDateTimeEdit *)cls)->setMinimumDate (arg1);
}

static qt_gsi::GenericMethod *_create_f_setMinimumDate_1776 ()
{
  return new qt_gsi::GenericMethod ("setMinimumDate|minimumDate=", "@brief Method void QDateTimeEdit::setMinimumDate(const QDate &min)\n", false, &_init_f_setMinimumDate_1776, &_call_f_setMinimumDate_1776);
}

// void QDateTimeEdit::setMinimumDateTime(const QDateTime &dt)


static void _init_f_setMinimumDateTime_2175 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("dt");
  decl->add_arg<const QDateTime & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setMinimumDateTime_2175 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QDateTime &arg1 = args.read<const QDateTime & > ();
  ((QDateTimeEdit *)cls)->setMinimumDateTime (arg1);
}

static qt_gsi::GenericMethod *_create_f_setMinimumDateTime_2175 ()
{
  return new qt_gsi::GenericMethod ("setMinimumDateTime|minimumDateTime=", "@brief Method void QDateTimeEdit::setMinimumDateTime(const QDateTime &dt)\n", false, &_init_f_setMinimumDateTime_2175, &_call_f_setMinimumDateTime_2175);
}

// void QDateTimeEdit::setMinimumTime(const QTime &min)


static void _init_f_setMinimumTime_1793 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("min");
  decl->add_arg<const QTime & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setMinimumTime_1793 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QTime &arg1 = args.read<const QTime & > ();
  ((QDateTimeEdit *)cls)->setMinimumTime (arg1);
}

static qt_gsi::GenericMethod *_create_f_setMinimumTime_1793 ()
{
  return new qt_gsi::GenericMethod ("setMinimumTime|minimumTime=", "@brief Method void QDateTimeEdit::setMinimumTime(const QTime &min)\n", false, &_init_f_setMinimumTime_1793, &_call_f_setMinimumTime_1793);
}

// void QDateTimeEdit::setSelectedSection(QDateTimeEdit::Section section)


static void _init_f_setSelectedSection_2529 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("section");
  decl->add_arg<const qt_gsi::Converter<QDateTimeEdit::Section>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setSelectedSection_2529 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QDateTimeEdit::Section>::target_type & arg1 = args.read<const qt_gsi::Converter<QDateTimeEdit::Section>::target_type & > ();
  ((QDateTimeEdit *)cls)->setSelectedSection (qt_gsi::QtToCppAdaptor<QDateTimeEdit::Section>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setSelectedSection_2529 ()
{
  return new qt_gsi::GenericMethod ("setSelectedSection", "@brief Method void QDateTimeEdit::setSelectedSection(QDateTimeEdit::Section section)\n", false, &_init_f_setSelectedSection_2529, &_call_f_setSelectedSection_2529);
}

// void QDateTimeEdit::setTime(const QTime &time)


static void _init_f_setTime_1793 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("time");
  decl->add_arg<const QTime & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setTime_1793 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QTime &arg1 = args.read<const QTime & > ();
  ((QDateTimeEdit *)cls)->setTime (arg1);
}

static qt_gsi::GenericMethod *_create_f_setTime_1793 ()
{
  return new qt_gsi::GenericMethod ("setTime|time=", "@brief Method void QDateTimeEdit::setTime(const QTime &time)\n", false, &_init_f_setTime_1793, &_call_f_setTime_1793);
}

// void QDateTimeEdit::setTimeRange(const QTime &min, const QTime &max)


static void _init_f_setTimeRange_3478 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("min");
  decl->add_arg<const QTime & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("max");
  decl->add_arg<const QTime & > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_setTimeRange_3478 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QTime &arg1 = args.read<const QTime & > ();
  const QTime &arg2 = args.read<const QTime & > ();
  ((QDateTimeEdit *)cls)->setTimeRange (arg1, arg2);
}

static qt_gsi::GenericMethod *_create_f_setTimeRange_3478 ()
{
  return new qt_gsi::GenericMethod ("setTimeRange", "@brief Method void QDateTimeEdit::setTimeRange(const QTime &min, const QTime &max)\n", false, &_init_f_setTimeRange_3478, &_call_f_setTimeRange_3478);
}

// void QDateTimeEdit::setTimeSpec(Qt::TimeSpec spec)


static void _init_f_setTimeSpec_1543 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("spec");
  decl->add_arg<const qt_gsi::Converter<Qt::TimeSpec>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setTimeSpec_1543 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<Qt::TimeSpec>::target_type & arg1 = args.read<const qt_gsi::Converter<Qt::TimeSpec>::target_type & > ();
  ((QDateTimeEdit *)cls)->setTimeSpec (qt_gsi::QtToCppAdaptor<Qt::TimeSpec>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setTimeSpec_1543 ()
{
  return new qt_gsi::GenericMethod ("setTimeSpec|timeSpec=", "@brief Method void QDateTimeEdit::setTimeSpec(Qt::TimeSpec spec)\n", false, &_init_f_setTimeSpec_1543, &_call_f_setTimeSpec_1543);
}

// QSize QDateTimeEdit::sizeHint()


static void _init_f_sizeHint_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QSize > ();
}

static void _call_f_sizeHint_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QSize > ((QSize)((QDateTimeEdit *)cls)->sizeHint ());
}

static qt_gsi::GenericMethod *_create_f_sizeHint_c0 ()
{
  return new qt_gsi::GenericMethod (":sizeHint", "@brief Method QSize QDateTimeEdit::sizeHint()\nThis is a reimplementation of QAbstractSpinBox::sizeHint", true, &_init_f_sizeHint_c0, &_call_f_sizeHint_c0);
}

// void QDateTimeEdit::stepBy(int steps)


static void _init_f_stepBy_767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("steps");
  decl->add_arg<int > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_stepBy_767 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ((QDateTimeEdit *)cls)->stepBy (arg1);
}

static qt_gsi::GenericMethod *_create_f_stepBy_767 ()
{
  return new qt_gsi::GenericMethod ("stepBy", "@brief Method void QDateTimeEdit::stepBy(int steps)\nThis is a reimplementation of QAbstractSpinBox::stepBy", false, &_init_f_stepBy_767, &_call_f_stepBy_767);
}

// QTime QDateTimeEdit::time()


static void _init_f_time_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QTime > ();
}

static void _call_f_time_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QTime > ((QTime)((QDateTimeEdit *)cls)->time ());
}

static qt_gsi::GenericMethod *_create_f_time_c0 ()
{
  return new qt_gsi::GenericMethod (":time", "@brief Method QTime QDateTimeEdit::time()\n", true, &_init_f_time_c0, &_call_f_time_c0);
}

// Qt::TimeSpec QDateTimeEdit::timeSpec()


static void _init_f_timeSpec_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<Qt::TimeSpec>::target_type > ();
}

static void _call_f_timeSpec_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<Qt::TimeSpec>::target_type > ((qt_gsi::Converter<Qt::TimeSpec>::target_type)qt_gsi::CppToQtAdaptor<Qt::TimeSpec>(((QDateTimeEdit *)cls)->timeSpec ()));
}

static qt_gsi::GenericMethod *_create_f_timeSpec_c0 ()
{
  return new qt_gsi::GenericMethod (":timeSpec", "@brief Method Qt::TimeSpec QDateTimeEdit::timeSpec()\n", true, &_init_f_timeSpec_c0, &_call_f_timeSpec_c0);
}

// static QString QDateTimeEdit::tr(const char *s, const char *c)


static void _init_f_tr_3354 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c", true, "0");
  decl->add_arg<const char * > (argspec_1);
  decl->set_return<QString > ();
}

static void _call_f_tr_3354 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args ? args.read<const char * > () : (const char *)(0);
  ret.write<QString > ((QString)QDateTimeEdit::tr (arg1, arg2));
}

static qt_gsi::GenericStaticMethod *_create_f_tr_3354 ()
{
  return new qt_gsi::GenericStaticMethod ("tr", "@brief Static method QString QDateTimeEdit::tr(const char *s, const char *c)\nThis method is static and can be called without an instance.", &_init_f_tr_3354, &_call_f_tr_3354);
}

// static QString QDateTimeEdit::tr(const char *s, const char *c, int n)


static void _init_f_tr_4013 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c");
  decl->add_arg<const char * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("n");
  decl->add_arg<int > (argspec_2);
  decl->set_return<QString > ();
}

static void _call_f_tr_4013 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args.read<const char * > ();
  int arg3 = args.read<int > ();
  ret.write<QString > ((QString)QDateTimeEdit::tr (arg1, arg2, arg3));
}

static qt_gsi::GenericStaticMethod *_create_f_tr_4013 ()
{
  return new qt_gsi::GenericStaticMethod ("tr", "@brief Static method QString QDateTimeEdit::tr(const char *s, const char *c, int n)\nThis method is static and can be called without an instance.", &_init_f_tr_4013, &_call_f_tr_4013);
}

// static QString QDateTimeEdit::trUtf8(const char *s, const char *c)


static void _init_f_trUtf8_3354 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c", true, "0");
  decl->add_arg<const char * > (argspec_1);
  decl->set_return<QString > ();
}

static void _call_f_trUtf8_3354 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args ? args.read<const char * > () : (const char *)(0);
  ret.write<QString > ((QString)QDateTimeEdit::trUtf8 (arg1, arg2));
}

static qt_gsi::GenericStaticMethod *_create_f_trUtf8_3354 ()
{
  return new qt_gsi::GenericStaticMethod ("trUtf8", "@brief Static method QString QDateTimeEdit::trUtf8(const char *s, const char *c)\nThis method is static and can be called without an instance.", &_init_f_trUtf8_3354, &_call_f_trUtf8_3354);
}

// static QString QDateTimeEdit::trUtf8(const char *s, const char *c, int n)


static void _init_f_trUtf8_4013 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c");
  decl->add_arg<const char * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("n");
  decl->add_arg<int > (argspec_2);
  decl->set_return<QString > ();
}

static void _call_f_trUtf8_4013 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  const char *arg2 = args.read<const char * > ();
  int arg3 = args.read<int > ();
  ret.write<QString > ((QString)QDateTimeEdit::trUtf8 (arg1, arg2, arg3));
}

static qt_gsi::GenericStaticMethod *_create_f_trUtf8_4013 ()
{
  return new qt_gsi::GenericStaticMethod ("trUtf8", "@brief Static method QString QDateTimeEdit::trUtf8(const char *s, const char *c, int n)\nThis method is static and can be called without an instance.", &_init_f_trUtf8_4013, &_call_f_trUtf8_4013);
}

static qt_gsi::QObjectConnector<QDateTimeEdit, QDateTimeEdit_EventAdaptor> ea_QDateTimeEdit;

namespace gsi
{
extern gsi::Class<QAbstractSpinBox> decl_QAbstractSpinBox;

gsi::Class<QDateTimeEdit> decl_QDateTimeEdit (ea_QDateTimeEdit, decl_QAbstractSpinBox, "QDateTimeEdit_Native",
  gsi::Methods(_create_smo ()) +
  gsi::Methods(_create_f_calendarPopup_c0 ()) +
  gsi::Methods(_create_f_calendarWidget_c0 ()) +
  gsi::Methods(_create_f_clear_0 ()) +
  gsi::Methods(_create_f_clearMaximumDate_0 ()) +
  gsi::Methods(_create_f_clearMaximumDateTime_0 ()) +
  gsi::Methods(_create_f_clearMaximumTime_0 ()) +
  gsi::Methods(_create_f_clearMinimumDate_0 ()) +
  gsi::Methods(_create_f_clearMinimumDateTime_0 ()) +
  gsi::Methods(_create_f_clearMinimumTime_0 ()) +
  gsi::Methods(_create_f_currentSection_c0 ()) +
  gsi::Methods(_create_f_currentSectionIndex_c0 ()) +
  gsi::Methods(_create_f_date_c0 ()) +
  gsi::Methods(_create_f_dateTime_c0 ()) +
  gsi::Methods(_create_f_displayFormat_c0 ()) +
  gsi::Methods(_create_f_displayedSections_c0 ()) +
  gsi::Methods(_create_f_event_1217 ()) +
  gsi::Methods(_create_f_maximumDate_c0 ()) +
  gsi::Methods(_create_f_maximumDateTime_c0 ()) +
  gsi::Methods(_create_f_maximumTime_c0 ()) +
  gsi::Methods(_create_f_minimumDate_c0 ()) +
  gsi::Methods(_create_f_minimumDateTime_c0 ()) +
  gsi::Methods(_create_f_minimumTime_c0 ()) +
  gsi::Methods(_create_f_sectionAt_c767 ()) +
  gsi::Methods(_create_f_sectionCount_c0 ()) +
  gsi::Methods(_create_f_sectionText_c2529 ()) +
  gsi::Methods(_create_f_setCalendarPopup_864 ()) +
  gsi::Methods(_create_f_setCalendarWidget_2109 ()) +
  gsi::Methods(_create_f_setCurrentSection_2529 ()) +
  gsi::Methods(_create_f_setCurrentSectionIndex_767 ()) +
  gsi::Methods(_create_f_setDate_1776 ()) +
  gsi::Methods(_create_f_setDateRange_3444 ()) +
  gsi::Methods(_create_f_setDateTime_2175 ()) +
  gsi::Methods(_create_f_setDateTimeRange_4242 ()) +
  gsi::Methods(_create_f_setDisplayFormat_2025 ()) +
  gsi::Methods(_create_f_setMaximumDate_1776 ()) +
  gsi::Methods(_create_f_setMaximumDateTime_2175 ()) +
  gsi::Methods(_create_f_setMaximumTime_1793 ()) +
  gsi::Methods(_create_f_setMinimumDate_1776 ()) +
  gsi::Methods(_create_f_setMinimumDateTime_2175 ()) +
  gsi::Methods(_create_f_setMinimumTime_1793 ()) +
  gsi::Methods(_create_f_setSelectedSection_2529 ()) +
  gsi::Methods(_create_f_setTime_1793 ()) +
  gsi::Methods(_create_f_setTimeRange_3478 ()) +
  gsi::Methods(_create_f_setTimeSpec_1543 ()) +
  gsi::Methods(_create_f_sizeHint_c0 ()) +
  gsi::Methods(_create_f_stepBy_767 ()) +
  gsi::Methods(_create_f_time_c0 ()) +
  gsi::Methods(_create_f_timeSpec_c0 ()) +
  qt_gsi::qt_signal<QDateTimeEdit, QDateTimeEdit_EventAdaptor, const QPoint &> ("customContextMenuRequested", &QDateTimeEdit_EventAdaptor::customContextMenuRequested_e_1916, gsi::arg("pos"), "@brief Signal declaration for QDateTimeEdit::customContextMenuRequested(const QPoint &pos)\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QDateTimeEdit, QDateTimeEdit_EventAdaptor, const QDate &> ("dateChanged", &QDateTimeEdit_EventAdaptor::dateChanged_e_1776, gsi::arg("date"), "@brief Signal declaration for QDateTimeEdit::dateChanged(const QDate &date)\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QDateTimeEdit, QDateTimeEdit_EventAdaptor, const QDateTime &> ("dateTimeChanged", &QDateTimeEdit_EventAdaptor::dateTimeChanged_e_2175, gsi::arg("date"), "@brief Signal declaration for QDateTimeEdit::dateTimeChanged(const QDateTime &date)\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QDateTimeEdit, QDateTimeEdit_EventAdaptor, QObject *> ("destroyed", &QDateTimeEdit_EventAdaptor::destroyed_e_1302, gsi::arg("arg1"), "@brief Signal declaration for QDateTimeEdit::destroyed(QObject *)\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QDateTimeEdit, QDateTimeEdit_EventAdaptor> ("editingFinished", &QDateTimeEdit_EventAdaptor::editingFinished_e_0, "@brief Signal declaration for QDateTimeEdit::editingFinished()\nYou can bind a procedure to this signal.") +
  qt_gsi::qt_signal<QDateTimeEdit, QDateTimeEdit_EventAdaptor, const QTime &> ("timeChanged", &QDateTimeEdit_EventAdaptor::timeChanged_e_1793, gsi::arg("date"), "@brief Signal declaration for QDateTimeEdit::timeChanged(const QTime &date)\nYou can bind a procedure to this signal.") +
  gsi::Methods(_create_f_tr_3354 ()) +
  gsi::Methods(_create_f_tr_4013 ()) +
  gsi::Methods(_create_f_trUtf8_3354 ()) +
  gsi::Methods(_create_f_trUtf8_4013 ()),
  "@hide\n@alias QDateTimeEdit");
}


class QDateTimeEdit_Adaptor : public QDateTimeEdit, public qt_gsi::QtObjectBase
{
public:

  virtual ~QDateTimeEdit_Adaptor();

  //  [adaptor ctor] QDateTimeEdit::QDateTimeEdit(QWidget *parent)
  QDateTimeEdit_Adaptor() : QDateTimeEdit()
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QDateTimeEdit::QDateTimeEdit(QWidget *parent)
  QDateTimeEdit_Adaptor(QWidget *parent) : QDateTimeEdit(parent)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QDateTimeEdit::QDateTimeEdit(const QDateTime &dt, QWidget *parent)
  QDateTimeEdit_Adaptor(const QDateTime &dt) : QDateTimeEdit(dt)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QDateTimeEdit::QDateTimeEdit(const QDateTime &dt, QWidget *parent)
  QDateTimeEdit_Adaptor(const QDateTime &dt, QWidget *parent) : QDateTimeEdit(dt, parent)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QDateTimeEdit::QDateTimeEdit(const QDate &d, QWidget *parent)
  QDateTimeEdit_Adaptor(const QDate &d) : QDateTimeEdit(d)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QDateTimeEdit::QDateTimeEdit(const QDate &d, QWidget *parent)
  QDateTimeEdit_Adaptor(const QDate &d, QWidget *parent) : QDateTimeEdit(d, parent)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QDateTimeEdit::QDateTimeEdit(const QTime &t, QWidget *parent)
  QDateTimeEdit_Adaptor(const QTime &t) : QDateTimeEdit(t)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QDateTimeEdit::QDateTimeEdit(const QTime &t, QWidget *parent)
  QDateTimeEdit_Adaptor(const QTime &t, QWidget *parent) : QDateTimeEdit(t, parent)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  void QDateTimeEdit::create(WId, bool initializeWindow, bool destroyOldWindow)
  void fp_QDateTimeEdit_create_2208 (const qt_gsi::Converter<WId>::target_type & arg1, bool initializeWindow, bool destroyOldWindow) {
    QDateTimeEdit::create(qt_gsi::QtToCppAdaptor<WId>(arg1).cref(), initializeWindow, destroyOldWindow);
  }

  //  void QDateTimeEdit::destroy(bool destroyWindow, bool destroySubWindows)
  void fp_QDateTimeEdit_destroy_1620 (bool destroyWindow, bool destroySubWindows) {
    QDateTimeEdit::destroy(destroyWindow, destroySubWindows);
  }

  //  bool QDateTimeEdit::focusNextChild()
  bool fp_QDateTimeEdit_focusNextChild_0 () {
    return QDateTimeEdit::focusNextChild();
  }

  //  bool QDateTimeEdit::focusPreviousChild()
  bool fp_QDateTimeEdit_focusPreviousChild_0 () {
    return QDateTimeEdit::focusPreviousChild();
  }

  //  void QDateTimeEdit::initStyleOption(QStyleOptionSpinBox *option)
  void fp_QDateTimeEdit_initStyleOption_c2572 (QStyleOptionSpinBox *option) const {
    QDateTimeEdit::initStyleOption(option);
  }

  //  QLineEdit *QDateTimeEdit::lineEdit()
  QLineEdit * fp_QDateTimeEdit_lineEdit_c0 () const {
    return QDateTimeEdit::lineEdit();
  }

  //  int QDateTimeEdit::receivers(const char *signal)
  int fp_QDateTimeEdit_receivers_c1731 (const char *signal) const {
    return QDateTimeEdit::receivers(signal);
  }

  //  void QDateTimeEdit::resetInputContext()
  void fp_QDateTimeEdit_resetInputContext_0 () {
    QDateTimeEdit::resetInputContext();
  }

  //  QObject *QDateTimeEdit::sender()
  QObject * fp_QDateTimeEdit_sender_c0 () const {
    return QDateTimeEdit::sender();
  }

  //  void QDateTimeEdit::setLineEdit(QLineEdit *edit)
  void fp_QDateTimeEdit_setLineEdit_1485 (QLineEdit *edit) {
    QDateTimeEdit::setLineEdit(edit);
  }

  //  void QDateTimeEdit::updateMicroFocus()
  void fp_QDateTimeEdit_updateMicroFocus_0 () {
    QDateTimeEdit::updateMicroFocus();
  }

  //  [adaptor impl] void QDateTimeEdit::clear()
  void cbs_clear_0_0()
  {
    QDateTimeEdit::clear();
  }

  virtual void clear()
  {
    if (cb_clear_0_0.can_issue()) {
      cb_clear_0_0.issue<QDateTimeEdit_Adaptor>(&QDateTimeEdit_Adaptor::cbs_clear_0_0);
    } else {
      QDateTimeEdit::clear();
    }
  }

  //  [adaptor impl] bool QDateTimeEdit::event(QEvent *event)
  bool cbs_event_1217_0(QEvent *_event)
  {
    return QDateTimeEdit::event(_event);
  }

  virtual bool event(QEvent *_event)
  {
    if (cb_event_1217_0.can_issue()) {
      return cb_event_1217_0.issue<QDateTimeEdit_Adaptor, bool, QEvent *>(&QDateTimeEdit_Adaptor::cbs_event_1217_0, _event);
    } else {
      return QDateTimeEdit::event(_event);
    }
  }

  //  [adaptor impl] bool QDateTimeEdit::eventFilter(QObject *, QEvent *)
  bool cbs_eventFilter_2411_0(QObject *arg1, QEvent *arg2)
  {
    return QDateTimeEdit::eventFilter(arg1, arg2);
  }

  virtual bool eventFilter(QObject *arg1, QEvent *arg2)
  {
    if (cb_eventFilter_2411_0.can_issue()) {
      return cb_eventFilter_2411_0.issue<QDateTimeEdit_Adaptor, bool, QObject *, QEvent *>(&QDateTimeEdit_Adaptor::cbs_eventFilter_2411_0, arg1, arg2);
    } else {
      return QDateTimeEdit::eventFilter(arg1, arg2);
    }
  }

  //  [adaptor impl] int QDateTimeEdit::heightForWidth(int)
  int cbs_heightForWidth_c767_0(int arg1) const
  {
    return QDateTimeEdit::heightForWidth(arg1);
  }

  virtual int heightForWidth(int arg1) const
  {
    if (cb_heightForWidth_c767_0.can_issue()) {
      return cb_heightForWidth_c767_0.issue<QDateTimeEdit_Adaptor, int, int>(&QDateTimeEdit_Adaptor::cbs_heightForWidth_c767_0, arg1);
    } else {
      return QDateTimeEdit::heightForWidth(arg1);
    }
  }

  //  [adaptor impl] QVariant QDateTimeEdit::inputMethodQuery(Qt::InputMethodQuery)
  QVariant cbs_inputMethodQuery_c2420_0(const qt_gsi::Converter<Qt::InputMethodQuery>::target_type & arg1) const
  {
    return QDateTimeEdit::inputMethodQuery(qt_gsi::QtToCppAdaptor<Qt::InputMethodQuery>(arg1).cref());
  }

  virtual QVariant inputMethodQuery(Qt::InputMethodQuery arg1) const
  {
    if (cb_inputMethodQuery_c2420_0.can_issue()) {
      return cb_inputMethodQuery_c2420_0.issue<QDateTimeEdit_Adaptor, QVariant, const qt_gsi::Converter<Qt::InputMethodQuery>::target_type &>(&QDateTimeEdit_Adaptor::cbs_inputMethodQuery_c2420_0, qt_gsi::CppToQtAdaptor<Qt::InputMethodQuery>(arg1));
    } else {
      return QDateTimeEdit::inputMethodQuery(arg1);
    }
  }

  //  [adaptor impl] QSize QDateTimeEdit::minimumSizeHint()
  QSize cbs_minimumSizeHint_c0_0() const
  {
    return QDateTimeEdit::minimumSizeHint();
  }

  virtual QSize minimumSizeHint() const
  {
    if (cb_minimumSizeHint_c0_0.can_issue()) {
      return cb_minimumSizeHint_c0_0.issue<QDateTimeEdit_Adaptor, QSize>(&QDateTimeEdit_Adaptor::cbs_minimumSizeHint_c0_0);
    } else {
      return QDateTimeEdit::minimumSizeHint();
    }
  }

  //  [adaptor impl] QPaintEngine *QDateTimeEdit::paintEngine()
  QPaintEngine * cbs_paintEngine_c0_0() const
  {
    return QDateTimeEdit::paintEngine();
  }

  virtual QPaintEngine * paintEngine() const
  {
    if (cb_paintEngine_c0_0.can_issue()) {
      return cb_paintEngine_c0_0.issue<QDateTimeEdit_Adaptor, QPaintEngine *>(&QDateTimeEdit_Adaptor::cbs_paintEngine_c0_0);
    } else {
      return QDateTimeEdit::paintEngine();
    }
  }

  //  [adaptor impl] void QDateTimeEdit::setVisible(bool visible)
  void cbs_setVisible_864_0(bool visible)
  {
    QDateTimeEdit::setVisible(visible);
  }

  virtual void setVisible(bool visible)
  {
    if (cb_setVisible_864_0.can_issue()) {
      cb_setVisible_864_0.issue<QDateTimeEdit_Adaptor, bool>(&QDateTimeEdit_Adaptor::cbs_setVisible_864_0, visible);
    } else {
      QDateTimeEdit::setVisible(visible);
    }
  }

  //  [adaptor impl] QSize QDateTimeEdit::sizeHint()
  QSize cbs_sizeHint_c0_0() const
  {
    return QDateTimeEdit::sizeHint();
  }

  virtual QSize sizeHint() const
  {
    if (cb_sizeHint_c0_0.can_issue()) {
      return cb_sizeHint_c0_0.issue<QDateTimeEdit_Adaptor, QSize>(&QDateTimeEdit_Adaptor::cbs_sizeHint_c0_0);
    } else {
      return QDateTimeEdit::sizeHint();
    }
  }

  //  [adaptor impl] void QDateTimeEdit::stepBy(int steps)
  void cbs_stepBy_767_0(int steps)
  {
    QDateTimeEdit::stepBy(steps);
  }

  virtual void stepBy(int steps)
  {
    if (cb_stepBy_767_0.can_issue()) {
      cb_stepBy_767_0.issue<QDateTimeEdit_Adaptor, int>(&QDateTimeEdit_Adaptor::cbs_stepBy_767_0, steps);
    } else {
      QDateTimeEdit::stepBy(steps);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::actionEvent(QActionEvent *)
  void cbs_actionEvent_1823_0(QActionEvent *arg1)
  {
    QDateTimeEdit::actionEvent(arg1);
  }

  virtual void actionEvent(QActionEvent *arg1)
  {
    if (cb_actionEvent_1823_0.can_issue()) {
      cb_actionEvent_1823_0.issue<QDateTimeEdit_Adaptor, QActionEvent *>(&QDateTimeEdit_Adaptor::cbs_actionEvent_1823_0, arg1);
    } else {
      QDateTimeEdit::actionEvent(arg1);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::changeEvent(QEvent *event)
  void cbs_changeEvent_1217_0(QEvent *event)
  {
    QDateTimeEdit::changeEvent(event);
  }

  virtual void changeEvent(QEvent *event)
  {
    if (cb_changeEvent_1217_0.can_issue()) {
      cb_changeEvent_1217_0.issue<QDateTimeEdit_Adaptor, QEvent *>(&QDateTimeEdit_Adaptor::cbs_changeEvent_1217_0, event);
    } else {
      QDateTimeEdit::changeEvent(event);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::childEvent(QChildEvent *)
  void cbs_childEvent_1701_0(QChildEvent *arg1)
  {
    QDateTimeEdit::childEvent(arg1);
  }

  virtual void childEvent(QChildEvent *arg1)
  {
    if (cb_childEvent_1701_0.can_issue()) {
      cb_childEvent_1701_0.issue<QDateTimeEdit_Adaptor, QChildEvent *>(&QDateTimeEdit_Adaptor::cbs_childEvent_1701_0, arg1);
    } else {
      QDateTimeEdit::childEvent(arg1);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::closeEvent(QCloseEvent *event)
  void cbs_closeEvent_1719_0(QCloseEvent *event)
  {
    QDateTimeEdit::closeEvent(event);
  }

  virtual void closeEvent(QCloseEvent *event)
  {
    if (cb_closeEvent_1719_0.can_issue()) {
      cb_closeEvent_1719_0.issue<QDateTimeEdit_Adaptor, QCloseEvent *>(&QDateTimeEdit_Adaptor::cbs_closeEvent_1719_0, event);
    } else {
      QDateTimeEdit::closeEvent(event);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::contextMenuEvent(QContextMenuEvent *event)
  void cbs_contextMenuEvent_2363_0(QContextMenuEvent *event)
  {
    QDateTimeEdit::contextMenuEvent(event);
  }

  virtual void contextMenuEvent(QContextMenuEvent *event)
  {
    if (cb_contextMenuEvent_2363_0.can_issue()) {
      cb_contextMenuEvent_2363_0.issue<QDateTimeEdit_Adaptor, QContextMenuEvent *>(&QDateTimeEdit_Adaptor::cbs_contextMenuEvent_2363_0, event);
    } else {
      QDateTimeEdit::contextMenuEvent(event);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::customEvent(QEvent *)
  void cbs_customEvent_1217_0(QEvent *arg1)
  {
    QDateTimeEdit::customEvent(arg1);
  }

  virtual void customEvent(QEvent *arg1)
  {
    if (cb_customEvent_1217_0.can_issue()) {
      cb_customEvent_1217_0.issue<QDateTimeEdit_Adaptor, QEvent *>(&QDateTimeEdit_Adaptor::cbs_customEvent_1217_0, arg1);
    } else {
      QDateTimeEdit::customEvent(arg1);
    }
  }

  //  [adaptor impl] QDateTime QDateTimeEdit::dateTimeFromText(const QString &text)
  QDateTime cbs_dateTimeFromText_c2025_0(const QString &text) const
  {
    return QDateTimeEdit::dateTimeFromText(text);
  }

  virtual QDateTime dateTimeFromText(const QString &text) const
  {
    if (cb_dateTimeFromText_c2025_0.can_issue()) {
      return cb_dateTimeFromText_c2025_0.issue<QDateTimeEdit_Adaptor, QDateTime, const QString &>(&QDateTimeEdit_Adaptor::cbs_dateTimeFromText_c2025_0, text);
    } else {
      return QDateTimeEdit::dateTimeFromText(text);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::disconnectNotify(const char *signal)
  void cbs_disconnectNotify_1731_0(const char *signal)
  {
    QDateTimeEdit::disconnectNotify(signal);
  }

  virtual void disconnectNotify(const char *signal)
  {
    if (cb_disconnectNotify_1731_0.can_issue()) {
      cb_disconnectNotify_1731_0.issue<QDateTimeEdit_Adaptor, const char *>(&QDateTimeEdit_Adaptor::cbs_disconnectNotify_1731_0, signal);
    } else {
      QDateTimeEdit::disconnectNotify(signal);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::dragEnterEvent(QDragEnterEvent *)
  void cbs_dragEnterEvent_2109_0(QDragEnterEvent *arg1)
  {
    QDateTimeEdit::dragEnterEvent(arg1);
  }

  virtual void dragEnterEvent(QDragEnterEvent *arg1)
  {
    if (cb_dragEnterEvent_2109_0.can_issue()) {
      cb_dragEnterEvent_2109_0.issue<QDateTimeEdit_Adaptor, QDragEnterEvent *>(&QDateTimeEdit_Adaptor::cbs_dragEnterEvent_2109_0, arg1);
    } else {
      QDateTimeEdit::dragEnterEvent(arg1);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::dragLeaveEvent(QDragLeaveEvent *)
  void cbs_dragLeaveEvent_2092_0(QDragLeaveEvent *arg1)
  {
    QDateTimeEdit::dragLeaveEvent(arg1);
  }

  virtual void dragLeaveEvent(QDragLeaveEvent *arg1)
  {
    if (cb_dragLeaveEvent_2092_0.can_issue()) {
      cb_dragLeaveEvent_2092_0.issue<QDateTimeEdit_Adaptor, QDragLeaveEvent *>(&QDateTimeEdit_Adaptor::cbs_dragLeaveEvent_2092_0, arg1);
    } else {
      QDateTimeEdit::dragLeaveEvent(arg1);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::dragMoveEvent(QDragMoveEvent *)
  void cbs_dragMoveEvent_2006_0(QDragMoveEvent *arg1)
  {
    QDateTimeEdit::dragMoveEvent(arg1);
  }

  virtual void dragMoveEvent(QDragMoveEvent *arg1)
  {
    if (cb_dragMoveEvent_2006_0.can_issue()) {
      cb_dragMoveEvent_2006_0.issue<QDateTimeEdit_Adaptor, QDragMoveEvent *>(&QDateTimeEdit_Adaptor::cbs_dragMoveEvent_2006_0, arg1);
    } else {
      QDateTimeEdit::dragMoveEvent(arg1);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::dropEvent(QDropEvent *)
  void cbs_dropEvent_1622_0(QDropEvent *arg1)
  {
    QDateTimeEdit::dropEvent(arg1);
  }

  virtual void dropEvent(QDropEvent *arg1)
  {
    if (cb_dropEvent_1622_0.can_issue()) {
      cb_dropEvent_1622_0.issue<QDateTimeEdit_Adaptor, QDropEvent *>(&QDateTimeEdit_Adaptor::cbs_dropEvent_1622_0, arg1);
    } else {
      QDateTimeEdit::dropEvent(arg1);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::enabledChange(bool)
  void cbs_enabledChange_864_0(bool arg1)
  {
    QDateTimeEdit::enabledChange(arg1);
  }

  virtual void enabledChange(bool arg1)
  {
    if (cb_enabledChange_864_0.can_issue()) {
      cb_enabledChange_864_0.issue<QDateTimeEdit_Adaptor, bool>(&QDateTimeEdit_Adaptor::cbs_enabledChange_864_0, arg1);
    } else {
      QDateTimeEdit::enabledChange(arg1);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::enterEvent(QEvent *)
  void cbs_enterEvent_1217_0(QEvent *arg1)
  {
    QDateTimeEdit::enterEvent(arg1);
  }

  virtual void enterEvent(QEvent *arg1)
  {
    if (cb_enterEvent_1217_0.can_issue()) {
      cb_enterEvent_1217_0.issue<QDateTimeEdit_Adaptor, QEvent *>(&QDateTimeEdit_Adaptor::cbs_enterEvent_1217_0, arg1);
    } else {
      QDateTimeEdit::enterEvent(arg1);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::fixup(QString &input)
  void cbs_fixup_c1330_0(QString &input) const
  {
    QDateTimeEdit::fixup(input);
  }

  virtual void fixup(QString &input) const
  {
    if (cb_fixup_c1330_0.can_issue()) {
      cb_fixup_c1330_0.issue<QDateTimeEdit_Adaptor, QString &>(&QDateTimeEdit_Adaptor::cbs_fixup_c1330_0, input);
    } else {
      QDateTimeEdit::fixup(input);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::focusInEvent(QFocusEvent *event)
  void cbs_focusInEvent_1729_0(QFocusEvent *event)
  {
    QDateTimeEdit::focusInEvent(event);
  }

  virtual void focusInEvent(QFocusEvent *event)
  {
    if (cb_focusInEvent_1729_0.can_issue()) {
      cb_focusInEvent_1729_0.issue<QDateTimeEdit_Adaptor, QFocusEvent *>(&QDateTimeEdit_Adaptor::cbs_focusInEvent_1729_0, event);
    } else {
      QDateTimeEdit::focusInEvent(event);
    }
  }

  //  [adaptor impl] bool QDateTimeEdit::focusNextPrevChild(bool next)
  bool cbs_focusNextPrevChild_864_0(bool next)
  {
    return QDateTimeEdit::focusNextPrevChild(next);
  }

  virtual bool focusNextPrevChild(bool next)
  {
    if (cb_focusNextPrevChild_864_0.can_issue()) {
      return cb_focusNextPrevChild_864_0.issue<QDateTimeEdit_Adaptor, bool, bool>(&QDateTimeEdit_Adaptor::cbs_focusNextPrevChild_864_0, next);
    } else {
      return QDateTimeEdit::focusNextPrevChild(next);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::focusOutEvent(QFocusEvent *event)
  void cbs_focusOutEvent_1729_0(QFocusEvent *event)
  {
    QDateTimeEdit::focusOutEvent(event);
  }

  virtual void focusOutEvent(QFocusEvent *event)
  {
    if (cb_focusOutEvent_1729_0.can_issue()) {
      cb_focusOutEvent_1729_0.issue<QDateTimeEdit_Adaptor, QFocusEvent *>(&QDateTimeEdit_Adaptor::cbs_focusOutEvent_1729_0, event);
    } else {
      QDateTimeEdit::focusOutEvent(event);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::fontChange(const QFont &)
  void cbs_fontChange_1801_0(const QFont &arg1)
  {
    QDateTimeEdit::fontChange(arg1);
  }

  virtual void fontChange(const QFont &arg1)
  {
    if (cb_fontChange_1801_0.can_issue()) {
      cb_fontChange_1801_0.issue<QDateTimeEdit_Adaptor, const QFont &>(&QDateTimeEdit_Adaptor::cbs_fontChange_1801_0, arg1);
    } else {
      QDateTimeEdit::fontChange(arg1);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::hideEvent(QHideEvent *event)
  void cbs_hideEvent_1595_0(QHideEvent *event)
  {
    QDateTimeEdit::hideEvent(event);
  }

  virtual void hideEvent(QHideEvent *event)
  {
    if (cb_hideEvent_1595_0.can_issue()) {
      cb_hideEvent_1595_0.issue<QDateTimeEdit_Adaptor, QHideEvent *>(&QDateTimeEdit_Adaptor::cbs_hideEvent_1595_0, event);
    } else {
      QDateTimeEdit::hideEvent(event);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::inputMethodEvent(QInputMethodEvent *)
  void cbs_inputMethodEvent_2354_0(QInputMethodEvent *arg1)
  {
    QDateTimeEdit::inputMethodEvent(arg1);
  }

  virtual void inputMethodEvent(QInputMethodEvent *arg1)
  {
    if (cb_inputMethodEvent_2354_0.can_issue()) {
      cb_inputMethodEvent_2354_0.issue<QDateTimeEdit_Adaptor, QInputMethodEvent *>(&QDateTimeEdit_Adaptor::cbs_inputMethodEvent_2354_0, arg1);
    } else {
      QDateTimeEdit::inputMethodEvent(arg1);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::keyPressEvent(QKeyEvent *event)
  void cbs_keyPressEvent_1514_0(QKeyEvent *event)
  {
    QDateTimeEdit::keyPressEvent(event);
  }

  virtual void keyPressEvent(QKeyEvent *event)
  {
    if (cb_keyPressEvent_1514_0.can_issue()) {
      cb_keyPressEvent_1514_0.issue<QDateTimeEdit_Adaptor, QKeyEvent *>(&QDateTimeEdit_Adaptor::cbs_keyPressEvent_1514_0, event);
    } else {
      QDateTimeEdit::keyPressEvent(event);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::keyReleaseEvent(QKeyEvent *event)
  void cbs_keyReleaseEvent_1514_0(QKeyEvent *event)
  {
    QDateTimeEdit::keyReleaseEvent(event);
  }

  virtual void keyReleaseEvent(QKeyEvent *event)
  {
    if (cb_keyReleaseEvent_1514_0.can_issue()) {
      cb_keyReleaseEvent_1514_0.issue<QDateTimeEdit_Adaptor, QKeyEvent *>(&QDateTimeEdit_Adaptor::cbs_keyReleaseEvent_1514_0, event);
    } else {
      QDateTimeEdit::keyReleaseEvent(event);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::languageChange()
  void cbs_languageChange_0_0()
  {
    QDateTimeEdit::languageChange();
  }

  virtual void languageChange()
  {
    if (cb_languageChange_0_0.can_issue()) {
      cb_languageChange_0_0.issue<QDateTimeEdit_Adaptor>(&QDateTimeEdit_Adaptor::cbs_languageChange_0_0);
    } else {
      QDateTimeEdit::languageChange();
    }
  }

  //  [adaptor impl] void QDateTimeEdit::leaveEvent(QEvent *)
  void cbs_leaveEvent_1217_0(QEvent *arg1)
  {
    QDateTimeEdit::leaveEvent(arg1);
  }

  virtual void leaveEvent(QEvent *arg1)
  {
    if (cb_leaveEvent_1217_0.can_issue()) {
      cb_leaveEvent_1217_0.issue<QDateTimeEdit_Adaptor, QEvent *>(&QDateTimeEdit_Adaptor::cbs_leaveEvent_1217_0, arg1);
    } else {
      QDateTimeEdit::leaveEvent(arg1);
    }
  }

  //  [adaptor impl] int QDateTimeEdit::metric(QPaintDevice::PaintDeviceMetric)
  int cbs_metric_c3445_0(const qt_gsi::Converter<QPaintDevice::PaintDeviceMetric>::target_type & arg1) const
  {
    return QDateTimeEdit::metric(qt_gsi::QtToCppAdaptor<QPaintDevice::PaintDeviceMetric>(arg1).cref());
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric arg1) const
  {
    if (cb_metric_c3445_0.can_issue()) {
      return cb_metric_c3445_0.issue<QDateTimeEdit_Adaptor, int, const qt_gsi::Converter<QPaintDevice::PaintDeviceMetric>::target_type &>(&QDateTimeEdit_Adaptor::cbs_metric_c3445_0, qt_gsi::CppToQtAdaptor<QPaintDevice::PaintDeviceMetric>(arg1));
    } else {
      return QDateTimeEdit::metric(arg1);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::mouseDoubleClickEvent(QMouseEvent *)
  void cbs_mouseDoubleClickEvent_1738_0(QMouseEvent *arg1)
  {
    QDateTimeEdit::mouseDoubleClickEvent(arg1);
  }

  virtual void mouseDoubleClickEvent(QMouseEvent *arg1)
  {
    if (cb_mouseDoubleClickEvent_1738_0.can_issue()) {
      cb_mouseDoubleClickEvent_1738_0.issue<QDateTimeEdit_Adaptor, QMouseEvent *>(&QDateTimeEdit_Adaptor::cbs_mouseDoubleClickEvent_1738_0, arg1);
    } else {
      QDateTimeEdit::mouseDoubleClickEvent(arg1);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::mouseMoveEvent(QMouseEvent *event)
  void cbs_mouseMoveEvent_1738_0(QMouseEvent *event)
  {
    QDateTimeEdit::mouseMoveEvent(event);
  }

  virtual void mouseMoveEvent(QMouseEvent *event)
  {
    if (cb_mouseMoveEvent_1738_0.can_issue()) {
      cb_mouseMoveEvent_1738_0.issue<QDateTimeEdit_Adaptor, QMouseEvent *>(&QDateTimeEdit_Adaptor::cbs_mouseMoveEvent_1738_0, event);
    } else {
      QDateTimeEdit::mouseMoveEvent(event);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::mousePressEvent(QMouseEvent *event)
  void cbs_mousePressEvent_1738_0(QMouseEvent *event)
  {
    QDateTimeEdit::mousePressEvent(event);
  }

  virtual void mousePressEvent(QMouseEvent *event)
  {
    if (cb_mousePressEvent_1738_0.can_issue()) {
      cb_mousePressEvent_1738_0.issue<QDateTimeEdit_Adaptor, QMouseEvent *>(&QDateTimeEdit_Adaptor::cbs_mousePressEvent_1738_0, event);
    } else {
      QDateTimeEdit::mousePressEvent(event);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::mouseReleaseEvent(QMouseEvent *event)
  void cbs_mouseReleaseEvent_1738_0(QMouseEvent *event)
  {
    QDateTimeEdit::mouseReleaseEvent(event);
  }

  virtual void mouseReleaseEvent(QMouseEvent *event)
  {
    if (cb_mouseReleaseEvent_1738_0.can_issue()) {
      cb_mouseReleaseEvent_1738_0.issue<QDateTimeEdit_Adaptor, QMouseEvent *>(&QDateTimeEdit_Adaptor::cbs_mouseReleaseEvent_1738_0, event);
    } else {
      QDateTimeEdit::mouseReleaseEvent(event);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::moveEvent(QMoveEvent *)
  void cbs_moveEvent_1624_0(QMoveEvent *arg1)
  {
    QDateTimeEdit::moveEvent(arg1);
  }

  virtual void moveEvent(QMoveEvent *arg1)
  {
    if (cb_moveEvent_1624_0.can_issue()) {
      cb_moveEvent_1624_0.issue<QDateTimeEdit_Adaptor, QMoveEvent *>(&QDateTimeEdit_Adaptor::cbs_moveEvent_1624_0, arg1);
    } else {
      QDateTimeEdit::moveEvent(arg1);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::paintEvent(QPaintEvent *event)
  void cbs_paintEvent_1725_0(QPaintEvent *event)
  {
    QDateTimeEdit::paintEvent(event);
  }

  virtual void paintEvent(QPaintEvent *event)
  {
    if (cb_paintEvent_1725_0.can_issue()) {
      cb_paintEvent_1725_0.issue<QDateTimeEdit_Adaptor, QPaintEvent *>(&QDateTimeEdit_Adaptor::cbs_paintEvent_1725_0, event);
    } else {
      QDateTimeEdit::paintEvent(event);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::paletteChange(const QPalette &)
  void cbs_paletteChange_2113_0(const QPalette &arg1)
  {
    QDateTimeEdit::paletteChange(arg1);
  }

  virtual void paletteChange(const QPalette &arg1)
  {
    if (cb_paletteChange_2113_0.can_issue()) {
      cb_paletteChange_2113_0.issue<QDateTimeEdit_Adaptor, const QPalette &>(&QDateTimeEdit_Adaptor::cbs_paletteChange_2113_0, arg1);
    } else {
      QDateTimeEdit::paletteChange(arg1);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::resizeEvent(QResizeEvent *event)
  void cbs_resizeEvent_1843_0(QResizeEvent *event)
  {
    QDateTimeEdit::resizeEvent(event);
  }

  virtual void resizeEvent(QResizeEvent *event)
  {
    if (cb_resizeEvent_1843_0.can_issue()) {
      cb_resizeEvent_1843_0.issue<QDateTimeEdit_Adaptor, QResizeEvent *>(&QDateTimeEdit_Adaptor::cbs_resizeEvent_1843_0, event);
    } else {
      QDateTimeEdit::resizeEvent(event);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::showEvent(QShowEvent *event)
  void cbs_showEvent_1634_0(QShowEvent *event)
  {
    QDateTimeEdit::showEvent(event);
  }

  virtual void showEvent(QShowEvent *event)
  {
    if (cb_showEvent_1634_0.can_issue()) {
      cb_showEvent_1634_0.issue<QDateTimeEdit_Adaptor, QShowEvent *>(&QDateTimeEdit_Adaptor::cbs_showEvent_1634_0, event);
    } else {
      QDateTimeEdit::showEvent(event);
    }
  }

  //  [adaptor impl] QFlags<QAbstractSpinBox::StepEnabledFlag> QDateTimeEdit::stepEnabled()
  qt_gsi::Converter<QFlags<QAbstractSpinBox::StepEnabledFlag> >::target_type cbs_stepEnabled_c0_0() const
  {
    return qt_gsi::CppToQtAdaptor<QFlags<QAbstractSpinBox::StepEnabledFlag> >(QDateTimeEdit::stepEnabled());
  }

  virtual QFlags<QAbstractSpinBox::StepEnabledFlag> stepEnabled() const
  {
    if (cb_stepEnabled_c0_0.can_issue()) {
      return qt_gsi::QtToCppAdaptor<QFlags<QAbstractSpinBox::StepEnabledFlag> >(cb_stepEnabled_c0_0.issue<QDateTimeEdit_Adaptor, qt_gsi::Converter<QFlags<QAbstractSpinBox::StepEnabledFlag> >::target_type>(&QDateTimeEdit_Adaptor::cbs_stepEnabled_c0_0)).cref();
    } else {
      return QDateTimeEdit::stepEnabled();
    }
  }

  //  [adaptor impl] void QDateTimeEdit::styleChange(QStyle &)
  void cbs_styleChange_1228_0(QStyle &arg1)
  {
    QDateTimeEdit::styleChange(arg1);
  }

  virtual void styleChange(QStyle &arg1)
  {
    if (cb_styleChange_1228_0.can_issue()) {
      cb_styleChange_1228_0.issue<QDateTimeEdit_Adaptor, QStyle &>(&QDateTimeEdit_Adaptor::cbs_styleChange_1228_0, arg1);
    } else {
      QDateTimeEdit::styleChange(arg1);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::tabletEvent(QTabletEvent *)
  void cbs_tabletEvent_1821_0(QTabletEvent *arg1)
  {
    QDateTimeEdit::tabletEvent(arg1);
  }

  virtual void tabletEvent(QTabletEvent *arg1)
  {
    if (cb_tabletEvent_1821_0.can_issue()) {
      cb_tabletEvent_1821_0.issue<QDateTimeEdit_Adaptor, QTabletEvent *>(&QDateTimeEdit_Adaptor::cbs_tabletEvent_1821_0, arg1);
    } else {
      QDateTimeEdit::tabletEvent(arg1);
    }
  }

  //  [adaptor impl] QString QDateTimeEdit::textFromDateTime(const QDateTime &dt)
  QString cbs_textFromDateTime_c2175_0(const QDateTime &dt) const
  {
    return QDateTimeEdit::textFromDateTime(dt);
  }

  virtual QString textFromDateTime(const QDateTime &dt) const
  {
    if (cb_textFromDateTime_c2175_0.can_issue()) {
      return cb_textFromDateTime_c2175_0.issue<QDateTimeEdit_Adaptor, QString, const QDateTime &>(&QDateTimeEdit_Adaptor::cbs_textFromDateTime_c2175_0, dt);
    } else {
      return QDateTimeEdit::textFromDateTime(dt);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::timerEvent(QTimerEvent *event)
  void cbs_timerEvent_1730_0(QTimerEvent *event)
  {
    QDateTimeEdit::timerEvent(event);
  }

  virtual void timerEvent(QTimerEvent *event)
  {
    if (cb_timerEvent_1730_0.can_issue()) {
      cb_timerEvent_1730_0.issue<QDateTimeEdit_Adaptor, QTimerEvent *>(&QDateTimeEdit_Adaptor::cbs_timerEvent_1730_0, event);
    } else {
      QDateTimeEdit::timerEvent(event);
    }
  }

  //  [adaptor impl] QValidator::State QDateTimeEdit::validate(QString &input, int &pos)
  qt_gsi::Converter<QValidator::State>::target_type cbs_validate_c2171_0(QString &input, int &pos) const
  {
    return qt_gsi::CppToQtAdaptor<QValidator::State>(QDateTimeEdit::validate(input, pos));
  }

  virtual QValidator::State validate(QString &input, int &pos) const
  {
    if (cb_validate_c2171_0.can_issue()) {
      return qt_gsi::QtToCppAdaptor<QValidator::State>(cb_validate_c2171_0.issue<QDateTimeEdit_Adaptor, qt_gsi::Converter<QValidator::State>::target_type, QString &, int &>(&QDateTimeEdit_Adaptor::cbs_validate_c2171_0, input, pos)).cref();
    } else {
      return QDateTimeEdit::validate(input, pos);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::wheelEvent(QWheelEvent *event)
  void cbs_wheelEvent_1718_0(QWheelEvent *event)
  {
    QDateTimeEdit::wheelEvent(event);
  }

  virtual void wheelEvent(QWheelEvent *event)
  {
    if (cb_wheelEvent_1718_0.can_issue()) {
      cb_wheelEvent_1718_0.issue<QDateTimeEdit_Adaptor, QWheelEvent *>(&QDateTimeEdit_Adaptor::cbs_wheelEvent_1718_0, event);
    } else {
      QDateTimeEdit::wheelEvent(event);
    }
  }

  //  [adaptor impl] void QDateTimeEdit::windowActivationChange(bool)
  void cbs_windowActivationChange_864_0(bool arg1)
  {
    QDateTimeEdit::windowActivationChange(arg1);
  }

  virtual void windowActivationChange(bool arg1)
  {
    if (cb_windowActivationChange_864_0.can_issue()) {
      cb_windowActivationChange_864_0.issue<QDateTimeEdit_Adaptor, bool>(&QDateTimeEdit_Adaptor::cbs_windowActivationChange_864_0, arg1);
    } else {
      QDateTimeEdit::windowActivationChange(arg1);
    }
  }

  gsi::Callback cb_clear_0_0;
  gsi::Callback cb_event_1217_0;
  gsi::Callback cb_eventFilter_2411_0;
  gsi::Callback cb_heightForWidth_c767_0;
  gsi::Callback cb_inputMethodQuery_c2420_0;
  gsi::Callback cb_minimumSizeHint_c0_0;
  gsi::Callback cb_paintEngine_c0_0;
  gsi::Callback cb_setVisible_864_0;
  gsi::Callback cb_sizeHint_c0_0;
  gsi::Callback cb_stepBy_767_0;
  gsi::Callback cb_actionEvent_1823_0;
  gsi::Callback cb_changeEvent_1217_0;
  gsi::Callback cb_childEvent_1701_0;
  gsi::Callback cb_closeEvent_1719_0;
  gsi::Callback cb_contextMenuEvent_2363_0;
  gsi::Callback cb_customEvent_1217_0;
  gsi::Callback cb_dateTimeFromText_c2025_0;
  gsi::Callback cb_disconnectNotify_1731_0;
  gsi::Callback cb_dragEnterEvent_2109_0;
  gsi::Callback cb_dragLeaveEvent_2092_0;
  gsi::Callback cb_dragMoveEvent_2006_0;
  gsi::Callback cb_dropEvent_1622_0;
  gsi::Callback cb_enabledChange_864_0;
  gsi::Callback cb_enterEvent_1217_0;
  gsi::Callback cb_fixup_c1330_0;
  gsi::Callback cb_focusInEvent_1729_0;
  gsi::Callback cb_focusNextPrevChild_864_0;
  gsi::Callback cb_focusOutEvent_1729_0;
  gsi::Callback cb_fontChange_1801_0;
  gsi::Callback cb_hideEvent_1595_0;
  gsi::Callback cb_inputMethodEvent_2354_0;
  gsi::Callback cb_keyPressEvent_1514_0;
  gsi::Callback cb_keyReleaseEvent_1514_0;
  gsi::Callback cb_languageChange_0_0;
  gsi::Callback cb_leaveEvent_1217_0;
  gsi::Callback cb_metric_c3445_0;
  gsi::Callback cb_mouseDoubleClickEvent_1738_0;
  gsi::Callback cb_mouseMoveEvent_1738_0;
  gsi::Callback cb_mousePressEvent_1738_0;
  gsi::Callback cb_mouseReleaseEvent_1738_0;
  gsi::Callback cb_moveEvent_1624_0;
  gsi::Callback cb_paintEvent_1725_0;
  gsi::Callback cb_paletteChange_2113_0;
  gsi::Callback cb_resizeEvent_1843_0;
  gsi::Callback cb_showEvent_1634_0;
  gsi::Callback cb_stepEnabled_c0_0;
  gsi::Callback cb_styleChange_1228_0;
  gsi::Callback cb_tabletEvent_1821_0;
  gsi::Callback cb_textFromDateTime_c2175_0;
  gsi::Callback cb_timerEvent_1730_0;
  gsi::Callback cb_validate_c2171_0;
  gsi::Callback cb_wheelEvent_1718_0;
  gsi::Callback cb_windowActivationChange_864_0;
};

QDateTimeEdit_Adaptor::~QDateTimeEdit_Adaptor() { }

//  Constructor QDateTimeEdit::QDateTimeEdit(QWidget *parent) (adaptor class)

static void _init_ctor_QDateTimeEdit_Adaptor_1315 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("parent", true, "0");
  decl->add_arg<QWidget * > (argspec_0);
  decl->set_return_new<QDateTimeEdit_Adaptor *> ();
}

static void _call_ctor_QDateTimeEdit_Adaptor_1315 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QWidget *arg1 = args ? args.read<QWidget * > () : (QWidget *)(0);
  ret.write<QDateTimeEdit_Adaptor *> (new QDateTimeEdit_Adaptor (arg1));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QDateTimeEdit_Adaptor_1315 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QDateTimeEdit::QDateTimeEdit(QWidget *parent)\nThis method creates an object of class QDateTimeEdit.", &_init_ctor_QDateTimeEdit_Adaptor_1315, &_call_ctor_QDateTimeEdit_Adaptor_1315);
}

//  Constructor QDateTimeEdit::QDateTimeEdit(const QDateTime &dt, QWidget *parent) (adaptor class)

static void _init_ctor_QDateTimeEdit_Adaptor_3382 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("dt");
  decl->add_arg<const QDateTime & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("parent", true, "0");
  decl->add_arg<QWidget * > (argspec_1);
  decl->set_return_new<QDateTimeEdit_Adaptor *> ();
}

static void _call_ctor_QDateTimeEdit_Adaptor_3382 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QDateTime &arg1 = args.read<const QDateTime & > ();
  QWidget *arg2 = args ? args.read<QWidget * > () : (QWidget *)(0);
  ret.write<QDateTimeEdit_Adaptor *> (new QDateTimeEdit_Adaptor (arg1, arg2));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QDateTimeEdit_Adaptor_3382 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QDateTimeEdit::QDateTimeEdit(const QDateTime &dt, QWidget *parent)\nThis method creates an object of class QDateTimeEdit.", &_init_ctor_QDateTimeEdit_Adaptor_3382, &_call_ctor_QDateTimeEdit_Adaptor_3382);
}

//  Constructor QDateTimeEdit::QDateTimeEdit(const QDate &d, QWidget *parent) (adaptor class)

static void _init_ctor_QDateTimeEdit_Adaptor_2983 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("d");
  decl->add_arg<const QDate & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("parent", true, "0");
  decl->add_arg<QWidget * > (argspec_1);
  decl->set_return_new<QDateTimeEdit_Adaptor *> ();
}

static void _call_ctor_QDateTimeEdit_Adaptor_2983 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QDate &arg1 = args.read<const QDate & > ();
  QWidget *arg2 = args ? args.read<QWidget * > () : (QWidget *)(0);
  ret.write<QDateTimeEdit_Adaptor *> (new QDateTimeEdit_Adaptor (arg1, arg2));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QDateTimeEdit_Adaptor_2983 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QDateTimeEdit::QDateTimeEdit(const QDate &d, QWidget *parent)\nThis method creates an object of class QDateTimeEdit.", &_init_ctor_QDateTimeEdit_Adaptor_2983, &_call_ctor_QDateTimeEdit_Adaptor_2983);
}

//  Constructor QDateTimeEdit::QDateTimeEdit(const QTime &t, QWidget *parent) (adaptor class)

static void _init_ctor_QDateTimeEdit_Adaptor_3000 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("t");
  decl->add_arg<const QTime & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("parent", true, "0");
  decl->add_arg<QWidget * > (argspec_1);
  decl->set_return_new<QDateTimeEdit_Adaptor *> ();
}

static void _call_ctor_QDateTimeEdit_Adaptor_3000 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QTime &arg1 = args.read<const QTime & > ();
  QWidget *arg2 = args ? args.read<QWidget * > () : (QWidget *)(0);
  ret.write<QDateTimeEdit_Adaptor *> (new QDateTimeEdit_Adaptor (arg1, arg2));
}

static qt_gsi::GenericStaticMethod *_create_ctor_QDateTimeEdit_Adaptor_3000 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QDateTimeEdit::QDateTimeEdit(const QTime &t, QWidget *parent)\nThis method creates an object of class QDateTimeEdit.", &_init_ctor_QDateTimeEdit_Adaptor_3000, &_call_ctor_QDateTimeEdit_Adaptor_3000);
}

// void QDateTimeEdit::create(WId, bool initializeWindow, bool destroyOldWindow)

static void _init_fp_create_2208 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1", true, "0");
  decl->add_arg<const qt_gsi::Converter<WId>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("initializeWindow", true, "true");
  decl->add_arg<bool > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("destroyOldWindow", true, "true");
  decl->add_arg<bool > (argspec_2);
  decl->set_return<void > ();
}

static void _call_fp_create_2208 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  tl::Heap heap;
  const qt_gsi::Converter<WId>::target_type & arg1 = args ? args.read<const qt_gsi::Converter<WId>::target_type & > () : (const qt_gsi::Converter<WId>::target_type &)(qt_gsi::CppToQtReadAdaptor<WId>(heap, 0));
  bool arg2 = args ? args.read<bool > () : (bool)(true);
  bool arg3 = args ? args.read<bool > () : (bool)(true);
  ((QDateTimeEdit_Adaptor *)cls)->fp_QDateTimeEdit_create_2208 (arg1, arg2, arg3);
}

static qt_gsi::GenericMethod*_create_fp_create_2208 ()
{
  return new qt_gsi::GenericMethod("*qt_create", "@brief Method void QDateTimeEdit::create(WId, bool initializeWindow, bool destroyOldWindow)\nThis method is protected and can only be called from inside a derived class.", false, &_init_fp_create_2208, &_call_fp_create_2208);
}


// void QDateTimeEdit::destroy(bool destroyWindow, bool destroySubWindows)

static void _init_fp_destroy_1620 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("destroyWindow", true, "true");
  decl->add_arg<bool > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("destroySubWindows", true, "true");
  decl->add_arg<bool > (argspec_1);
  decl->set_return<void > ();
}

static void _call_fp_destroy_1620 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args ? args.read<bool > () : (bool)(true);
  bool arg2 = args ? args.read<bool > () : (bool)(true);
  ((QDateTimeEdit_Adaptor *)cls)->fp_QDateTimeEdit_destroy_1620 (arg1, arg2);
}

static qt_gsi::GenericMethod*_create_fp_destroy_1620 ()
{
  return new qt_gsi::GenericMethod("*qt_destroy", "@brief Method void QDateTimeEdit::destroy(bool destroyWindow, bool destroySubWindows)\nThis method is protected and can only be called from inside a derived class.", false, &_init_fp_destroy_1620, &_call_fp_destroy_1620);
}


// bool QDateTimeEdit::focusNextChild()

static void _init_fp_focusNextChild_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_fp_focusNextChild_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QDateTimeEdit_Adaptor *)cls)->fp_QDateTimeEdit_focusNextChild_0 ());
}

static qt_gsi::GenericMethod*_create_fp_focusNextChild_0 ()
{
  return new qt_gsi::GenericMethod("*focusNextChild", "@brief Method bool QDateTimeEdit::focusNextChild()\nThis method is protected and can only be called from inside a derived class.", false, &_init_fp_focusNextChild_0, &_call_fp_focusNextChild_0);
}


// bool QDateTimeEdit::focusPreviousChild()

static void _init_fp_focusPreviousChild_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_fp_focusPreviousChild_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QDateTimeEdit_Adaptor *)cls)->fp_QDateTimeEdit_focusPreviousChild_0 ());
}

static qt_gsi::GenericMethod*_create_fp_focusPreviousChild_0 ()
{
  return new qt_gsi::GenericMethod("*focusPreviousChild", "@brief Method bool QDateTimeEdit::focusPreviousChild()\nThis method is protected and can only be called from inside a derived class.", false, &_init_fp_focusPreviousChild_0, &_call_fp_focusPreviousChild_0);
}


// void QDateTimeEdit::initStyleOption(QStyleOptionSpinBox *option)

static void _init_fp_initStyleOption_c2572 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("option");
  decl->add_arg<QStyleOptionSpinBox * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_fp_initStyleOption_c2572 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QStyleOptionSpinBox *arg1 = args.read<QStyleOptionSpinBox * > ();
  ((QDateTimeEdit_Adaptor *)cls)->fp_QDateTimeEdit_initStyleOption_c2572 (arg1);
}

static qt_gsi::GenericMethod*_create_fp_initStyleOption_c2572 ()
{
  return new qt_gsi::GenericMethod("*initStyleOption", "@brief Method void QDateTimeEdit::initStyleOption(QStyleOptionSpinBox *option)\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_initStyleOption_c2572, &_call_fp_initStyleOption_c2572);
}


// QLineEdit *QDateTimeEdit::lineEdit()

static void _init_fp_lineEdit_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QLineEdit * > ();
}

static void _call_fp_lineEdit_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QLineEdit * > ((QLineEdit *)((QDateTimeEdit_Adaptor *)cls)->fp_QDateTimeEdit_lineEdit_c0 ());
}

static qt_gsi::GenericMethod*_create_fp_lineEdit_c0 ()
{
  return new qt_gsi::GenericMethod("*lineEdit", "@brief Method QLineEdit *QDateTimeEdit::lineEdit()\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_lineEdit_c0, &_call_fp_lineEdit_c0);
}


// int QDateTimeEdit::receivers(const char *signal)

static void _init_fp_receivers_c1731 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("signal");
  decl->add_arg<const char * > (argspec_0);
  decl->set_return<int > ();
}

static void _call_fp_receivers_c1731 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  ret.write<int > ((int)((QDateTimeEdit_Adaptor *)cls)->fp_QDateTimeEdit_receivers_c1731 (arg1));
}

static qt_gsi::GenericMethod*_create_fp_receivers_c1731 ()
{
  return new qt_gsi::GenericMethod("*receivers", "@brief Method int QDateTimeEdit::receivers(const char *signal)\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_receivers_c1731, &_call_fp_receivers_c1731);
}


// void QDateTimeEdit::resetInputContext()

static void _init_fp_resetInputContext_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_fp_resetInputContext_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QDateTimeEdit_Adaptor *)cls)->fp_QDateTimeEdit_resetInputContext_0 ();
}

static qt_gsi::GenericMethod*_create_fp_resetInputContext_0 ()
{
  return new qt_gsi::GenericMethod("*resetInputContext", "@brief Method void QDateTimeEdit::resetInputContext()\nThis method is protected and can only be called from inside a derived class.", false, &_init_fp_resetInputContext_0, &_call_fp_resetInputContext_0);
}


// QObject *QDateTimeEdit::sender()

static void _init_fp_sender_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QObject * > ();
}

static void _call_fp_sender_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QObject * > ((QObject *)((QDateTimeEdit_Adaptor *)cls)->fp_QDateTimeEdit_sender_c0 ());
}

static qt_gsi::GenericMethod*_create_fp_sender_c0 ()
{
  return new qt_gsi::GenericMethod("*sender", "@brief Method QObject *QDateTimeEdit::sender()\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_sender_c0, &_call_fp_sender_c0);
}


// void QDateTimeEdit::setLineEdit(QLineEdit *edit)

static void _init_fp_setLineEdit_1485 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("edit");
  decl->add_arg<QLineEdit * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_fp_setLineEdit_1485 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QLineEdit *arg1 = args.read<QLineEdit * > ();
  ((QDateTimeEdit_Adaptor *)cls)->fp_QDateTimeEdit_setLineEdit_1485 (arg1);
}

static qt_gsi::GenericMethod*_create_fp_setLineEdit_1485 ()
{
  return new qt_gsi::GenericMethod("*setLineEdit", "@brief Method void QDateTimeEdit::setLineEdit(QLineEdit *edit)\nThis method is protected and can only be called from inside a derived class.", false, &_init_fp_setLineEdit_1485, &_call_fp_setLineEdit_1485);
}


// void QDateTimeEdit::updateMicroFocus()

static void _init_fp_updateMicroFocus_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_fp_updateMicroFocus_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QDateTimeEdit_Adaptor *)cls)->fp_QDateTimeEdit_updateMicroFocus_0 ();
}

static qt_gsi::GenericMethod*_create_fp_updateMicroFocus_0 ()
{
  return new qt_gsi::GenericMethod("*updateMicroFocus", "@brief Method void QDateTimeEdit::updateMicroFocus()\nThis method is protected and can only be called from inside a derived class.", false, &_init_fp_updateMicroFocus_0, &_call_fp_updateMicroFocus_0);
}


// void QDateTimeEdit::clear()

static void _init_cbs_clear_0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_cbs_clear_0_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QDateTimeEdit_Adaptor *)cls)->cbs_clear_0_0 ();
}

static void _set_callback_cbs_clear_0_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_clear_0_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_clear_0_0 ()
{
  return new qt_gsi::GenericMethod ("clear", "@hide", false, &_init_cbs_clear_0_0, &_call_cbs_clear_0_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_clear_0_0 ()
{
  return new qt_gsi::GenericMethod ("clear", "@brief Virtual method void QDateTimeEdit::clear()\nThis method can be reimplemented in a derived class.", false, &_init_cbs_clear_0_0, &_call_cbs_clear_0_0, &_set_callback_cbs_clear_0_0);
}


// bool QDateTimeEdit::event(QEvent *event)

static void _init_cbs_event_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_event_1217_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QEvent *arg1 = args.read<QEvent * > ();
  ret.write<bool > ((bool)((QDateTimeEdit_Adaptor *)cls)->cbs_event_1217_0 (arg1));
}

static void _set_callback_cbs_event_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_event_1217_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_event_1217_0 ()
{
  return new qt_gsi::GenericMethod ("event", "@hide", false, &_init_cbs_event_1217_0, &_call_cbs_event_1217_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_event_1217_0 ()
{
  return new qt_gsi::GenericMethod ("event", "@brief Virtual method bool QDateTimeEdit::event(QEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_event_1217_0, &_call_cbs_event_1217_0, &_set_callback_cbs_event_1217_0);
}


// bool QDateTimeEdit::eventFilter(QObject *, QEvent *)

static void _init_cbs_eventFilter_2411_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QObject * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("arg2");
  decl->add_arg<QEvent * > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_cbs_eventFilter_2411_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QObject *arg1 = args.read<QObject * > ();
  QEvent *arg2 = args.read<QEvent * > ();
  ret.write<bool > ((bool)((QDateTimeEdit_Adaptor *)cls)->cbs_eventFilter_2411_0 (arg1, arg2));
}

static void _set_callback_cbs_eventFilter_2411_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_eventFilter_2411_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_eventFilter_2411_0 ()
{
  return new qt_gsi::GenericMethod ("eventFilter", "@hide", false, &_init_cbs_eventFilter_2411_0, &_call_cbs_eventFilter_2411_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_eventFilter_2411_0 ()
{
  return new qt_gsi::GenericMethod ("eventFilter", "@brief Virtual method bool QDateTimeEdit::eventFilter(QObject *, QEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_eventFilter_2411_0, &_call_cbs_eventFilter_2411_0, &_set_callback_cbs_eventFilter_2411_0);
}


// int QDateTimeEdit::heightForWidth(int)

static void _init_cbs_heightForWidth_c767_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<int > (argspec_0);
  decl->set_return<int > ();
}

static void _call_cbs_heightForWidth_c767_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ret.write<int > ((int)((QDateTimeEdit_Adaptor *)cls)->cbs_heightForWidth_c767_0 (arg1));
}

static void _set_callback_cbs_heightForWidth_c767_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_heightForWidth_c767_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_heightForWidth_c767_0 ()
{
  return new qt_gsi::GenericMethod ("heightForWidth", "@hide", true, &_init_cbs_heightForWidth_c767_0, &_call_cbs_heightForWidth_c767_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_heightForWidth_c767_0 ()
{
  return new qt_gsi::GenericMethod ("heightForWidth", "@brief Virtual method int QDateTimeEdit::heightForWidth(int)\nThis method can be reimplemented in a derived class.", true, &_init_cbs_heightForWidth_c767_0, &_call_cbs_heightForWidth_c767_0, &_set_callback_cbs_heightForWidth_c767_0);
}


// QVariant QDateTimeEdit::inputMethodQuery(Qt::InputMethodQuery)

static void _init_cbs_inputMethodQuery_c2420_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const qt_gsi::Converter<Qt::InputMethodQuery>::target_type & > (argspec_0);
  decl->set_return<QVariant > ();
}

static void _call_cbs_inputMethodQuery_c2420_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<Qt::InputMethodQuery>::target_type & arg1 = args.read<const qt_gsi::Converter<Qt::InputMethodQuery>::target_type & > ();
  ret.write<QVariant > ((QVariant)((QDateTimeEdit_Adaptor *)cls)->cbs_inputMethodQuery_c2420_0 (arg1));
}

static void _set_callback_cbs_inputMethodQuery_c2420_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_inputMethodQuery_c2420_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_inputMethodQuery_c2420_0 ()
{
  return new qt_gsi::GenericMethod ("inputMethodQuery", "@hide", true, &_init_cbs_inputMethodQuery_c2420_0, &_call_cbs_inputMethodQuery_c2420_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_inputMethodQuery_c2420_0 ()
{
  return new qt_gsi::GenericMethod ("inputMethodQuery", "@brief Virtual method QVariant QDateTimeEdit::inputMethodQuery(Qt::InputMethodQuery)\nThis method can be reimplemented in a derived class.", true, &_init_cbs_inputMethodQuery_c2420_0, &_call_cbs_inputMethodQuery_c2420_0, &_set_callback_cbs_inputMethodQuery_c2420_0);
}


// QSize QDateTimeEdit::minimumSizeHint()

static void _init_cbs_minimumSizeHint_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QSize > ();
}

static void _call_cbs_minimumSizeHint_c0_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QSize > ((QSize)((QDateTimeEdit_Adaptor *)cls)->cbs_minimumSizeHint_c0_0 ());
}

static void _set_callback_cbs_minimumSizeHint_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_minimumSizeHint_c0_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_minimumSizeHint_c0_0 ()
{
  return new qt_gsi::GenericMethod ("minimumSizeHint", "@hide", true, &_init_cbs_minimumSizeHint_c0_0, &_call_cbs_minimumSizeHint_c0_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_minimumSizeHint_c0_0 ()
{
  return new qt_gsi::GenericMethod ("minimumSizeHint", "@brief Virtual method QSize QDateTimeEdit::minimumSizeHint()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_minimumSizeHint_c0_0, &_call_cbs_minimumSizeHint_c0_0, &_set_callback_cbs_minimumSizeHint_c0_0);
}


// QPaintEngine *QDateTimeEdit::paintEngine()

static void _init_cbs_paintEngine_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QPaintEngine * > ();
}

static void _call_cbs_paintEngine_c0_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QPaintEngine * > ((QPaintEngine *)((QDateTimeEdit_Adaptor *)cls)->cbs_paintEngine_c0_0 ());
}

static void _set_callback_cbs_paintEngine_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_paintEngine_c0_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_paintEngine_c0_0 ()
{
  return new qt_gsi::GenericMethod ("paintEngine", "@hide", true, &_init_cbs_paintEngine_c0_0, &_call_cbs_paintEngine_c0_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_paintEngine_c0_0 ()
{
  return new qt_gsi::GenericMethod ("paintEngine", "@brief Virtual method QPaintEngine *QDateTimeEdit::paintEngine()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_paintEngine_c0_0, &_call_cbs_paintEngine_c0_0, &_set_callback_cbs_paintEngine_c0_0);
}


// void QDateTimeEdit::setVisible(bool visible)

static void _init_cbs_setVisible_864_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("visible");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_setVisible_864_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_setVisible_864_0 (arg1);
}

static void _set_callback_cbs_setVisible_864_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_setVisible_864_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_setVisible_864_0 ()
{
  return new qt_gsi::GenericMethod ("setVisible", "@hide", false, &_init_cbs_setVisible_864_0, &_call_cbs_setVisible_864_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_setVisible_864_0 ()
{
  return new qt_gsi::GenericMethod ("setVisible", "@brief Virtual method void QDateTimeEdit::setVisible(bool visible)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_setVisible_864_0, &_call_cbs_setVisible_864_0, &_set_callback_cbs_setVisible_864_0);
}


// QSize QDateTimeEdit::sizeHint()

static void _init_cbs_sizeHint_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QSize > ();
}

static void _call_cbs_sizeHint_c0_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QSize > ((QSize)((QDateTimeEdit_Adaptor *)cls)->cbs_sizeHint_c0_0 ());
}

static void _set_callback_cbs_sizeHint_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_sizeHint_c0_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_sizeHint_c0_0 ()
{
  return new qt_gsi::GenericMethod ("sizeHint", "@hide", true, &_init_cbs_sizeHint_c0_0, &_call_cbs_sizeHint_c0_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_sizeHint_c0_0 ()
{
  return new qt_gsi::GenericMethod ("sizeHint", "@brief Virtual method QSize QDateTimeEdit::sizeHint()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_sizeHint_c0_0, &_call_cbs_sizeHint_c0_0, &_set_callback_cbs_sizeHint_c0_0);
}


// void QDateTimeEdit::stepBy(int steps)

static void _init_cbs_stepBy_767_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("steps");
  decl->add_arg<int > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_stepBy_767_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_stepBy_767_0 (arg1);
}

static void _set_callback_cbs_stepBy_767_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_stepBy_767_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_stepBy_767_0 ()
{
  return new qt_gsi::GenericMethod ("stepBy", "@hide", false, &_init_cbs_stepBy_767_0, &_call_cbs_stepBy_767_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_stepBy_767_0 ()
{
  return new qt_gsi::GenericMethod ("stepBy", "@brief Virtual method void QDateTimeEdit::stepBy(int steps)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_stepBy_767_0, &_call_cbs_stepBy_767_0, &_set_callback_cbs_stepBy_767_0);
}


// void QDateTimeEdit::actionEvent(QActionEvent *)

static void _init_cbs_actionEvent_1823_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QActionEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_actionEvent_1823_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QActionEvent *arg1 = args.read<QActionEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_actionEvent_1823_0 (arg1);
}

static void _set_callback_cbs_actionEvent_1823_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_actionEvent_1823_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_actionEvent_1823_0 ()
{
  return new qt_gsi::GenericMethod ("*actionEvent", "@hide", false, &_init_cbs_actionEvent_1823_0, &_call_cbs_actionEvent_1823_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_actionEvent_1823_0 ()
{
  return new qt_gsi::GenericMethod ("*actionEvent", "@brief Virtual method void QDateTimeEdit::actionEvent(QActionEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_actionEvent_1823_0, &_call_cbs_actionEvent_1823_0, &_set_callback_cbs_actionEvent_1823_0);
}


// void QDateTimeEdit::changeEvent(QEvent *event)

static void _init_cbs_changeEvent_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_changeEvent_1217_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QEvent *arg1 = args.read<QEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_changeEvent_1217_0 (arg1);
}

static void _set_callback_cbs_changeEvent_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_changeEvent_1217_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_changeEvent_1217_0 ()
{
  return new qt_gsi::GenericMethod ("*changeEvent", "@hide", false, &_init_cbs_changeEvent_1217_0, &_call_cbs_changeEvent_1217_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_changeEvent_1217_0 ()
{
  return new qt_gsi::GenericMethod ("*changeEvent", "@brief Virtual method void QDateTimeEdit::changeEvent(QEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_changeEvent_1217_0, &_call_cbs_changeEvent_1217_0, &_set_callback_cbs_changeEvent_1217_0);
}


// void QDateTimeEdit::childEvent(QChildEvent *)

static void _init_cbs_childEvent_1701_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QChildEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_childEvent_1701_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QChildEvent *arg1 = args.read<QChildEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_childEvent_1701_0 (arg1);
}

static void _set_callback_cbs_childEvent_1701_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_childEvent_1701_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_childEvent_1701_0 ()
{
  return new qt_gsi::GenericMethod ("*childEvent", "@hide", false, &_init_cbs_childEvent_1701_0, &_call_cbs_childEvent_1701_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_childEvent_1701_0 ()
{
  return new qt_gsi::GenericMethod ("*childEvent", "@brief Virtual method void QDateTimeEdit::childEvent(QChildEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_childEvent_1701_0, &_call_cbs_childEvent_1701_0, &_set_callback_cbs_childEvent_1701_0);
}


// void QDateTimeEdit::closeEvent(QCloseEvent *event)

static void _init_cbs_closeEvent_1719_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QCloseEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_closeEvent_1719_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QCloseEvent *arg1 = args.read<QCloseEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_closeEvent_1719_0 (arg1);
}

static void _set_callback_cbs_closeEvent_1719_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_closeEvent_1719_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_closeEvent_1719_0 ()
{
  return new qt_gsi::GenericMethod ("*closeEvent", "@hide", false, &_init_cbs_closeEvent_1719_0, &_call_cbs_closeEvent_1719_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_closeEvent_1719_0 ()
{
  return new qt_gsi::GenericMethod ("*closeEvent", "@brief Virtual method void QDateTimeEdit::closeEvent(QCloseEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_closeEvent_1719_0, &_call_cbs_closeEvent_1719_0, &_set_callback_cbs_closeEvent_1719_0);
}


// void QDateTimeEdit::contextMenuEvent(QContextMenuEvent *event)

static void _init_cbs_contextMenuEvent_2363_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QContextMenuEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_contextMenuEvent_2363_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QContextMenuEvent *arg1 = args.read<QContextMenuEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_contextMenuEvent_2363_0 (arg1);
}

static void _set_callback_cbs_contextMenuEvent_2363_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_contextMenuEvent_2363_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_contextMenuEvent_2363_0 ()
{
  return new qt_gsi::GenericMethod ("*contextMenuEvent", "@hide", false, &_init_cbs_contextMenuEvent_2363_0, &_call_cbs_contextMenuEvent_2363_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_contextMenuEvent_2363_0 ()
{
  return new qt_gsi::GenericMethod ("*contextMenuEvent", "@brief Virtual method void QDateTimeEdit::contextMenuEvent(QContextMenuEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_contextMenuEvent_2363_0, &_call_cbs_contextMenuEvent_2363_0, &_set_callback_cbs_contextMenuEvent_2363_0);
}


// void QDateTimeEdit::customEvent(QEvent *)

static void _init_cbs_customEvent_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_customEvent_1217_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QEvent *arg1 = args.read<QEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_customEvent_1217_0 (arg1);
}

static void _set_callback_cbs_customEvent_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_customEvent_1217_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_customEvent_1217_0 ()
{
  return new qt_gsi::GenericMethod ("*customEvent", "@hide", false, &_init_cbs_customEvent_1217_0, &_call_cbs_customEvent_1217_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_customEvent_1217_0 ()
{
  return new qt_gsi::GenericMethod ("*customEvent", "@brief Virtual method void QDateTimeEdit::customEvent(QEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_customEvent_1217_0, &_call_cbs_customEvent_1217_0, &_set_callback_cbs_customEvent_1217_0);
}


// QDateTime QDateTimeEdit::dateTimeFromText(const QString &text)

static void _init_cbs_dateTimeFromText_c2025_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("text");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<QDateTime > ();
}

static void _call_cbs_dateTimeFromText_c2025_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ret.write<QDateTime > ((QDateTime)((QDateTimeEdit_Adaptor *)cls)->cbs_dateTimeFromText_c2025_0 (arg1));
}

static void _set_callback_cbs_dateTimeFromText_c2025_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_dateTimeFromText_c2025_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_dateTimeFromText_c2025_0 ()
{
  return new qt_gsi::GenericMethod ("*dateTimeFromText", "@hide", true, &_init_cbs_dateTimeFromText_c2025_0, &_call_cbs_dateTimeFromText_c2025_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_dateTimeFromText_c2025_0 ()
{
  return new qt_gsi::GenericMethod ("*dateTimeFromText", "@brief Virtual method QDateTime QDateTimeEdit::dateTimeFromText(const QString &text)\nThis method can be reimplemented in a derived class.", true, &_init_cbs_dateTimeFromText_c2025_0, &_call_cbs_dateTimeFromText_c2025_0, &_set_callback_cbs_dateTimeFromText_c2025_0);
}


// void QDateTimeEdit::disconnectNotify(const char *signal)

static void _init_cbs_disconnectNotify_1731_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("signal");
  decl->add_arg<const char * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_disconnectNotify_1731_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const char *arg1 = args.read<const char * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_disconnectNotify_1731_0 (arg1);
}

static void _set_callback_cbs_disconnectNotify_1731_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_disconnectNotify_1731_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_disconnectNotify_1731_0 ()
{
  return new qt_gsi::GenericMethod ("*disconnectNotify", "@hide", false, &_init_cbs_disconnectNotify_1731_0, &_call_cbs_disconnectNotify_1731_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_disconnectNotify_1731_0 ()
{
  return new qt_gsi::GenericMethod ("*disconnectNotify", "@brief Virtual method void QDateTimeEdit::disconnectNotify(const char *signal)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_disconnectNotify_1731_0, &_call_cbs_disconnectNotify_1731_0, &_set_callback_cbs_disconnectNotify_1731_0);
}


// void QDateTimeEdit::dragEnterEvent(QDragEnterEvent *)

static void _init_cbs_dragEnterEvent_2109_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QDragEnterEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_dragEnterEvent_2109_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QDragEnterEvent *arg1 = args.read<QDragEnterEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_dragEnterEvent_2109_0 (arg1);
}

static void _set_callback_cbs_dragEnterEvent_2109_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_dragEnterEvent_2109_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_dragEnterEvent_2109_0 ()
{
  return new qt_gsi::GenericMethod ("*dragEnterEvent", "@hide", false, &_init_cbs_dragEnterEvent_2109_0, &_call_cbs_dragEnterEvent_2109_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_dragEnterEvent_2109_0 ()
{
  return new qt_gsi::GenericMethod ("*dragEnterEvent", "@brief Virtual method void QDateTimeEdit::dragEnterEvent(QDragEnterEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_dragEnterEvent_2109_0, &_call_cbs_dragEnterEvent_2109_0, &_set_callback_cbs_dragEnterEvent_2109_0);
}


// void QDateTimeEdit::dragLeaveEvent(QDragLeaveEvent *)

static void _init_cbs_dragLeaveEvent_2092_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QDragLeaveEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_dragLeaveEvent_2092_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QDragLeaveEvent *arg1 = args.read<QDragLeaveEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_dragLeaveEvent_2092_0 (arg1);
}

static void _set_callback_cbs_dragLeaveEvent_2092_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_dragLeaveEvent_2092_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_dragLeaveEvent_2092_0 ()
{
  return new qt_gsi::GenericMethod ("*dragLeaveEvent", "@hide", false, &_init_cbs_dragLeaveEvent_2092_0, &_call_cbs_dragLeaveEvent_2092_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_dragLeaveEvent_2092_0 ()
{
  return new qt_gsi::GenericMethod ("*dragLeaveEvent", "@brief Virtual method void QDateTimeEdit::dragLeaveEvent(QDragLeaveEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_dragLeaveEvent_2092_0, &_call_cbs_dragLeaveEvent_2092_0, &_set_callback_cbs_dragLeaveEvent_2092_0);
}


// void QDateTimeEdit::dragMoveEvent(QDragMoveEvent *)

static void _init_cbs_dragMoveEvent_2006_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QDragMoveEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_dragMoveEvent_2006_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QDragMoveEvent *arg1 = args.read<QDragMoveEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_dragMoveEvent_2006_0 (arg1);
}

static void _set_callback_cbs_dragMoveEvent_2006_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_dragMoveEvent_2006_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_dragMoveEvent_2006_0 ()
{
  return new qt_gsi::GenericMethod ("*dragMoveEvent", "@hide", false, &_init_cbs_dragMoveEvent_2006_0, &_call_cbs_dragMoveEvent_2006_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_dragMoveEvent_2006_0 ()
{
  return new qt_gsi::GenericMethod ("*dragMoveEvent", "@brief Virtual method void QDateTimeEdit::dragMoveEvent(QDragMoveEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_dragMoveEvent_2006_0, &_call_cbs_dragMoveEvent_2006_0, &_set_callback_cbs_dragMoveEvent_2006_0);
}


// void QDateTimeEdit::dropEvent(QDropEvent *)

static void _init_cbs_dropEvent_1622_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QDropEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_dropEvent_1622_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QDropEvent *arg1 = args.read<QDropEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_dropEvent_1622_0 (arg1);
}

static void _set_callback_cbs_dropEvent_1622_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_dropEvent_1622_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_dropEvent_1622_0 ()
{
  return new qt_gsi::GenericMethod ("*dropEvent", "@hide", false, &_init_cbs_dropEvent_1622_0, &_call_cbs_dropEvent_1622_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_dropEvent_1622_0 ()
{
  return new qt_gsi::GenericMethod ("*dropEvent", "@brief Virtual method void QDateTimeEdit::dropEvent(QDropEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_dropEvent_1622_0, &_call_cbs_dropEvent_1622_0, &_set_callback_cbs_dropEvent_1622_0);
}


// void QDateTimeEdit::enabledChange(bool)

static void _init_cbs_enabledChange_864_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_enabledChange_864_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_enabledChange_864_0 (arg1);
}

static void _set_callback_cbs_enabledChange_864_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_enabledChange_864_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_enabledChange_864_0 ()
{
  return new qt_gsi::GenericMethod ("*enabledChange", "@hide", false, &_init_cbs_enabledChange_864_0, &_call_cbs_enabledChange_864_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_enabledChange_864_0 ()
{
  return new qt_gsi::GenericMethod ("*enabledChange", "@brief Virtual method void QDateTimeEdit::enabledChange(bool)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_enabledChange_864_0, &_call_cbs_enabledChange_864_0, &_set_callback_cbs_enabledChange_864_0);
}


// void QDateTimeEdit::enterEvent(QEvent *)

static void _init_cbs_enterEvent_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_enterEvent_1217_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QEvent *arg1 = args.read<QEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_enterEvent_1217_0 (arg1);
}

static void _set_callback_cbs_enterEvent_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_enterEvent_1217_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_enterEvent_1217_0 ()
{
  return new qt_gsi::GenericMethod ("*enterEvent", "@hide", false, &_init_cbs_enterEvent_1217_0, &_call_cbs_enterEvent_1217_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_enterEvent_1217_0 ()
{
  return new qt_gsi::GenericMethod ("*enterEvent", "@brief Virtual method void QDateTimeEdit::enterEvent(QEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_enterEvent_1217_0, &_call_cbs_enterEvent_1217_0, &_set_callback_cbs_enterEvent_1217_0);
}


// void QDateTimeEdit::fixup(QString &input)

static void _init_cbs_fixup_c1330_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("input");
  decl->add_arg<QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_fixup_c1330_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QString &arg1 = args.read<QString & > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_fixup_c1330_0 (arg1);
}

static void _set_callback_cbs_fixup_c1330_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_fixup_c1330_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_fixup_c1330_0 ()
{
  return new qt_gsi::GenericMethod ("*fixup", "@hide", true, &_init_cbs_fixup_c1330_0, &_call_cbs_fixup_c1330_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_fixup_c1330_0 ()
{
  return new qt_gsi::GenericMethod ("*fixup", "@brief Virtual method void QDateTimeEdit::fixup(QString &input)\nThis method can be reimplemented in a derived class.", true, &_init_cbs_fixup_c1330_0, &_call_cbs_fixup_c1330_0, &_set_callback_cbs_fixup_c1330_0);
}


// void QDateTimeEdit::focusInEvent(QFocusEvent *event)

static void _init_cbs_focusInEvent_1729_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QFocusEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_focusInEvent_1729_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QFocusEvent *arg1 = args.read<QFocusEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_focusInEvent_1729_0 (arg1);
}

static void _set_callback_cbs_focusInEvent_1729_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_focusInEvent_1729_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_focusInEvent_1729_0 ()
{
  return new qt_gsi::GenericMethod ("*focusInEvent", "@hide", false, &_init_cbs_focusInEvent_1729_0, &_call_cbs_focusInEvent_1729_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_focusInEvent_1729_0 ()
{
  return new qt_gsi::GenericMethod ("*focusInEvent", "@brief Virtual method void QDateTimeEdit::focusInEvent(QFocusEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_focusInEvent_1729_0, &_call_cbs_focusInEvent_1729_0, &_set_callback_cbs_focusInEvent_1729_0);
}


// bool QDateTimeEdit::focusNextPrevChild(bool next)

static void _init_cbs_focusNextPrevChild_864_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("next");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_focusNextPrevChild_864_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ret.write<bool > ((bool)((QDateTimeEdit_Adaptor *)cls)->cbs_focusNextPrevChild_864_0 (arg1));
}

static void _set_callback_cbs_focusNextPrevChild_864_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_focusNextPrevChild_864_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_focusNextPrevChild_864_0 ()
{
  return new qt_gsi::GenericMethod ("*focusNextPrevChild", "@hide", false, &_init_cbs_focusNextPrevChild_864_0, &_call_cbs_focusNextPrevChild_864_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_focusNextPrevChild_864_0 ()
{
  return new qt_gsi::GenericMethod ("*focusNextPrevChild", "@brief Virtual method bool QDateTimeEdit::focusNextPrevChild(bool next)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_focusNextPrevChild_864_0, &_call_cbs_focusNextPrevChild_864_0, &_set_callback_cbs_focusNextPrevChild_864_0);
}


// void QDateTimeEdit::focusOutEvent(QFocusEvent *event)

static void _init_cbs_focusOutEvent_1729_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QFocusEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_focusOutEvent_1729_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QFocusEvent *arg1 = args.read<QFocusEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_focusOutEvent_1729_0 (arg1);
}

static void _set_callback_cbs_focusOutEvent_1729_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_focusOutEvent_1729_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_focusOutEvent_1729_0 ()
{
  return new qt_gsi::GenericMethod ("*focusOutEvent", "@hide", false, &_init_cbs_focusOutEvent_1729_0, &_call_cbs_focusOutEvent_1729_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_focusOutEvent_1729_0 ()
{
  return new qt_gsi::GenericMethod ("*focusOutEvent", "@brief Virtual method void QDateTimeEdit::focusOutEvent(QFocusEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_focusOutEvent_1729_0, &_call_cbs_focusOutEvent_1729_0, &_set_callback_cbs_focusOutEvent_1729_0);
}


// void QDateTimeEdit::fontChange(const QFont &)

static void _init_cbs_fontChange_1801_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QFont & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_fontChange_1801_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QFont &arg1 = args.read<const QFont & > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_fontChange_1801_0 (arg1);
}

static void _set_callback_cbs_fontChange_1801_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_fontChange_1801_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_fontChange_1801_0 ()
{
  return new qt_gsi::GenericMethod ("*fontChange", "@hide", false, &_init_cbs_fontChange_1801_0, &_call_cbs_fontChange_1801_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_fontChange_1801_0 ()
{
  return new qt_gsi::GenericMethod ("*fontChange", "@brief Virtual method void QDateTimeEdit::fontChange(const QFont &)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_fontChange_1801_0, &_call_cbs_fontChange_1801_0, &_set_callback_cbs_fontChange_1801_0);
}


// void QDateTimeEdit::hideEvent(QHideEvent *event)

static void _init_cbs_hideEvent_1595_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QHideEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_hideEvent_1595_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QHideEvent *arg1 = args.read<QHideEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_hideEvent_1595_0 (arg1);
}

static void _set_callback_cbs_hideEvent_1595_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_hideEvent_1595_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_hideEvent_1595_0 ()
{
  return new qt_gsi::GenericMethod ("*hideEvent", "@hide", false, &_init_cbs_hideEvent_1595_0, &_call_cbs_hideEvent_1595_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_hideEvent_1595_0 ()
{
  return new qt_gsi::GenericMethod ("*hideEvent", "@brief Virtual method void QDateTimeEdit::hideEvent(QHideEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_hideEvent_1595_0, &_call_cbs_hideEvent_1595_0, &_set_callback_cbs_hideEvent_1595_0);
}


// void QDateTimeEdit::inputMethodEvent(QInputMethodEvent *)

static void _init_cbs_inputMethodEvent_2354_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QInputMethodEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_inputMethodEvent_2354_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QInputMethodEvent *arg1 = args.read<QInputMethodEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_inputMethodEvent_2354_0 (arg1);
}

static void _set_callback_cbs_inputMethodEvent_2354_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_inputMethodEvent_2354_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_inputMethodEvent_2354_0 ()
{
  return new qt_gsi::GenericMethod ("*inputMethodEvent", "@hide", false, &_init_cbs_inputMethodEvent_2354_0, &_call_cbs_inputMethodEvent_2354_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_inputMethodEvent_2354_0 ()
{
  return new qt_gsi::GenericMethod ("*inputMethodEvent", "@brief Virtual method void QDateTimeEdit::inputMethodEvent(QInputMethodEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_inputMethodEvent_2354_0, &_call_cbs_inputMethodEvent_2354_0, &_set_callback_cbs_inputMethodEvent_2354_0);
}


// void QDateTimeEdit::keyPressEvent(QKeyEvent *event)

static void _init_cbs_keyPressEvent_1514_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QKeyEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_keyPressEvent_1514_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QKeyEvent *arg1 = args.read<QKeyEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_keyPressEvent_1514_0 (arg1);
}

static void _set_callback_cbs_keyPressEvent_1514_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_keyPressEvent_1514_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_keyPressEvent_1514_0 ()
{
  return new qt_gsi::GenericMethod ("*keyPressEvent", "@hide", false, &_init_cbs_keyPressEvent_1514_0, &_call_cbs_keyPressEvent_1514_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_keyPressEvent_1514_0 ()
{
  return new qt_gsi::GenericMethod ("*keyPressEvent", "@brief Virtual method void QDateTimeEdit::keyPressEvent(QKeyEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_keyPressEvent_1514_0, &_call_cbs_keyPressEvent_1514_0, &_set_callback_cbs_keyPressEvent_1514_0);
}


// void QDateTimeEdit::keyReleaseEvent(QKeyEvent *event)

static void _init_cbs_keyReleaseEvent_1514_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QKeyEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_keyReleaseEvent_1514_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QKeyEvent *arg1 = args.read<QKeyEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_keyReleaseEvent_1514_0 (arg1);
}

static void _set_callback_cbs_keyReleaseEvent_1514_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_keyReleaseEvent_1514_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_keyReleaseEvent_1514_0 ()
{
  return new qt_gsi::GenericMethod ("*keyReleaseEvent", "@hide", false, &_init_cbs_keyReleaseEvent_1514_0, &_call_cbs_keyReleaseEvent_1514_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_keyReleaseEvent_1514_0 ()
{
  return new qt_gsi::GenericMethod ("*keyReleaseEvent", "@brief Virtual method void QDateTimeEdit::keyReleaseEvent(QKeyEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_keyReleaseEvent_1514_0, &_call_cbs_keyReleaseEvent_1514_0, &_set_callback_cbs_keyReleaseEvent_1514_0);
}


// void QDateTimeEdit::languageChange()

static void _init_cbs_languageChange_0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_cbs_languageChange_0_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QDateTimeEdit_Adaptor *)cls)->cbs_languageChange_0_0 ();
}

static void _set_callback_cbs_languageChange_0_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_languageChange_0_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_languageChange_0_0 ()
{
  return new qt_gsi::GenericMethod ("*languageChange", "@hide", false, &_init_cbs_languageChange_0_0, &_call_cbs_languageChange_0_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_languageChange_0_0 ()
{
  return new qt_gsi::GenericMethod ("*languageChange", "@brief Virtual method void QDateTimeEdit::languageChange()\nThis method can be reimplemented in a derived class.", false, &_init_cbs_languageChange_0_0, &_call_cbs_languageChange_0_0, &_set_callback_cbs_languageChange_0_0);
}


// void QDateTimeEdit::leaveEvent(QEvent *)

static void _init_cbs_leaveEvent_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_leaveEvent_1217_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QEvent *arg1 = args.read<QEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_leaveEvent_1217_0 (arg1);
}

static void _set_callback_cbs_leaveEvent_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_leaveEvent_1217_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_leaveEvent_1217_0 ()
{
  return new qt_gsi::GenericMethod ("*leaveEvent", "@hide", false, &_init_cbs_leaveEvent_1217_0, &_call_cbs_leaveEvent_1217_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_leaveEvent_1217_0 ()
{
  return new qt_gsi::GenericMethod ("*leaveEvent", "@brief Virtual method void QDateTimeEdit::leaveEvent(QEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_leaveEvent_1217_0, &_call_cbs_leaveEvent_1217_0, &_set_callback_cbs_leaveEvent_1217_0);
}


// int QDateTimeEdit::metric(QPaintDevice::PaintDeviceMetric)

static void _init_cbs_metric_c3445_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const qt_gsi::Converter<QPaintDevice::PaintDeviceMetric>::target_type & > (argspec_0);
  decl->set_return<int > ();
}

static void _call_cbs_metric_c3445_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QPaintDevice::PaintDeviceMetric>::target_type & arg1 = args.read<const qt_gsi::Converter<QPaintDevice::PaintDeviceMetric>::target_type & > ();
  ret.write<int > ((int)((QDateTimeEdit_Adaptor *)cls)->cbs_metric_c3445_0 (arg1));
}

static void _set_callback_cbs_metric_c3445_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_metric_c3445_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_metric_c3445_0 ()
{
  return new qt_gsi::GenericMethod ("*metric", "@hide", true, &_init_cbs_metric_c3445_0, &_call_cbs_metric_c3445_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_metric_c3445_0 ()
{
  return new qt_gsi::GenericMethod ("*metric", "@brief Virtual method int QDateTimeEdit::metric(QPaintDevice::PaintDeviceMetric)\nThis method can be reimplemented in a derived class.", true, &_init_cbs_metric_c3445_0, &_call_cbs_metric_c3445_0, &_set_callback_cbs_metric_c3445_0);
}


// void QDateTimeEdit::mouseDoubleClickEvent(QMouseEvent *)

static void _init_cbs_mouseDoubleClickEvent_1738_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QMouseEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_mouseDoubleClickEvent_1738_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QMouseEvent *arg1 = args.read<QMouseEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_mouseDoubleClickEvent_1738_0 (arg1);
}

static void _set_callback_cbs_mouseDoubleClickEvent_1738_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_mouseDoubleClickEvent_1738_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_mouseDoubleClickEvent_1738_0 ()
{
  return new qt_gsi::GenericMethod ("*mouseDoubleClickEvent", "@hide", false, &_init_cbs_mouseDoubleClickEvent_1738_0, &_call_cbs_mouseDoubleClickEvent_1738_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_mouseDoubleClickEvent_1738_0 ()
{
  return new qt_gsi::GenericMethod ("*mouseDoubleClickEvent", "@brief Virtual method void QDateTimeEdit::mouseDoubleClickEvent(QMouseEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_mouseDoubleClickEvent_1738_0, &_call_cbs_mouseDoubleClickEvent_1738_0, &_set_callback_cbs_mouseDoubleClickEvent_1738_0);
}


// void QDateTimeEdit::mouseMoveEvent(QMouseEvent *event)

static void _init_cbs_mouseMoveEvent_1738_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QMouseEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_mouseMoveEvent_1738_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QMouseEvent *arg1 = args.read<QMouseEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_mouseMoveEvent_1738_0 (arg1);
}

static void _set_callback_cbs_mouseMoveEvent_1738_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_mouseMoveEvent_1738_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_mouseMoveEvent_1738_0 ()
{
  return new qt_gsi::GenericMethod ("*mouseMoveEvent", "@hide", false, &_init_cbs_mouseMoveEvent_1738_0, &_call_cbs_mouseMoveEvent_1738_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_mouseMoveEvent_1738_0 ()
{
  return new qt_gsi::GenericMethod ("*mouseMoveEvent", "@brief Virtual method void QDateTimeEdit::mouseMoveEvent(QMouseEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_mouseMoveEvent_1738_0, &_call_cbs_mouseMoveEvent_1738_0, &_set_callback_cbs_mouseMoveEvent_1738_0);
}


// void QDateTimeEdit::mousePressEvent(QMouseEvent *event)

static void _init_cbs_mousePressEvent_1738_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QMouseEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_mousePressEvent_1738_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QMouseEvent *arg1 = args.read<QMouseEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_mousePressEvent_1738_0 (arg1);
}

static void _set_callback_cbs_mousePressEvent_1738_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_mousePressEvent_1738_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_mousePressEvent_1738_0 ()
{
  return new qt_gsi::GenericMethod ("*mousePressEvent", "@hide", false, &_init_cbs_mousePressEvent_1738_0, &_call_cbs_mousePressEvent_1738_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_mousePressEvent_1738_0 ()
{
  return new qt_gsi::GenericMethod ("*mousePressEvent", "@brief Virtual method void QDateTimeEdit::mousePressEvent(QMouseEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_mousePressEvent_1738_0, &_call_cbs_mousePressEvent_1738_0, &_set_callback_cbs_mousePressEvent_1738_0);
}


// void QDateTimeEdit::mouseReleaseEvent(QMouseEvent *event)

static void _init_cbs_mouseReleaseEvent_1738_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QMouseEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_mouseReleaseEvent_1738_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QMouseEvent *arg1 = args.read<QMouseEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_mouseReleaseEvent_1738_0 (arg1);
}

static void _set_callback_cbs_mouseReleaseEvent_1738_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_mouseReleaseEvent_1738_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_mouseReleaseEvent_1738_0 ()
{
  return new qt_gsi::GenericMethod ("*mouseReleaseEvent", "@hide", false, &_init_cbs_mouseReleaseEvent_1738_0, &_call_cbs_mouseReleaseEvent_1738_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_mouseReleaseEvent_1738_0 ()
{
  return new qt_gsi::GenericMethod ("*mouseReleaseEvent", "@brief Virtual method void QDateTimeEdit::mouseReleaseEvent(QMouseEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_mouseReleaseEvent_1738_0, &_call_cbs_mouseReleaseEvent_1738_0, &_set_callback_cbs_mouseReleaseEvent_1738_0);
}


// void QDateTimeEdit::moveEvent(QMoveEvent *)

static void _init_cbs_moveEvent_1624_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QMoveEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_moveEvent_1624_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QMoveEvent *arg1 = args.read<QMoveEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_moveEvent_1624_0 (arg1);
}

static void _set_callback_cbs_moveEvent_1624_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_moveEvent_1624_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_moveEvent_1624_0 ()
{
  return new qt_gsi::GenericMethod ("*moveEvent", "@hide", false, &_init_cbs_moveEvent_1624_0, &_call_cbs_moveEvent_1624_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_moveEvent_1624_0 ()
{
  return new qt_gsi::GenericMethod ("*moveEvent", "@brief Virtual method void QDateTimeEdit::moveEvent(QMoveEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_moveEvent_1624_0, &_call_cbs_moveEvent_1624_0, &_set_callback_cbs_moveEvent_1624_0);
}


// void QDateTimeEdit::paintEvent(QPaintEvent *event)

static void _init_cbs_paintEvent_1725_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QPaintEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_paintEvent_1725_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QPaintEvent *arg1 = args.read<QPaintEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_paintEvent_1725_0 (arg1);
}

static void _set_callback_cbs_paintEvent_1725_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_paintEvent_1725_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_paintEvent_1725_0 ()
{
  return new qt_gsi::GenericMethod ("*paintEvent", "@hide", false, &_init_cbs_paintEvent_1725_0, &_call_cbs_paintEvent_1725_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_paintEvent_1725_0 ()
{
  return new qt_gsi::GenericMethod ("*paintEvent", "@brief Virtual method void QDateTimeEdit::paintEvent(QPaintEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_paintEvent_1725_0, &_call_cbs_paintEvent_1725_0, &_set_callback_cbs_paintEvent_1725_0);
}


// void QDateTimeEdit::paletteChange(const QPalette &)

static void _init_cbs_paletteChange_2113_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QPalette & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_paletteChange_2113_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QPalette &arg1 = args.read<const QPalette & > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_paletteChange_2113_0 (arg1);
}

static void _set_callback_cbs_paletteChange_2113_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_paletteChange_2113_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_paletteChange_2113_0 ()
{
  return new qt_gsi::GenericMethod ("*paletteChange", "@hide", false, &_init_cbs_paletteChange_2113_0, &_call_cbs_paletteChange_2113_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_paletteChange_2113_0 ()
{
  return new qt_gsi::GenericMethod ("*paletteChange", "@brief Virtual method void QDateTimeEdit::paletteChange(const QPalette &)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_paletteChange_2113_0, &_call_cbs_paletteChange_2113_0, &_set_callback_cbs_paletteChange_2113_0);
}


// void QDateTimeEdit::resizeEvent(QResizeEvent *event)

static void _init_cbs_resizeEvent_1843_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QResizeEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_resizeEvent_1843_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QResizeEvent *arg1 = args.read<QResizeEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_resizeEvent_1843_0 (arg1);
}

static void _set_callback_cbs_resizeEvent_1843_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_resizeEvent_1843_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_resizeEvent_1843_0 ()
{
  return new qt_gsi::GenericMethod ("*resizeEvent", "@hide", false, &_init_cbs_resizeEvent_1843_0, &_call_cbs_resizeEvent_1843_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_resizeEvent_1843_0 ()
{
  return new qt_gsi::GenericMethod ("*resizeEvent", "@brief Virtual method void QDateTimeEdit::resizeEvent(QResizeEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_resizeEvent_1843_0, &_call_cbs_resizeEvent_1843_0, &_set_callback_cbs_resizeEvent_1843_0);
}


// void QDateTimeEdit::showEvent(QShowEvent *event)

static void _init_cbs_showEvent_1634_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QShowEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_showEvent_1634_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QShowEvent *arg1 = args.read<QShowEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_showEvent_1634_0 (arg1);
}

static void _set_callback_cbs_showEvent_1634_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_showEvent_1634_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_showEvent_1634_0 ()
{
  return new qt_gsi::GenericMethod ("*showEvent", "@hide", false, &_init_cbs_showEvent_1634_0, &_call_cbs_showEvent_1634_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_showEvent_1634_0 ()
{
  return new qt_gsi::GenericMethod ("*showEvent", "@brief Virtual method void QDateTimeEdit::showEvent(QShowEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_showEvent_1634_0, &_call_cbs_showEvent_1634_0, &_set_callback_cbs_showEvent_1634_0);
}


// QFlags<QAbstractSpinBox::StepEnabledFlag> QDateTimeEdit::stepEnabled()

static void _init_cbs_stepEnabled_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QFlags<QAbstractSpinBox::StepEnabledFlag> >::target_type > ();
}

static void _call_cbs_stepEnabled_c0_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QFlags<QAbstractSpinBox::StepEnabledFlag> >::target_type > ((qt_gsi::Converter<QFlags<QAbstractSpinBox::StepEnabledFlag> >::target_type)((QDateTimeEdit_Adaptor *)cls)->cbs_stepEnabled_c0_0 ());
}

static void _set_callback_cbs_stepEnabled_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_stepEnabled_c0_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_stepEnabled_c0_0 ()
{
  return new qt_gsi::GenericMethod ("*stepEnabled", "@hide", true, &_init_cbs_stepEnabled_c0_0, &_call_cbs_stepEnabled_c0_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_stepEnabled_c0_0 ()
{
  return new qt_gsi::GenericMethod ("*stepEnabled", "@brief Virtual method QFlags<QAbstractSpinBox::StepEnabledFlag> QDateTimeEdit::stepEnabled()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_stepEnabled_c0_0, &_call_cbs_stepEnabled_c0_0, &_set_callback_cbs_stepEnabled_c0_0);
}


// void QDateTimeEdit::styleChange(QStyle &)

static void _init_cbs_styleChange_1228_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QStyle & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_styleChange_1228_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QStyle &arg1 = args.read<QStyle & > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_styleChange_1228_0 (arg1);
}

static void _set_callback_cbs_styleChange_1228_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_styleChange_1228_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_styleChange_1228_0 ()
{
  return new qt_gsi::GenericMethod ("*styleChange", "@hide", false, &_init_cbs_styleChange_1228_0, &_call_cbs_styleChange_1228_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_styleChange_1228_0 ()
{
  return new qt_gsi::GenericMethod ("*styleChange", "@brief Virtual method void QDateTimeEdit::styleChange(QStyle &)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_styleChange_1228_0, &_call_cbs_styleChange_1228_0, &_set_callback_cbs_styleChange_1228_0);
}


// void QDateTimeEdit::tabletEvent(QTabletEvent *)

static void _init_cbs_tabletEvent_1821_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QTabletEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_tabletEvent_1821_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QTabletEvent *arg1 = args.read<QTabletEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_tabletEvent_1821_0 (arg1);
}

static void _set_callback_cbs_tabletEvent_1821_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_tabletEvent_1821_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_tabletEvent_1821_0 ()
{
  return new qt_gsi::GenericMethod ("*tabletEvent", "@hide", false, &_init_cbs_tabletEvent_1821_0, &_call_cbs_tabletEvent_1821_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_tabletEvent_1821_0 ()
{
  return new qt_gsi::GenericMethod ("*tabletEvent", "@brief Virtual method void QDateTimeEdit::tabletEvent(QTabletEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_tabletEvent_1821_0, &_call_cbs_tabletEvent_1821_0, &_set_callback_cbs_tabletEvent_1821_0);
}


// QString QDateTimeEdit::textFromDateTime(const QDateTime &dt)

static void _init_cbs_textFromDateTime_c2175_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("dt");
  decl->add_arg<const QDateTime & > (argspec_0);
  decl->set_return<QString > ();
}

static void _call_cbs_textFromDateTime_c2175_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QDateTime &arg1 = args.read<const QDateTime & > ();
  ret.write<QString > ((QString)((QDateTimeEdit_Adaptor *)cls)->cbs_textFromDateTime_c2175_0 (arg1));
}

static void _set_callback_cbs_textFromDateTime_c2175_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_textFromDateTime_c2175_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_textFromDateTime_c2175_0 ()
{
  return new qt_gsi::GenericMethod ("*textFromDateTime", "@hide", true, &_init_cbs_textFromDateTime_c2175_0, &_call_cbs_textFromDateTime_c2175_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_textFromDateTime_c2175_0 ()
{
  return new qt_gsi::GenericMethod ("*textFromDateTime", "@brief Virtual method QString QDateTimeEdit::textFromDateTime(const QDateTime &dt)\nThis method can be reimplemented in a derived class.", true, &_init_cbs_textFromDateTime_c2175_0, &_call_cbs_textFromDateTime_c2175_0, &_set_callback_cbs_textFromDateTime_c2175_0);
}


// void QDateTimeEdit::timerEvent(QTimerEvent *event)

static void _init_cbs_timerEvent_1730_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QTimerEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_timerEvent_1730_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QTimerEvent *arg1 = args.read<QTimerEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_timerEvent_1730_0 (arg1);
}

static void _set_callback_cbs_timerEvent_1730_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_timerEvent_1730_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_timerEvent_1730_0 ()
{
  return new qt_gsi::GenericMethod ("*timerEvent", "@hide", false, &_init_cbs_timerEvent_1730_0, &_call_cbs_timerEvent_1730_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_timerEvent_1730_0 ()
{
  return new qt_gsi::GenericMethod ("*timerEvent", "@brief Virtual method void QDateTimeEdit::timerEvent(QTimerEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_timerEvent_1730_0, &_call_cbs_timerEvent_1730_0, &_set_callback_cbs_timerEvent_1730_0);
}


// QValidator::State QDateTimeEdit::validate(QString &input, int &pos)

static void _init_cbs_validate_c2171_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("input");
  decl->add_arg<QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pos");
  decl->add_arg<int & > (argspec_1);
  decl->set_return<qt_gsi::Converter<QValidator::State>::target_type > ();
}

static void _call_cbs_validate_c2171_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QString &arg1 = args.read<QString & > ();
  int &arg2 = args.read<int & > ();
  ret.write<qt_gsi::Converter<QValidator::State>::target_type > ((qt_gsi::Converter<QValidator::State>::target_type)((QDateTimeEdit_Adaptor *)cls)->cbs_validate_c2171_0 (arg1, arg2));
}

static void _set_callback_cbs_validate_c2171_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_validate_c2171_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_validate_c2171_0 ()
{
  return new qt_gsi::GenericMethod ("*validate", "@hide", true, &_init_cbs_validate_c2171_0, &_call_cbs_validate_c2171_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_validate_c2171_0 ()
{
  return new qt_gsi::GenericMethod ("*validate", "@brief Virtual method QValidator::State QDateTimeEdit::validate(QString &input, int &pos)\nThis method can be reimplemented in a derived class.", true, &_init_cbs_validate_c2171_0, &_call_cbs_validate_c2171_0, &_set_callback_cbs_validate_c2171_0);
}


// void QDateTimeEdit::wheelEvent(QWheelEvent *event)

static void _init_cbs_wheelEvent_1718_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QWheelEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_wheelEvent_1718_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  QWheelEvent *arg1 = args.read<QWheelEvent * > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_wheelEvent_1718_0 (arg1);
}

static void _set_callback_cbs_wheelEvent_1718_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_wheelEvent_1718_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_wheelEvent_1718_0 ()
{
  return new qt_gsi::GenericMethod ("*wheelEvent", "@hide", false, &_init_cbs_wheelEvent_1718_0, &_call_cbs_wheelEvent_1718_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_wheelEvent_1718_0 ()
{
  return new qt_gsi::GenericMethod ("*wheelEvent", "@brief Virtual method void QDateTimeEdit::wheelEvent(QWheelEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_wheelEvent_1718_0, &_call_cbs_wheelEvent_1718_0, &_set_callback_cbs_wheelEvent_1718_0);
}


// void QDateTimeEdit::windowActivationChange(bool)

static void _init_cbs_windowActivationChange_864_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_windowActivationChange_864_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QDateTimeEdit_Adaptor *)cls)->cbs_windowActivationChange_864_0 (arg1);
}

static void _set_callback_cbs_windowActivationChange_864_0 (void *cls, const gsi::Callback &cb)
{
  ((QDateTimeEdit_Adaptor *)cls)->cb_windowActivationChange_864_0 = cb;
}

static qt_gsi::GenericMethod *_create_cbs_windowActivationChange_864_0 ()
{
  return new qt_gsi::GenericMethod ("*windowActivationChange", "@hide", false, &_init_cbs_windowActivationChange_864_0, &_call_cbs_windowActivationChange_864_0);
}

static qt_gsi::GenericMethod *_create_callback_cbs_windowActivationChange_864_0 ()
{
  return new qt_gsi::GenericMethod ("*windowActivationChange", "@brief Virtual method void QDateTimeEdit::windowActivationChange(bool)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_windowActivationChange_864_0, &_call_cbs_windowActivationChange_864_0, &_set_callback_cbs_windowActivationChange_864_0);
}


namespace gsi
{

extern gsi::Class<QDateTimeEdit> decl_QDateTimeEdit;

gsi::Class<QDateTimeEdit_Adaptor> decl_QDateTimeEdit_Adaptor (decl_QDateTimeEdit, "QDateTimeEdit",
  gsi::Methods(_create_fp_create_2208 ()) +
  gsi::Methods(_create_fp_destroy_1620 ()) +
  gsi::Methods(_create_fp_focusNextChild_0 ()) +
  gsi::Methods(_create_fp_focusPreviousChild_0 ()) +
  gsi::Methods(_create_fp_initStyleOption_c2572 ()) +
  gsi::Methods(_create_fp_lineEdit_c0 ()) +
  gsi::Methods(_create_fp_receivers_c1731 ()) +
  gsi::Methods(_create_fp_resetInputContext_0 ()) +
  gsi::Methods(_create_fp_sender_c0 ()) +
  gsi::Methods(_create_fp_setLineEdit_1485 ()) +
  gsi::Methods(_create_fp_updateMicroFocus_0 ()) +
  gsi::Methods(_create_cbs_clear_0_0 ()) +
  gsi::Methods(_create_callback_cbs_clear_0_0 ()) +
  gsi::Methods(_create_cbs_event_1217_0 ()) +
  gsi::Methods(_create_callback_cbs_event_1217_0 ()) +
  gsi::Methods(_create_cbs_eventFilter_2411_0 ()) +
  gsi::Methods(_create_callback_cbs_eventFilter_2411_0 ()) +
  gsi::Methods(_create_cbs_heightForWidth_c767_0 ()) +
  gsi::Methods(_create_callback_cbs_heightForWidth_c767_0 ()) +
  gsi::Methods(_create_cbs_inputMethodQuery_c2420_0 ()) +
  gsi::Methods(_create_callback_cbs_inputMethodQuery_c2420_0 ()) +
  gsi::Methods(_create_cbs_minimumSizeHint_c0_0 ()) +
  gsi::Methods(_create_callback_cbs_minimumSizeHint_c0_0 ()) +
  gsi::Methods(_create_cbs_paintEngine_c0_0 ()) +
  gsi::Methods(_create_callback_cbs_paintEngine_c0_0 ()) +
  gsi::Methods(_create_cbs_setVisible_864_0 ()) +
  gsi::Methods(_create_callback_cbs_setVisible_864_0 ()) +
  gsi::Methods(_create_cbs_sizeHint_c0_0 ()) +
  gsi::Methods(_create_callback_cbs_sizeHint_c0_0 ()) +
  gsi::Methods(_create_cbs_stepBy_767_0 ()) +
  gsi::Methods(_create_callback_cbs_stepBy_767_0 ()) +
  gsi::Methods(_create_cbs_actionEvent_1823_0 ()) +
  gsi::Methods(_create_callback_cbs_actionEvent_1823_0 ()) +
  gsi::Methods(_create_cbs_changeEvent_1217_0 ()) +
  gsi::Methods(_create_callback_cbs_changeEvent_1217_0 ()) +
  gsi::Methods(_create_cbs_childEvent_1701_0 ()) +
  gsi::Methods(_create_callback_cbs_childEvent_1701_0 ()) +
  gsi::Methods(_create_cbs_closeEvent_1719_0 ()) +
  gsi::Methods(_create_callback_cbs_closeEvent_1719_0 ()) +
  gsi::Methods(_create_cbs_contextMenuEvent_2363_0 ()) +
  gsi::Methods(_create_callback_cbs_contextMenuEvent_2363_0 ()) +
  gsi::Methods(_create_cbs_customEvent_1217_0 ()) +
  gsi::Methods(_create_callback_cbs_customEvent_1217_0 ()) +
  gsi::Methods(_create_cbs_dateTimeFromText_c2025_0 ()) +
  gsi::Methods(_create_callback_cbs_dateTimeFromText_c2025_0 ()) +
  gsi::Methods(_create_cbs_disconnectNotify_1731_0 ()) +
  gsi::Methods(_create_callback_cbs_disconnectNotify_1731_0 ()) +
  gsi::Methods(_create_cbs_dragEnterEvent_2109_0 ()) +
  gsi::Methods(_create_callback_cbs_dragEnterEvent_2109_0 ()) +
  gsi::Methods(_create_cbs_dragLeaveEvent_2092_0 ()) +
  gsi::Methods(_create_callback_cbs_dragLeaveEvent_2092_0 ()) +
  gsi::Methods(_create_cbs_dragMoveEvent_2006_0 ()) +
  gsi::Methods(_create_callback_cbs_dragMoveEvent_2006_0 ()) +
  gsi::Methods(_create_cbs_dropEvent_1622_0 ()) +
  gsi::Methods(_create_callback_cbs_dropEvent_1622_0 ()) +
  gsi::Methods(_create_cbs_enabledChange_864_0 ()) +
  gsi::Methods(_create_callback_cbs_enabledChange_864_0 ()) +
  gsi::Methods(_create_cbs_enterEvent_1217_0 ()) +
  gsi::Methods(_create_callback_cbs_enterEvent_1217_0 ()) +
  gsi::Methods(_create_cbs_fixup_c1330_0 ()) +
  gsi::Methods(_create_callback_cbs_fixup_c1330_0 ()) +
  gsi::Methods(_create_cbs_focusInEvent_1729_0 ()) +
  gsi::Methods(_create_callback_cbs_focusInEvent_1729_0 ()) +
  gsi::Methods(_create_cbs_focusNextPrevChild_864_0 ()) +
  gsi::Methods(_create_callback_cbs_focusNextPrevChild_864_0 ()) +
  gsi::Methods(_create_cbs_focusOutEvent_1729_0 ()) +
  gsi::Methods(_create_callback_cbs_focusOutEvent_1729_0 ()) +
  gsi::Methods(_create_cbs_fontChange_1801_0 ()) +
  gsi::Methods(_create_callback_cbs_fontChange_1801_0 ()) +
  gsi::Methods(_create_cbs_hideEvent_1595_0 ()) +
  gsi::Methods(_create_callback_cbs_hideEvent_1595_0 ()) +
  gsi::Methods(_create_cbs_inputMethodEvent_2354_0 ()) +
  gsi::Methods(_create_callback_cbs_inputMethodEvent_2354_0 ()) +
  gsi::Methods(_create_cbs_keyPressEvent_1514_0 ()) +
  gsi::Methods(_create_callback_cbs_keyPressEvent_1514_0 ()) +
  gsi::Methods(_create_cbs_keyReleaseEvent_1514_0 ()) +
  gsi::Methods(_create_callback_cbs_keyReleaseEvent_1514_0 ()) +
  gsi::Methods(_create_cbs_languageChange_0_0 ()) +
  gsi::Methods(_create_callback_cbs_languageChange_0_0 ()) +
  gsi::Methods(_create_cbs_leaveEvent_1217_0 ()) +
  gsi::Methods(_create_callback_cbs_leaveEvent_1217_0 ()) +
  gsi::Methods(_create_cbs_metric_c3445_0 ()) +
  gsi::Methods(_create_callback_cbs_metric_c3445_0 ()) +
  gsi::Methods(_create_cbs_mouseDoubleClickEvent_1738_0 ()) +
  gsi::Methods(_create_callback_cbs_mouseDoubleClickEvent_1738_0 ()) +
  gsi::Methods(_create_cbs_mouseMoveEvent_1738_0 ()) +
  gsi::Methods(_create_callback_cbs_mouseMoveEvent_1738_0 ()) +
  gsi::Methods(_create_cbs_mousePressEvent_1738_0 ()) +
  gsi::Methods(_create_callback_cbs_mousePressEvent_1738_0 ()) +
  gsi::Methods(_create_cbs_mouseReleaseEvent_1738_0 ()) +
  gsi::Methods(_create_callback_cbs_mouseReleaseEvent_1738_0 ()) +
  gsi::Methods(_create_cbs_moveEvent_1624_0 ()) +
  gsi::Methods(_create_callback_cbs_moveEvent_1624_0 ()) +
  gsi::Methods(_create_cbs_paintEvent_1725_0 ()) +
  gsi::Methods(_create_callback_cbs_paintEvent_1725_0 ()) +
  gsi::Methods(_create_cbs_paletteChange_2113_0 ()) +
  gsi::Methods(_create_callback_cbs_paletteChange_2113_0 ()) +
  gsi::Methods(_create_cbs_resizeEvent_1843_0 ()) +
  gsi::Methods(_create_callback_cbs_resizeEvent_1843_0 ()) +
  gsi::Methods(_create_cbs_showEvent_1634_0 ()) +
  gsi::Methods(_create_callback_cbs_showEvent_1634_0 ()) +
  gsi::Methods(_create_cbs_stepEnabled_c0_0 ()) +
  gsi::Methods(_create_callback_cbs_stepEnabled_c0_0 ()) +
  gsi::Methods(_create_cbs_styleChange_1228_0 ()) +
  gsi::Methods(_create_callback_cbs_styleChange_1228_0 ()) +
  gsi::Methods(_create_cbs_tabletEvent_1821_0 ()) +
  gsi::Methods(_create_callback_cbs_tabletEvent_1821_0 ()) +
  gsi::Methods(_create_cbs_textFromDateTime_c2175_0 ()) +
  gsi::Methods(_create_callback_cbs_textFromDateTime_c2175_0 ()) +
  gsi::Methods(_create_cbs_timerEvent_1730_0 ()) +
  gsi::Methods(_create_callback_cbs_timerEvent_1730_0 ()) +
  gsi::Methods(_create_cbs_validate_c2171_0 ()) +
  gsi::Methods(_create_callback_cbs_validate_c2171_0 ()) +
  gsi::Methods(_create_cbs_wheelEvent_1718_0 ()) +
  gsi::Methods(_create_callback_cbs_wheelEvent_1718_0 ()) +
  gsi::Methods(_create_cbs_windowActivationChange_864_0 ()) +
  gsi::Methods(_create_callback_cbs_windowActivationChange_864_0 ()) +
  gsi::Methods(_create_ctor_QDateTimeEdit_Adaptor_1315 ()) +
  gsi::Methods(_create_ctor_QDateTimeEdit_Adaptor_3382 ()) +
  gsi::Methods(_create_ctor_QDateTimeEdit_Adaptor_2983 ()) +
  gsi::Methods(_create_ctor_QDateTimeEdit_Adaptor_3000 ()),
  "@qt\n@brief Binding of QDateTimeEdit");

}


//  Implementation of the enum wrapper class for QDateTimeEdit::Section
namespace qt_gsi
{

static QDateTimeEdit_Section_Enum *c_1_QDateTimeEdit_Section_Enum () { return new QDateTimeEdit_Section_Enum (QDateTimeEdit::NoSection); }
static QDateTimeEdit_Section_Enum *c_2_QDateTimeEdit_Section_Enum () { return new QDateTimeEdit_Section_Enum (QDateTimeEdit::AmPmSection); }
static QDateTimeEdit_Section_Enum *c_3_QDateTimeEdit_Section_Enum () { return new QDateTimeEdit_Section_Enum (QDateTimeEdit::MSecSection); }
static QDateTimeEdit_Section_Enum *c_4_QDateTimeEdit_Section_Enum () { return new QDateTimeEdit_Section_Enum (QDateTimeEdit::SecondSection); }
static QDateTimeEdit_Section_Enum *c_5_QDateTimeEdit_Section_Enum () { return new QDateTimeEdit_Section_Enum (QDateTimeEdit::MinuteSection); }
static QDateTimeEdit_Section_Enum *c_6_QDateTimeEdit_Section_Enum () { return new QDateTimeEdit_Section_Enum (QDateTimeEdit::HourSection); }
static QDateTimeEdit_Section_Enum *c_7_QDateTimeEdit_Section_Enum () { return new QDateTimeEdit_Section_Enum (QDateTimeEdit::DaySection); }
static QDateTimeEdit_Section_Enum *c_8_QDateTimeEdit_Section_Enum () { return new QDateTimeEdit_Section_Enum (QDateTimeEdit::MonthSection); }
static QDateTimeEdit_Section_Enum *c_9_QDateTimeEdit_Section_Enum () { return new QDateTimeEdit_Section_Enum (QDateTimeEdit::YearSection); }
static QDateTimeEdit_Section_Enum *c_10_QDateTimeEdit_Section_Enum () { return new QDateTimeEdit_Section_Enum (QDateTimeEdit::TimeSections_Mask); }
static QDateTimeEdit_Section_Enum *c_11_QDateTimeEdit_Section_Enum () { return new QDateTimeEdit_Section_Enum (QDateTimeEdit::DateSections_Mask); }

static gsi::Methods mkdefs_QDateTimeEdit_Section () {
  return
    gsi::constant ("NoSection", &qt_gsi::c_1_QDateTimeEdit_Section_Enum, "@brief Enum constant QDateTimeEdit::NoSection") +
    gsi::constant ("AmPmSection", &qt_gsi::c_2_QDateTimeEdit_Section_Enum, "@brief Enum constant QDateTimeEdit::AmPmSection") +
    gsi::constant ("MSecSection", &qt_gsi::c_3_QDateTimeEdit_Section_Enum, "@brief Enum constant QDateTimeEdit::MSecSection") +
    gsi::constant ("SecondSection", &qt_gsi::c_4_QDateTimeEdit_Section_Enum, "@brief Enum constant QDateTimeEdit::SecondSection") +
    gsi::constant ("MinuteSection", &qt_gsi::c_5_QDateTimeEdit_Section_Enum, "@brief Enum constant QDateTimeEdit::MinuteSection") +
    gsi::constant ("HourSection", &qt_gsi::c_6_QDateTimeEdit_Section_Enum, "@brief Enum constant QDateTimeEdit::HourSection") +
    gsi::constant ("DaySection", &qt_gsi::c_7_QDateTimeEdit_Section_Enum, "@brief Enum constant QDateTimeEdit::DaySection") +
    gsi::constant ("MonthSection", &qt_gsi::c_8_QDateTimeEdit_Section_Enum, "@brief Enum constant QDateTimeEdit::MonthSection") +
    gsi::constant ("YearSection", &qt_gsi::c_9_QDateTimeEdit_Section_Enum, "@brief Enum constant QDateTimeEdit::YearSection") +
    gsi::constant ("TimeSections_Mask", &qt_gsi::c_10_QDateTimeEdit_Section_Enum, "@brief Enum constant QDateTimeEdit::TimeSections_Mask") +
    gsi::constant ("DateSections_Mask", &qt_gsi::c_11_QDateTimeEdit_Section_Enum, "@brief Enum constant QDateTimeEdit::DateSections_Mask");
}

static std::string to_s_QDateTimeEdit_Section_Enum (const QDateTimeEdit_Section_Enum *e)
{
  if (e->value () == QDateTimeEdit::NoSection) { return tl::sprintf ("NoSection (%u)", (unsigned int) e->value ()); }
  if (e->value () == QDateTimeEdit::AmPmSection) { return tl::sprintf ("AmPmSection (%u)", (unsigned int) e->value ()); }
  if (e->value () == QDateTimeEdit::MSecSection) { return tl::sprintf ("MSecSection (%u)", (unsigned int) e->value ()); }
  if (e->value () == QDateTimeEdit::SecondSection) { return tl::sprintf ("SecondSection (%u)", (unsigned int) e->value ()); }
  if (e->value () == QDateTimeEdit::MinuteSection) { return tl::sprintf ("MinuteSection (%u)", (unsigned int) e->value ()); }
  if (e->value () == QDateTimeEdit::HourSection) { return tl::sprintf ("HourSection (%u)", (unsigned int) e->value ()); }
  if (e->value () == QDateTimeEdit::DaySection) { return tl::sprintf ("DaySection (%u)", (unsigned int) e->value ()); }
  if (e->value () == QDateTimeEdit::MonthSection) { return tl::sprintf ("MonthSection (%u)", (unsigned int) e->value ()); }
  if (e->value () == QDateTimeEdit::YearSection) { return tl::sprintf ("YearSection (%u)", (unsigned int) e->value ()); }
  if (e->value () == QDateTimeEdit::TimeSections_Mask) { return tl::sprintf ("TimeSections_Mask (%u)", (unsigned int) e->value ()); }
  if (e->value () == QDateTimeEdit::DateSections_Mask) { return tl::sprintf ("DateSections_Mask (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QDateTimeEdit_Section_Enum (const QDateTimeEdit_Section_Enum *e)
{
  return (unsigned int) e->value ();
}

static QDateTimeEdit_Section_Enum *from_i_QDateTimeEdit_Section_Enum (unsigned int i)
{
  return new QDateTimeEdit_Section_Enum ((QDateTimeEdit::Section) i);
}

static bool equalQDateTimeEdit_Section_Enum (const QDateTimeEdit_Section_Enum *e, QDateTimeEdit_Section_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QDateTimeEdit_Section_Enum (const QDateTimeEdit_Section_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QDateTimeEdit_Section_Enums oropQDateTimeEdit_Section_Enums (const QDateTimeEdit_Section_Enums *e, const QDateTimeEdit_Section_Enums &d)
{
  return e->flags () | d.flags ();
}

static QDateTimeEdit_Section_Enums andopQDateTimeEdit_Section_Enums (const QDateTimeEdit_Section_Enums *e, const QDateTimeEdit_Section_Enums &d)
{
  return e->flags () & d.flags ();
}

static QDateTimeEdit_Section_Enums xoropQDateTimeEdit_Section_Enums (const QDateTimeEdit_Section_Enums *e, const QDateTimeEdit_Section_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QDateTimeEdit_Section_Enums (const QDateTimeEdit_Section_Enums *e)
{
  std::string l;
  if (e->testFlag (QDateTimeEdit::NoSection)) { if (!l.empty ()) l += "|"; l += "NoSection"; }
  if (e->testFlag (QDateTimeEdit::AmPmSection)) { if (!l.empty ()) l += "|"; l += "AmPmSection"; }
  if (e->testFlag (QDateTimeEdit::MSecSection)) { if (!l.empty ()) l += "|"; l += "MSecSection"; }
  if (e->testFlag (QDateTimeEdit::SecondSection)) { if (!l.empty ()) l += "|"; l += "SecondSection"; }
  if (e->testFlag (QDateTimeEdit::MinuteSection)) { if (!l.empty ()) l += "|"; l += "MinuteSection"; }
  if (e->testFlag (QDateTimeEdit::HourSection)) { if (!l.empty ()) l += "|"; l += "HourSection"; }
  if (e->testFlag (QDateTimeEdit::DaySection)) { if (!l.empty ()) l += "|"; l += "DaySection"; }
  if (e->testFlag (QDateTimeEdit::MonthSection)) { if (!l.empty ()) l += "|"; l += "MonthSection"; }
  if (e->testFlag (QDateTimeEdit::YearSection)) { if (!l.empty ()) l += "|"; l += "YearSection"; }
  if (e->testFlag (QDateTimeEdit::TimeSections_Mask)) { if (!l.empty ()) l += "|"; l += "TimeSections_Mask"; }
  if (e->testFlag (QDateTimeEdit::DateSections_Mask)) { if (!l.empty ()) l += "|"; l += "DateSections_Mask"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QDateTimeEdit_Section_Enums (const QDateTimeEdit_Section_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QDateTimeEdit_Section_Enums (const QDateTimeEdit_Section_Enums *e, const QDateTimeEdit_Section_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QDateTimeEdit_Section_Enums> decl_QDateTimeEdit_Section_Enums ("QDateTimeEdit_QFlags_Section",
  gsi::method_ext ("|", &qt_gsi::oropQDateTimeEdit_Section_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQDateTimeEdit_Section_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQDateTimeEdit_Section_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QDateTimeEdit_Section_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QDateTimeEdit_Section_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QDateTimeEdit_Section_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QDateTimeEdit::Section> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QDateTimeEdit_Section_Enum> decl_QDateTimeEdit_Section_Enum (decl_QDateTimeEdit_Section_Enums, "QDateTimeEdit_Section",
  qt_gsi::mkdefs_QDateTimeEdit_Section () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QDateTimeEdit_Section_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QDateTimeEdit_Section_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQDateTimeEdit_Section_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QDateTimeEdit_Section_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QDateTimeEdit_Section_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QDateTimeEdit::Section enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QDateTimeEdit> inject_QDateTimeEdit_Section_Enum_in_parent (qt_gsi::mkdefs_QDateTimeEdit_Section ());
static gsi::ClassExt<QDateTimeEdit> decl_QDateTimeEdit_Section_Enum_as_child (decl_QDateTimeEdit_Section_Enum, "Section");

}

