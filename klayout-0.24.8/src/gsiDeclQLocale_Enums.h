
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQLocale_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQLocale_Enums
#define _HDR_gsiDeclQLocale_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QLocale::Country>
class QLocale_Country_Enums : public QFlags<enum QLocale::Country> {
public:
  QLocale_Country_Enums () : m_flags () { }
  QLocale_Country_Enums (enum QLocale::Country v) : m_flags (v) { }
  QLocale_Country_Enums (const QFlags<enum QLocale::Country> &v) : m_flags (v) { }
  QFlags<enum QLocale::Country> flags () const { return m_flags; }
private:
  QFlags<QLocale::Country> m_flags;
};

//  Wrapper class for enum QLocale::Country
class QLocale_Country_Enum : public QLocale_Country_Enums {
public:
  QLocale_Country_Enum () { }
  QLocale_Country_Enum (enum QLocale::Country v) : QLocale_Country_Enums (v) { }
  enum QLocale::Country value () const { return (enum QLocale::Country) flags ().operator int (); }
};

//  Converter for QFlags<enum QLocale::Country>
template <>
struct Converter<QFlags<enum QLocale::Country> >
{
public:
  typedef QFlags<enum QLocale::Country> source_type;
  typedef QLocale_Country_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QLocale::Country
template <>
struct Converter<enum QLocale::Country>
{
public:
  typedef enum QLocale::Country source_type;
  typedef QLocale_Country_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QLocale::FormatType>
class QLocale_FormatType_Enums : public QFlags<enum QLocale::FormatType> {
public:
  QLocale_FormatType_Enums () : m_flags () { }
  QLocale_FormatType_Enums (enum QLocale::FormatType v) : m_flags (v) { }
  QLocale_FormatType_Enums (const QFlags<enum QLocale::FormatType> &v) : m_flags (v) { }
  QFlags<enum QLocale::FormatType> flags () const { return m_flags; }
private:
  QFlags<QLocale::FormatType> m_flags;
};

//  Wrapper class for enum QLocale::FormatType
class QLocale_FormatType_Enum : public QLocale_FormatType_Enums {
public:
  QLocale_FormatType_Enum () { }
  QLocale_FormatType_Enum (enum QLocale::FormatType v) : QLocale_FormatType_Enums (v) { }
  enum QLocale::FormatType value () const { return (enum QLocale::FormatType) flags ().operator int (); }
};

//  Converter for QFlags<enum QLocale::FormatType>
template <>
struct Converter<QFlags<enum QLocale::FormatType> >
{
public:
  typedef QFlags<enum QLocale::FormatType> source_type;
  typedef QLocale_FormatType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QLocale::FormatType
template <>
struct Converter<enum QLocale::FormatType>
{
public:
  typedef enum QLocale::FormatType source_type;
  typedef QLocale_FormatType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QLocale::Language>
class QLocale_Language_Enums : public QFlags<enum QLocale::Language> {
public:
  QLocale_Language_Enums () : m_flags () { }
  QLocale_Language_Enums (enum QLocale::Language v) : m_flags (v) { }
  QLocale_Language_Enums (const QFlags<enum QLocale::Language> &v) : m_flags (v) { }
  QFlags<enum QLocale::Language> flags () const { return m_flags; }
private:
  QFlags<QLocale::Language> m_flags;
};

//  Wrapper class for enum QLocale::Language
class QLocale_Language_Enum : public QLocale_Language_Enums {
public:
  QLocale_Language_Enum () { }
  QLocale_Language_Enum (enum QLocale::Language v) : QLocale_Language_Enums (v) { }
  enum QLocale::Language value () const { return (enum QLocale::Language) flags ().operator int (); }
};

//  Converter for QFlags<enum QLocale::Language>
template <>
struct Converter<QFlags<enum QLocale::Language> >
{
public:
  typedef QFlags<enum QLocale::Language> source_type;
  typedef QLocale_Language_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QLocale::Language
template <>
struct Converter<enum QLocale::Language>
{
public:
  typedef enum QLocale::Language source_type;
  typedef QLocale_Language_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QLocale::MeasurementSystem>
class QLocale_MeasurementSystem_Enums : public QFlags<enum QLocale::MeasurementSystem> {
public:
  QLocale_MeasurementSystem_Enums () : m_flags () { }
  QLocale_MeasurementSystem_Enums (enum QLocale::MeasurementSystem v) : m_flags (v) { }
  QLocale_MeasurementSystem_Enums (const QFlags<enum QLocale::MeasurementSystem> &v) : m_flags (v) { }
  QFlags<enum QLocale::MeasurementSystem> flags () const { return m_flags; }
private:
  QFlags<QLocale::MeasurementSystem> m_flags;
};

//  Wrapper class for enum QLocale::MeasurementSystem
class QLocale_MeasurementSystem_Enum : public QLocale_MeasurementSystem_Enums {
public:
  QLocale_MeasurementSystem_Enum () { }
  QLocale_MeasurementSystem_Enum (enum QLocale::MeasurementSystem v) : QLocale_MeasurementSystem_Enums (v) { }
  enum QLocale::MeasurementSystem value () const { return (enum QLocale::MeasurementSystem) flags ().operator int (); }
};

//  Converter for QFlags<enum QLocale::MeasurementSystem>
template <>
struct Converter<QFlags<enum QLocale::MeasurementSystem> >
{
public:
  typedef QFlags<enum QLocale::MeasurementSystem> source_type;
  typedef QLocale_MeasurementSystem_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QLocale::MeasurementSystem
template <>
struct Converter<enum QLocale::MeasurementSystem>
{
public:
  typedef enum QLocale::MeasurementSystem source_type;
  typedef QLocale_MeasurementSystem_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QLocale::NumberOption>
class QLocale_NumberOption_Enums : public QFlags<enum QLocale::NumberOption> {
public:
  QLocale_NumberOption_Enums () : m_flags () { }
  QLocale_NumberOption_Enums (enum QLocale::NumberOption v) : m_flags (v) { }
  QLocale_NumberOption_Enums (const QFlags<enum QLocale::NumberOption> &v) : m_flags (v) { }
  QFlags<enum QLocale::NumberOption> flags () const { return m_flags; }
private:
  QFlags<QLocale::NumberOption> m_flags;
};

//  Wrapper class for enum QLocale::NumberOption
class QLocale_NumberOption_Enum : public QLocale_NumberOption_Enums {
public:
  QLocale_NumberOption_Enum () { }
  QLocale_NumberOption_Enum (enum QLocale::NumberOption v) : QLocale_NumberOption_Enums (v) { }
  enum QLocale::NumberOption value () const { return (enum QLocale::NumberOption) flags ().operator int (); }
};

//  Converter for QFlags<enum QLocale::NumberOption>
template <>
struct Converter<QFlags<enum QLocale::NumberOption> >
{
public:
  typedef QFlags<enum QLocale::NumberOption> source_type;
  typedef QLocale_NumberOption_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QLocale::NumberOption
template <>
struct Converter<enum QLocale::NumberOption>
{
public:
  typedef enum QLocale::NumberOption source_type;
  typedef QLocale_NumberOption_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
