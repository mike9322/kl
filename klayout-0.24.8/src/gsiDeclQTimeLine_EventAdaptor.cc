
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file generated/gsiDeclQTimeLine_EventAdaptor.cc
*  @brief Event adaptor implementations for QTimeLine
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtCore.h"
#include "gsiDeclQTimeLine_EventAdaptor.h"

// -----------------------------------------------------------------------
// class QTimeLine_EventAdaptor

QTimeLine_EventAdaptor::QTimeLine_EventAdaptor (QObject *host)
  : QObject ()
{
  connect (host, SIGNAL(destroyed(QObject *)), this, SLOT(destroyed(QObject *)));
  connect (host, SIGNAL(finished()), this, SLOT(finished()));
  connect (host, SIGNAL(frameChanged(int)), this, SLOT(frameChanged(int)));
  connect (host, SIGNAL(stateChanged(QTimeLine::State)), this, SLOT(stateChanged(QTimeLine::State)));
  connect (host, SIGNAL(valueChanged(double)), this, SLOT(valueChanged(double)));
}

//  Event QTimeLine::destroyed(QObject *arg1)
void QTimeLine_EventAdaptor::destroyed(QObject *arg1) {
BEGIN_PROTECTED
  destroyed_e_1302(arg1);
END_PROTECTED
}

//  Event QTimeLine::finished()
void QTimeLine_EventAdaptor::finished() {
BEGIN_PROTECTED
  finished_e_0();
END_PROTECTED
}

//  Event QTimeLine::frameChanged(int arg1)
void QTimeLine_EventAdaptor::frameChanged(int arg1) {
BEGIN_PROTECTED
  frameChanged_e_767(arg1);
END_PROTECTED
}

//  Event QTimeLine::stateChanged(QTimeLine::State newState)
void QTimeLine_EventAdaptor::stateChanged(QTimeLine::State newState) {
BEGIN_PROTECTED
  stateChanged_e_1937(qt_gsi::CppToQtAdaptor<QTimeLine::State>(newState));
END_PROTECTED
}

//  Event QTimeLine::valueChanged(double x)
void QTimeLine_EventAdaptor::valueChanged(double x) {
BEGIN_PROTECTED
  valueChanged_e_1071(x);
END_PROTECTED
}
