
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQBasicTimer.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtCore.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQBasicTimer_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QBasicTimer

//  Constructor QBasicTimer::QBasicTimer()


static void _init_ctor_QBasicTimer_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QBasicTimer *> ();
}

static void _call_ctor_QBasicTimer_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QBasicTimer *> (new QBasicTimer ());
}

static qt_gsi::GenericStaticMethod *_create_ctor_QBasicTimer_0 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QBasicTimer::QBasicTimer()\nThis method creates an object of class QBasicTimer.", &_init_ctor_QBasicTimer_0, &_call_ctor_QBasicTimer_0);
}

// bool QBasicTimer::isActive()


static void _init_f_isActive_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isActive_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QBasicTimer *)cls)->isActive ());
}

static qt_gsi::GenericMethod *_create_f_isActive_c0 ()
{
  return new qt_gsi::GenericMethod ("isActive?", "@brief Method bool QBasicTimer::isActive()\n", true, &_init_f_isActive_c0, &_call_f_isActive_c0);
}

// void QBasicTimer::start(int msec, QObject *obj)


static void _init_f_start_1961 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("msec");
  decl->add_arg<int > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("obj");
  decl->add_arg<QObject * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_start_1961 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  QObject *arg2 = args.read<QObject * > ();
  ((QBasicTimer *)cls)->start (arg1, arg2);
}

static qt_gsi::GenericMethod *_create_f_start_1961 ()
{
  return new qt_gsi::GenericMethod ("start", "@brief Method void QBasicTimer::start(int msec, QObject *obj)\n", false, &_init_f_start_1961, &_call_f_start_1961);
}

// void QBasicTimer::stop()


static void _init_f_stop_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_stop_0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ((QBasicTimer *)cls)->stop ();
}

static qt_gsi::GenericMethod *_create_f_stop_0 ()
{
  return new qt_gsi::GenericMethod ("stop", "@brief Method void QBasicTimer::stop()\n", false, &_init_f_stop_0, &_call_f_stop_0);
}

// int QBasicTimer::timerId()


static void _init_f_timerId_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_timerId_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QBasicTimer *)cls)->timerId ());
}

static qt_gsi::GenericMethod *_create_f_timerId_c0 ()
{
  return new qt_gsi::GenericMethod ("timerId", "@brief Method int QBasicTimer::timerId()\n", true, &_init_f_timerId_c0, &_call_f_timerId_c0);
}


namespace gsi
{
gsi::Class<QBasicTimer> decl_QBasicTimer ("QBasicTimer",
  gsi::Methods(_create_ctor_QBasicTimer_0 ()) +
  gsi::Methods(_create_f_isActive_c0 ()) +
  gsi::Methods(_create_f_start_1961 ()) +
  gsi::Methods(_create_f_stop_0 ()) +
  gsi::Methods(_create_f_timerId_c0 ()),
  "@qt\n@brief Binding of QBasicTimer");

}

