
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQTextCharFormat.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include "gsiQtGui.h"
#include "gsiDeclQtTypeTraits.h"
#include "gsiDeclQTextCharFormat_Enums.h"
#include <memory>

// -----------------------------------------------------------------------
// class QTextCharFormat

//  Constructor QTextCharFormat::QTextCharFormat()


static void _init_ctor_QTextCharFormat_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QTextCharFormat *> ();
}

static void _call_ctor_QTextCharFormat_0 (const qt_gsi::GenericStaticMethod *decl, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QTextCharFormat *> (new QTextCharFormat ());
}

static qt_gsi::GenericStaticMethod *_create_ctor_QTextCharFormat_0 ()
{
  return new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QTextCharFormat::QTextCharFormat()\nThis method creates an object of class QTextCharFormat.", &_init_ctor_QTextCharFormat_0, &_call_ctor_QTextCharFormat_0);
}

// QString QTextCharFormat::anchorHref()


static void _init_f_anchorHref_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_anchorHref_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QTextCharFormat *)cls)->anchorHref ());
}

static qt_gsi::GenericMethod *_create_f_anchorHref_c0 ()
{
  return new qt_gsi::GenericMethod (":anchorHref", "@brief Method QString QTextCharFormat::anchorHref()\n", true, &_init_f_anchorHref_c0, &_call_f_anchorHref_c0);
}

// QString QTextCharFormat::anchorName()


static void _init_f_anchorName_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_anchorName_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QTextCharFormat *)cls)->anchorName ());
}

static qt_gsi::GenericMethod *_create_f_anchorName_c0 ()
{
  return new qt_gsi::GenericMethod (":anchorName", "@brief Method QString QTextCharFormat::anchorName()\n", true, &_init_f_anchorName_c0, &_call_f_anchorName_c0);
}

// QStringList QTextCharFormat::anchorNames()


static void _init_f_anchorNames_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QStringList>::target_type > ();
}

static void _call_f_anchorNames_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QStringList>::target_type > ((qt_gsi::Converter<QStringList>::target_type)qt_gsi::CppToQtAdaptor<QStringList>(((QTextCharFormat *)cls)->anchorNames ()));
}

static qt_gsi::GenericMethod *_create_f_anchorNames_c0 ()
{
  return new qt_gsi::GenericMethod (":anchorNames", "@brief Method QStringList QTextCharFormat::anchorNames()\n", true, &_init_f_anchorNames_c0, &_call_f_anchorNames_c0);
}

// QFont QTextCharFormat::font()


static void _init_f_font_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QFont > ();
}

static void _call_f_font_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QFont > ((QFont)((QTextCharFormat *)cls)->font ());
}

static qt_gsi::GenericMethod *_create_f_font_c0 ()
{
  return new qt_gsi::GenericMethod (":font", "@brief Method QFont QTextCharFormat::font()\n", true, &_init_f_font_c0, &_call_f_font_c0);
}

// QFont::Capitalization QTextCharFormat::fontCapitalization()


static void _init_f_fontCapitalization_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QFont::Capitalization>::target_type > ();
}

static void _call_f_fontCapitalization_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QFont::Capitalization>::target_type > ((qt_gsi::Converter<QFont::Capitalization>::target_type)qt_gsi::CppToQtAdaptor<QFont::Capitalization>(((QTextCharFormat *)cls)->fontCapitalization ()));
}

static qt_gsi::GenericMethod *_create_f_fontCapitalization_c0 ()
{
  return new qt_gsi::GenericMethod (":fontCapitalization", "@brief Method QFont::Capitalization QTextCharFormat::fontCapitalization()\n", true, &_init_f_fontCapitalization_c0, &_call_f_fontCapitalization_c0);
}

// QString QTextCharFormat::fontFamily()


static void _init_f_fontFamily_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_fontFamily_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QTextCharFormat *)cls)->fontFamily ());
}

static qt_gsi::GenericMethod *_create_f_fontFamily_c0 ()
{
  return new qt_gsi::GenericMethod (":fontFamily", "@brief Method QString QTextCharFormat::fontFamily()\n", true, &_init_f_fontFamily_c0, &_call_f_fontFamily_c0);
}

// bool QTextCharFormat::fontFixedPitch()


static void _init_f_fontFixedPitch_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_fontFixedPitch_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QTextCharFormat *)cls)->fontFixedPitch ());
}

static qt_gsi::GenericMethod *_create_f_fontFixedPitch_c0 ()
{
  return new qt_gsi::GenericMethod (":fontFixedPitch", "@brief Method bool QTextCharFormat::fontFixedPitch()\n", true, &_init_f_fontFixedPitch_c0, &_call_f_fontFixedPitch_c0);
}

// bool QTextCharFormat::fontItalic()


static void _init_f_fontItalic_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_fontItalic_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QTextCharFormat *)cls)->fontItalic ());
}

static qt_gsi::GenericMethod *_create_f_fontItalic_c0 ()
{
  return new qt_gsi::GenericMethod (":fontItalic", "@brief Method bool QTextCharFormat::fontItalic()\n", true, &_init_f_fontItalic_c0, &_call_f_fontItalic_c0);
}

// bool QTextCharFormat::fontKerning()


static void _init_f_fontKerning_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_fontKerning_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QTextCharFormat *)cls)->fontKerning ());
}

static qt_gsi::GenericMethod *_create_f_fontKerning_c0 ()
{
  return new qt_gsi::GenericMethod (":fontKerning", "@brief Method bool QTextCharFormat::fontKerning()\n", true, &_init_f_fontKerning_c0, &_call_f_fontKerning_c0);
}

// double QTextCharFormat::fontLetterSpacing()


static void _init_f_fontLetterSpacing_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<double > ();
}

static void _call_f_fontLetterSpacing_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<double > ((double)((QTextCharFormat *)cls)->fontLetterSpacing ());
}

static qt_gsi::GenericMethod *_create_f_fontLetterSpacing_c0 ()
{
  return new qt_gsi::GenericMethod (":fontLetterSpacing", "@brief Method double QTextCharFormat::fontLetterSpacing()\n", true, &_init_f_fontLetterSpacing_c0, &_call_f_fontLetterSpacing_c0);
}

// bool QTextCharFormat::fontOverline()


static void _init_f_fontOverline_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_fontOverline_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QTextCharFormat *)cls)->fontOverline ());
}

static qt_gsi::GenericMethod *_create_f_fontOverline_c0 ()
{
  return new qt_gsi::GenericMethod (":fontOverline", "@brief Method bool QTextCharFormat::fontOverline()\n", true, &_init_f_fontOverline_c0, &_call_f_fontOverline_c0);
}

// double QTextCharFormat::fontPointSize()


static void _init_f_fontPointSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<double > ();
}

static void _call_f_fontPointSize_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<double > ((double)((QTextCharFormat *)cls)->fontPointSize ());
}

static qt_gsi::GenericMethod *_create_f_fontPointSize_c0 ()
{
  return new qt_gsi::GenericMethod (":fontPointSize", "@brief Method double QTextCharFormat::fontPointSize()\n", true, &_init_f_fontPointSize_c0, &_call_f_fontPointSize_c0);
}

// bool QTextCharFormat::fontStrikeOut()


static void _init_f_fontStrikeOut_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_fontStrikeOut_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QTextCharFormat *)cls)->fontStrikeOut ());
}

static qt_gsi::GenericMethod *_create_f_fontStrikeOut_c0 ()
{
  return new qt_gsi::GenericMethod (":fontStrikeOut", "@brief Method bool QTextCharFormat::fontStrikeOut()\n", true, &_init_f_fontStrikeOut_c0, &_call_f_fontStrikeOut_c0);
}

// QFont::StyleHint QTextCharFormat::fontStyleHint()


static void _init_f_fontStyleHint_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QFont::StyleHint>::target_type > ();
}

static void _call_f_fontStyleHint_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QFont::StyleHint>::target_type > ((qt_gsi::Converter<QFont::StyleHint>::target_type)qt_gsi::CppToQtAdaptor<QFont::StyleHint>(((QTextCharFormat *)cls)->fontStyleHint ()));
}

static qt_gsi::GenericMethod *_create_f_fontStyleHint_c0 ()
{
  return new qt_gsi::GenericMethod (":fontStyleHint", "@brief Method QFont::StyleHint QTextCharFormat::fontStyleHint()\n", true, &_init_f_fontStyleHint_c0, &_call_f_fontStyleHint_c0);
}

// QFont::StyleStrategy QTextCharFormat::fontStyleStrategy()


static void _init_f_fontStyleStrategy_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QFont::StyleStrategy>::target_type > ();
}

static void _call_f_fontStyleStrategy_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QFont::StyleStrategy>::target_type > ((qt_gsi::Converter<QFont::StyleStrategy>::target_type)qt_gsi::CppToQtAdaptor<QFont::StyleStrategy>(((QTextCharFormat *)cls)->fontStyleStrategy ()));
}

static qt_gsi::GenericMethod *_create_f_fontStyleStrategy_c0 ()
{
  return new qt_gsi::GenericMethod (":fontStyleStrategy", "@brief Method QFont::StyleStrategy QTextCharFormat::fontStyleStrategy()\n", true, &_init_f_fontStyleStrategy_c0, &_call_f_fontStyleStrategy_c0);
}

// bool QTextCharFormat::fontUnderline()


static void _init_f_fontUnderline_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_fontUnderline_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QTextCharFormat *)cls)->fontUnderline ());
}

static qt_gsi::GenericMethod *_create_f_fontUnderline_c0 ()
{
  return new qt_gsi::GenericMethod (":fontUnderline", "@brief Method bool QTextCharFormat::fontUnderline()\n", true, &_init_f_fontUnderline_c0, &_call_f_fontUnderline_c0);
}

// int QTextCharFormat::fontWeight()


static void _init_f_fontWeight_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_fontWeight_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QTextCharFormat *)cls)->fontWeight ());
}

static qt_gsi::GenericMethod *_create_f_fontWeight_c0 ()
{
  return new qt_gsi::GenericMethod (":fontWeight", "@brief Method int QTextCharFormat::fontWeight()\n", true, &_init_f_fontWeight_c0, &_call_f_fontWeight_c0);
}

// double QTextCharFormat::fontWordSpacing()


static void _init_f_fontWordSpacing_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<double > ();
}

static void _call_f_fontWordSpacing_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<double > ((double)((QTextCharFormat *)cls)->fontWordSpacing ());
}

static qt_gsi::GenericMethod *_create_f_fontWordSpacing_c0 ()
{
  return new qt_gsi::GenericMethod (":fontWordSpacing", "@brief Method double QTextCharFormat::fontWordSpacing()\n", true, &_init_f_fontWordSpacing_c0, &_call_f_fontWordSpacing_c0);
}

// bool QTextCharFormat::isAnchor()


static void _init_f_isAnchor_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isAnchor_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QTextCharFormat *)cls)->isAnchor ());
}

static qt_gsi::GenericMethod *_create_f_isAnchor_c0 ()
{
  return new qt_gsi::GenericMethod ("isAnchor?|:anchor", "@brief Method bool QTextCharFormat::isAnchor()\n", true, &_init_f_isAnchor_c0, &_call_f_isAnchor_c0);
}

// bool QTextCharFormat::isValid()


static void _init_f_isValid_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isValid_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<bool > ((bool)((QTextCharFormat *)cls)->isValid ());
}

static qt_gsi::GenericMethod *_create_f_isValid_c0 ()
{
  return new qt_gsi::GenericMethod ("isValid?", "@brief Method bool QTextCharFormat::isValid()\n", true, &_init_f_isValid_c0, &_call_f_isValid_c0);
}

// void QTextCharFormat::setAnchor(bool anchor)


static void _init_f_setAnchor_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("anchor");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setAnchor_864 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QTextCharFormat *)cls)->setAnchor (arg1);
}

static qt_gsi::GenericMethod *_create_f_setAnchor_864 ()
{
  return new qt_gsi::GenericMethod ("setAnchor|anchor=", "@brief Method void QTextCharFormat::setAnchor(bool anchor)\n", false, &_init_f_setAnchor_864, &_call_f_setAnchor_864);
}

// void QTextCharFormat::setAnchorHref(const QString &value)


static void _init_f_setAnchorHref_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("value");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setAnchorHref_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QTextCharFormat *)cls)->setAnchorHref (arg1);
}

static qt_gsi::GenericMethod *_create_f_setAnchorHref_2025 ()
{
  return new qt_gsi::GenericMethod ("setAnchorHref|anchorHref=", "@brief Method void QTextCharFormat::setAnchorHref(const QString &value)\n", false, &_init_f_setAnchorHref_2025, &_call_f_setAnchorHref_2025);
}

// void QTextCharFormat::setAnchorName(const QString &name)


static void _init_f_setAnchorName_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setAnchorName_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QTextCharFormat *)cls)->setAnchorName (arg1);
}

static qt_gsi::GenericMethod *_create_f_setAnchorName_2025 ()
{
  return new qt_gsi::GenericMethod ("setAnchorName|anchorName=", "@brief Method void QTextCharFormat::setAnchorName(const QString &name)\n", false, &_init_f_setAnchorName_2025, &_call_f_setAnchorName_2025);
}

// void QTextCharFormat::setAnchorNames(const QStringList &names)


static void _init_f_setAnchorNames_2437 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("names");
  decl->add_arg<const qt_gsi::Converter<QStringList>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setAnchorNames_2437 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QStringList>::target_type & arg1 = args.read<const qt_gsi::Converter<QStringList>::target_type & > ();
  ((QTextCharFormat *)cls)->setAnchorNames (qt_gsi::QtToCppAdaptor<QStringList>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setAnchorNames_2437 ()
{
  return new qt_gsi::GenericMethod ("setAnchorNames|anchorNames=", "@brief Method void QTextCharFormat::setAnchorNames(const QStringList &names)\n", false, &_init_f_setAnchorNames_2437, &_call_f_setAnchorNames_2437);
}

// void QTextCharFormat::setFont(const QFont &font)


static void _init_f_setFont_1801 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("font");
  decl->add_arg<const QFont & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFont_1801 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QFont &arg1 = args.read<const QFont & > ();
  ((QTextCharFormat *)cls)->setFont (arg1);
}

static qt_gsi::GenericMethod *_create_f_setFont_1801 ()
{
  return new qt_gsi::GenericMethod ("setFont|font=", "@brief Method void QTextCharFormat::setFont(const QFont &font)\n", false, &_init_f_setFont_1801, &_call_f_setFont_1801);
}

// void QTextCharFormat::setFontCapitalization(QFont::Capitalization capitalization)


static void _init_f_setFontCapitalization_2508 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("capitalization");
  decl->add_arg<const qt_gsi::Converter<QFont::Capitalization>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFontCapitalization_2508 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QFont::Capitalization>::target_type & arg1 = args.read<const qt_gsi::Converter<QFont::Capitalization>::target_type & > ();
  ((QTextCharFormat *)cls)->setFontCapitalization (qt_gsi::QtToCppAdaptor<QFont::Capitalization>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setFontCapitalization_2508 ()
{
  return new qt_gsi::GenericMethod ("setFontCapitalization|fontCapitalization=", "@brief Method void QTextCharFormat::setFontCapitalization(QFont::Capitalization capitalization)\n", false, &_init_f_setFontCapitalization_2508, &_call_f_setFontCapitalization_2508);
}

// void QTextCharFormat::setFontFamily(const QString &family)


static void _init_f_setFontFamily_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("family");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFontFamily_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QTextCharFormat *)cls)->setFontFamily (arg1);
}

static qt_gsi::GenericMethod *_create_f_setFontFamily_2025 ()
{
  return new qt_gsi::GenericMethod ("setFontFamily|fontFamily=", "@brief Method void QTextCharFormat::setFontFamily(const QString &family)\n", false, &_init_f_setFontFamily_2025, &_call_f_setFontFamily_2025);
}

// void QTextCharFormat::setFontFixedPitch(bool fixedPitch)


static void _init_f_setFontFixedPitch_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("fixedPitch");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFontFixedPitch_864 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QTextCharFormat *)cls)->setFontFixedPitch (arg1);
}

static qt_gsi::GenericMethod *_create_f_setFontFixedPitch_864 ()
{
  return new qt_gsi::GenericMethod ("setFontFixedPitch|fontFixedPitch=", "@brief Method void QTextCharFormat::setFontFixedPitch(bool fixedPitch)\n", false, &_init_f_setFontFixedPitch_864, &_call_f_setFontFixedPitch_864);
}

// void QTextCharFormat::setFontItalic(bool italic)


static void _init_f_setFontItalic_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("italic");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFontItalic_864 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QTextCharFormat *)cls)->setFontItalic (arg1);
}

static qt_gsi::GenericMethod *_create_f_setFontItalic_864 ()
{
  return new qt_gsi::GenericMethod ("setFontItalic|fontItalic=", "@brief Method void QTextCharFormat::setFontItalic(bool italic)\n", false, &_init_f_setFontItalic_864, &_call_f_setFontItalic_864);
}

// void QTextCharFormat::setFontKerning(bool enable)


static void _init_f_setFontKerning_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("enable");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFontKerning_864 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QTextCharFormat *)cls)->setFontKerning (arg1);
}

static qt_gsi::GenericMethod *_create_f_setFontKerning_864 ()
{
  return new qt_gsi::GenericMethod ("setFontKerning|fontKerning=", "@brief Method void QTextCharFormat::setFontKerning(bool enable)\n", false, &_init_f_setFontKerning_864, &_call_f_setFontKerning_864);
}

// void QTextCharFormat::setFontLetterSpacing(double spacing)


static void _init_f_setFontLetterSpacing_1071 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("spacing");
  decl->add_arg<double > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFontLetterSpacing_1071 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  double arg1 = args.read<double > ();
  ((QTextCharFormat *)cls)->setFontLetterSpacing (arg1);
}

static qt_gsi::GenericMethod *_create_f_setFontLetterSpacing_1071 ()
{
  return new qt_gsi::GenericMethod ("setFontLetterSpacing|fontLetterSpacing=", "@brief Method void QTextCharFormat::setFontLetterSpacing(double spacing)\n", false, &_init_f_setFontLetterSpacing_1071, &_call_f_setFontLetterSpacing_1071);
}

// void QTextCharFormat::setFontOverline(bool overline)


static void _init_f_setFontOverline_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("overline");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFontOverline_864 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QTextCharFormat *)cls)->setFontOverline (arg1);
}

static qt_gsi::GenericMethod *_create_f_setFontOverline_864 ()
{
  return new qt_gsi::GenericMethod ("setFontOverline|fontOverline=", "@brief Method void QTextCharFormat::setFontOverline(bool overline)\n", false, &_init_f_setFontOverline_864, &_call_f_setFontOverline_864);
}

// void QTextCharFormat::setFontPointSize(double size)


static void _init_f_setFontPointSize_1071 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("size");
  decl->add_arg<double > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFontPointSize_1071 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  double arg1 = args.read<double > ();
  ((QTextCharFormat *)cls)->setFontPointSize (arg1);
}

static qt_gsi::GenericMethod *_create_f_setFontPointSize_1071 ()
{
  return new qt_gsi::GenericMethod ("setFontPointSize|fontPointSize=", "@brief Method void QTextCharFormat::setFontPointSize(double size)\n", false, &_init_f_setFontPointSize_1071, &_call_f_setFontPointSize_1071);
}

// void QTextCharFormat::setFontStrikeOut(bool strikeOut)


static void _init_f_setFontStrikeOut_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("strikeOut");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFontStrikeOut_864 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QTextCharFormat *)cls)->setFontStrikeOut (arg1);
}

static qt_gsi::GenericMethod *_create_f_setFontStrikeOut_864 ()
{
  return new qt_gsi::GenericMethod ("setFontStrikeOut|fontStrikeOut=", "@brief Method void QTextCharFormat::setFontStrikeOut(bool strikeOut)\n", false, &_init_f_setFontStrikeOut_864, &_call_f_setFontStrikeOut_864);
}

// void QTextCharFormat::setFontStyleHint(QFont::StyleHint hint, QFont::StyleStrategy strategy)


static void _init_f_setFontStyleHint_4284 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("hint");
  decl->add_arg<const qt_gsi::Converter<QFont::StyleHint>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("strategy", true, "QFont::PreferDefault");
  decl->add_arg<const qt_gsi::Converter<QFont::StyleStrategy>::target_type & > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_setFontStyleHint_4284 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QFont::StyleHint>::target_type & arg1 = args.read<const qt_gsi::Converter<QFont::StyleHint>::target_type & > ();
  tl::Heap heap;
  const qt_gsi::Converter<QFont::StyleStrategy>::target_type & arg2 = args ? args.read<const qt_gsi::Converter<QFont::StyleStrategy>::target_type & > () : (const qt_gsi::Converter<QFont::StyleStrategy>::target_type &)(qt_gsi::CppToQtReadAdaptor<QFont::StyleStrategy>(heap, QFont::PreferDefault));
  ((QTextCharFormat *)cls)->setFontStyleHint (qt_gsi::QtToCppAdaptor<QFont::StyleHint>(arg1).cref(), qt_gsi::QtToCppAdaptor<QFont::StyleStrategy>(arg2).cref());
}

static qt_gsi::GenericMethod *_create_f_setFontStyleHint_4284 ()
{
  return new qt_gsi::GenericMethod ("setFontStyleHint", "@brief Method void QTextCharFormat::setFontStyleHint(QFont::StyleHint hint, QFont::StyleStrategy strategy)\n", false, &_init_f_setFontStyleHint_4284, &_call_f_setFontStyleHint_4284);
}

// void QTextCharFormat::setFontStyleStrategy(QFont::StyleStrategy strategy)


static void _init_f_setFontStyleStrategy_2420 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("strategy");
  decl->add_arg<const qt_gsi::Converter<QFont::StyleStrategy>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFontStyleStrategy_2420 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QFont::StyleStrategy>::target_type & arg1 = args.read<const qt_gsi::Converter<QFont::StyleStrategy>::target_type & > ();
  ((QTextCharFormat *)cls)->setFontStyleStrategy (qt_gsi::QtToCppAdaptor<QFont::StyleStrategy>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setFontStyleStrategy_2420 ()
{
  return new qt_gsi::GenericMethod ("setFontStyleStrategy|fontStyleStrategy=", "@brief Method void QTextCharFormat::setFontStyleStrategy(QFont::StyleStrategy strategy)\n", false, &_init_f_setFontStyleStrategy_2420, &_call_f_setFontStyleStrategy_2420);
}

// void QTextCharFormat::setFontUnderline(bool underline)


static void _init_f_setFontUnderline_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("underline");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFontUnderline_864 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  bool arg1 = args.read<bool > ();
  ((QTextCharFormat *)cls)->setFontUnderline (arg1);
}

static qt_gsi::GenericMethod *_create_f_setFontUnderline_864 ()
{
  return new qt_gsi::GenericMethod ("setFontUnderline|fontUnderline=", "@brief Method void QTextCharFormat::setFontUnderline(bool underline)\n", false, &_init_f_setFontUnderline_864, &_call_f_setFontUnderline_864);
}

// void QTextCharFormat::setFontWeight(int weight)


static void _init_f_setFontWeight_767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("weight");
  decl->add_arg<int > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFontWeight_767 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ((QTextCharFormat *)cls)->setFontWeight (arg1);
}

static qt_gsi::GenericMethod *_create_f_setFontWeight_767 ()
{
  return new qt_gsi::GenericMethod ("setFontWeight|fontWeight=", "@brief Method void QTextCharFormat::setFontWeight(int weight)\n", false, &_init_f_setFontWeight_767, &_call_f_setFontWeight_767);
}

// void QTextCharFormat::setFontWordSpacing(double spacing)


static void _init_f_setFontWordSpacing_1071 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("spacing");
  decl->add_arg<double > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFontWordSpacing_1071 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  double arg1 = args.read<double > ();
  ((QTextCharFormat *)cls)->setFontWordSpacing (arg1);
}

static qt_gsi::GenericMethod *_create_f_setFontWordSpacing_1071 ()
{
  return new qt_gsi::GenericMethod ("setFontWordSpacing|fontWordSpacing=", "@brief Method void QTextCharFormat::setFontWordSpacing(double spacing)\n", false, &_init_f_setFontWordSpacing_1071, &_call_f_setFontWordSpacing_1071);
}

// void QTextCharFormat::setTableCellColumnSpan(int tableCellColumnSpan)


static void _init_f_setTableCellColumnSpan_767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("tableCellColumnSpan");
  decl->add_arg<int > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setTableCellColumnSpan_767 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ((QTextCharFormat *)cls)->setTableCellColumnSpan (arg1);
}

static qt_gsi::GenericMethod *_create_f_setTableCellColumnSpan_767 ()
{
  return new qt_gsi::GenericMethod ("setTableCellColumnSpan|tableCellColumnSpan=", "@brief Method void QTextCharFormat::setTableCellColumnSpan(int tableCellColumnSpan)\n", false, &_init_f_setTableCellColumnSpan_767, &_call_f_setTableCellColumnSpan_767);
}

// void QTextCharFormat::setTableCellRowSpan(int tableCellRowSpan)


static void _init_f_setTableCellRowSpan_767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("tableCellRowSpan");
  decl->add_arg<int > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setTableCellRowSpan_767 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  int arg1 = args.read<int > ();
  ((QTextCharFormat *)cls)->setTableCellRowSpan (arg1);
}

static qt_gsi::GenericMethod *_create_f_setTableCellRowSpan_767 ()
{
  return new qt_gsi::GenericMethod ("setTableCellRowSpan|tableCellRowSpan=", "@brief Method void QTextCharFormat::setTableCellRowSpan(int tableCellRowSpan)\n", false, &_init_f_setTableCellRowSpan_767, &_call_f_setTableCellRowSpan_767);
}

// void QTextCharFormat::setTextOutline(const QPen &pen)


static void _init_f_setTextOutline_1685 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pen");
  decl->add_arg<const QPen & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setTextOutline_1685 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QPen &arg1 = args.read<const QPen & > ();
  ((QTextCharFormat *)cls)->setTextOutline (arg1);
}

static qt_gsi::GenericMethod *_create_f_setTextOutline_1685 ()
{
  return new qt_gsi::GenericMethod ("setTextOutline|textOutline=", "@brief Method void QTextCharFormat::setTextOutline(const QPen &pen)\n", false, &_init_f_setTextOutline_1685, &_call_f_setTextOutline_1685);
}

// void QTextCharFormat::setToolTip(const QString &tip)


static void _init_f_setToolTip_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("tip");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setToolTip_2025 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QString &arg1 = args.read<const QString & > ();
  ((QTextCharFormat *)cls)->setToolTip (arg1);
}

static qt_gsi::GenericMethod *_create_f_setToolTip_2025 ()
{
  return new qt_gsi::GenericMethod ("setToolTip|toolTip=", "@brief Method void QTextCharFormat::setToolTip(const QString &tip)\n", false, &_init_f_setToolTip_2025, &_call_f_setToolTip_2025);
}

// void QTextCharFormat::setUnderlineColor(const QColor &color)


static void _init_f_setUnderlineColor_1905 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("color");
  decl->add_arg<const QColor & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setUnderlineColor_1905 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const QColor &arg1 = args.read<const QColor & > ();
  ((QTextCharFormat *)cls)->setUnderlineColor (arg1);
}

static qt_gsi::GenericMethod *_create_f_setUnderlineColor_1905 ()
{
  return new qt_gsi::GenericMethod ("setUnderlineColor|underlineColor=", "@brief Method void QTextCharFormat::setUnderlineColor(const QColor &color)\n", false, &_init_f_setUnderlineColor_1905, &_call_f_setUnderlineColor_1905);
}

// void QTextCharFormat::setUnderlineStyle(QTextCharFormat::UnderlineStyle style)


static void _init_f_setUnderlineStyle_3516 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("style");
  decl->add_arg<const qt_gsi::Converter<QTextCharFormat::UnderlineStyle>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setUnderlineStyle_3516 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QTextCharFormat::UnderlineStyle>::target_type & arg1 = args.read<const qt_gsi::Converter<QTextCharFormat::UnderlineStyle>::target_type & > ();
  ((QTextCharFormat *)cls)->setUnderlineStyle (qt_gsi::QtToCppAdaptor<QTextCharFormat::UnderlineStyle>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setUnderlineStyle_3516 ()
{
  return new qt_gsi::GenericMethod ("setUnderlineStyle|underlineStyle=", "@brief Method void QTextCharFormat::setUnderlineStyle(QTextCharFormat::UnderlineStyle style)\n", false, &_init_f_setUnderlineStyle_3516, &_call_f_setUnderlineStyle_3516);
}

// void QTextCharFormat::setVerticalAlignment(QTextCharFormat::VerticalAlignment alignment)


static void _init_f_setVerticalAlignment_3806 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("alignment");
  decl->add_arg<const qt_gsi::Converter<QTextCharFormat::VerticalAlignment>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setVerticalAlignment_3806 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  const qt_gsi::Converter<QTextCharFormat::VerticalAlignment>::target_type & arg1 = args.read<const qt_gsi::Converter<QTextCharFormat::VerticalAlignment>::target_type & > ();
  ((QTextCharFormat *)cls)->setVerticalAlignment (qt_gsi::QtToCppAdaptor<QTextCharFormat::VerticalAlignment>(arg1).cref());
}

static qt_gsi::GenericMethod *_create_f_setVerticalAlignment_3806 ()
{
  return new qt_gsi::GenericMethod ("setVerticalAlignment|verticalAlignment=", "@brief Method void QTextCharFormat::setVerticalAlignment(QTextCharFormat::VerticalAlignment alignment)\n", false, &_init_f_setVerticalAlignment_3806, &_call_f_setVerticalAlignment_3806);
}

// int QTextCharFormat::tableCellColumnSpan()


static void _init_f_tableCellColumnSpan_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_tableCellColumnSpan_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QTextCharFormat *)cls)->tableCellColumnSpan ());
}

static qt_gsi::GenericMethod *_create_f_tableCellColumnSpan_c0 ()
{
  return new qt_gsi::GenericMethod (":tableCellColumnSpan", "@brief Method int QTextCharFormat::tableCellColumnSpan()\n", true, &_init_f_tableCellColumnSpan_c0, &_call_f_tableCellColumnSpan_c0);
}

// int QTextCharFormat::tableCellRowSpan()


static void _init_f_tableCellRowSpan_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_tableCellRowSpan_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<int > ((int)((QTextCharFormat *)cls)->tableCellRowSpan ());
}

static qt_gsi::GenericMethod *_create_f_tableCellRowSpan_c0 ()
{
  return new qt_gsi::GenericMethod (":tableCellRowSpan", "@brief Method int QTextCharFormat::tableCellRowSpan()\n", true, &_init_f_tableCellRowSpan_c0, &_call_f_tableCellRowSpan_c0);
}

// QPen QTextCharFormat::textOutline()


static void _init_f_textOutline_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QPen > ();
}

static void _call_f_textOutline_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QPen > ((QPen)((QTextCharFormat *)cls)->textOutline ());
}

static qt_gsi::GenericMethod *_create_f_textOutline_c0 ()
{
  return new qt_gsi::GenericMethod (":textOutline", "@brief Method QPen QTextCharFormat::textOutline()\n", true, &_init_f_textOutline_c0, &_call_f_textOutline_c0);
}

// QString QTextCharFormat::toolTip()


static void _init_f_toolTip_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_toolTip_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QString > ((QString)((QTextCharFormat *)cls)->toolTip ());
}

static qt_gsi::GenericMethod *_create_f_toolTip_c0 ()
{
  return new qt_gsi::GenericMethod (":toolTip", "@brief Method QString QTextCharFormat::toolTip()\n", true, &_init_f_toolTip_c0, &_call_f_toolTip_c0);
}

// QColor QTextCharFormat::underlineColor()


static void _init_f_underlineColor_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QColor > ();
}

static void _call_f_underlineColor_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<QColor > ((QColor)((QTextCharFormat *)cls)->underlineColor ());
}

static qt_gsi::GenericMethod *_create_f_underlineColor_c0 ()
{
  return new qt_gsi::GenericMethod (":underlineColor", "@brief Method QColor QTextCharFormat::underlineColor()\n", true, &_init_f_underlineColor_c0, &_call_f_underlineColor_c0);
}

// QTextCharFormat::UnderlineStyle QTextCharFormat::underlineStyle()


static void _init_f_underlineStyle_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QTextCharFormat::UnderlineStyle>::target_type > ();
}

static void _call_f_underlineStyle_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QTextCharFormat::UnderlineStyle>::target_type > ((qt_gsi::Converter<QTextCharFormat::UnderlineStyle>::target_type)qt_gsi::CppToQtAdaptor<QTextCharFormat::UnderlineStyle>(((QTextCharFormat *)cls)->underlineStyle ()));
}

static qt_gsi::GenericMethod *_create_f_underlineStyle_c0 ()
{
  return new qt_gsi::GenericMethod (":underlineStyle", "@brief Method QTextCharFormat::UnderlineStyle QTextCharFormat::underlineStyle()\n", true, &_init_f_underlineStyle_c0, &_call_f_underlineStyle_c0);
}

// QTextCharFormat::VerticalAlignment QTextCharFormat::verticalAlignment()


static void _init_f_verticalAlignment_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QTextCharFormat::VerticalAlignment>::target_type > ();
}

static void _call_f_verticalAlignment_c0 (const qt_gsi::GenericMethod *decl, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  ret.write<qt_gsi::Converter<QTextCharFormat::VerticalAlignment>::target_type > ((qt_gsi::Converter<QTextCharFormat::VerticalAlignment>::target_type)qt_gsi::CppToQtAdaptor<QTextCharFormat::VerticalAlignment>(((QTextCharFormat *)cls)->verticalAlignment ()));
}

static qt_gsi::GenericMethod *_create_f_verticalAlignment_c0 ()
{
  return new qt_gsi::GenericMethod (":verticalAlignment", "@brief Method QTextCharFormat::VerticalAlignment QTextCharFormat::verticalAlignment()\n", true, &_init_f_verticalAlignment_c0, &_call_f_verticalAlignment_c0);
}


namespace gsi
{
extern gsi::Class<QTextFormat> decl_QTextFormat;

gsi::Class<QTextCharFormat> decl_QTextCharFormat (decl_QTextFormat, "QTextCharFormat",
  gsi::Methods(_create_ctor_QTextCharFormat_0 ()) +
  gsi::Methods(_create_f_anchorHref_c0 ()) +
  gsi::Methods(_create_f_anchorName_c0 ()) +
  gsi::Methods(_create_f_anchorNames_c0 ()) +
  gsi::Methods(_create_f_font_c0 ()) +
  gsi::Methods(_create_f_fontCapitalization_c0 ()) +
  gsi::Methods(_create_f_fontFamily_c0 ()) +
  gsi::Methods(_create_f_fontFixedPitch_c0 ()) +
  gsi::Methods(_create_f_fontItalic_c0 ()) +
  gsi::Methods(_create_f_fontKerning_c0 ()) +
  gsi::Methods(_create_f_fontLetterSpacing_c0 ()) +
  gsi::Methods(_create_f_fontOverline_c0 ()) +
  gsi::Methods(_create_f_fontPointSize_c0 ()) +
  gsi::Methods(_create_f_fontStrikeOut_c0 ()) +
  gsi::Methods(_create_f_fontStyleHint_c0 ()) +
  gsi::Methods(_create_f_fontStyleStrategy_c0 ()) +
  gsi::Methods(_create_f_fontUnderline_c0 ()) +
  gsi::Methods(_create_f_fontWeight_c0 ()) +
  gsi::Methods(_create_f_fontWordSpacing_c0 ()) +
  gsi::Methods(_create_f_isAnchor_c0 ()) +
  gsi::Methods(_create_f_isValid_c0 ()) +
  gsi::Methods(_create_f_setAnchor_864 ()) +
  gsi::Methods(_create_f_setAnchorHref_2025 ()) +
  gsi::Methods(_create_f_setAnchorName_2025 ()) +
  gsi::Methods(_create_f_setAnchorNames_2437 ()) +
  gsi::Methods(_create_f_setFont_1801 ()) +
  gsi::Methods(_create_f_setFontCapitalization_2508 ()) +
  gsi::Methods(_create_f_setFontFamily_2025 ()) +
  gsi::Methods(_create_f_setFontFixedPitch_864 ()) +
  gsi::Methods(_create_f_setFontItalic_864 ()) +
  gsi::Methods(_create_f_setFontKerning_864 ()) +
  gsi::Methods(_create_f_setFontLetterSpacing_1071 ()) +
  gsi::Methods(_create_f_setFontOverline_864 ()) +
  gsi::Methods(_create_f_setFontPointSize_1071 ()) +
  gsi::Methods(_create_f_setFontStrikeOut_864 ()) +
  gsi::Methods(_create_f_setFontStyleHint_4284 ()) +
  gsi::Methods(_create_f_setFontStyleStrategy_2420 ()) +
  gsi::Methods(_create_f_setFontUnderline_864 ()) +
  gsi::Methods(_create_f_setFontWeight_767 ()) +
  gsi::Methods(_create_f_setFontWordSpacing_1071 ()) +
  gsi::Methods(_create_f_setTableCellColumnSpan_767 ()) +
  gsi::Methods(_create_f_setTableCellRowSpan_767 ()) +
  gsi::Methods(_create_f_setTextOutline_1685 ()) +
  gsi::Methods(_create_f_setToolTip_2025 ()) +
  gsi::Methods(_create_f_setUnderlineColor_1905 ()) +
  gsi::Methods(_create_f_setUnderlineStyle_3516 ()) +
  gsi::Methods(_create_f_setVerticalAlignment_3806 ()) +
  gsi::Methods(_create_f_tableCellColumnSpan_c0 ()) +
  gsi::Methods(_create_f_tableCellRowSpan_c0 ()) +
  gsi::Methods(_create_f_textOutline_c0 ()) +
  gsi::Methods(_create_f_toolTip_c0 ()) +
  gsi::Methods(_create_f_underlineColor_c0 ()) +
  gsi::Methods(_create_f_underlineStyle_c0 ()) +
  gsi::Methods(_create_f_verticalAlignment_c0 ()),
  "@qt\n@brief Binding of QTextCharFormat");

}


//  Implementation of the enum wrapper class for QTextCharFormat::UnderlineStyle
namespace qt_gsi
{

static QTextCharFormat_UnderlineStyle_Enum *c_1_QTextCharFormat_UnderlineStyle_Enum () { return new QTextCharFormat_UnderlineStyle_Enum (QTextCharFormat::NoUnderline); }
static QTextCharFormat_UnderlineStyle_Enum *c_2_QTextCharFormat_UnderlineStyle_Enum () { return new QTextCharFormat_UnderlineStyle_Enum (QTextCharFormat::SingleUnderline); }
static QTextCharFormat_UnderlineStyle_Enum *c_3_QTextCharFormat_UnderlineStyle_Enum () { return new QTextCharFormat_UnderlineStyle_Enum (QTextCharFormat::DashUnderline); }
static QTextCharFormat_UnderlineStyle_Enum *c_4_QTextCharFormat_UnderlineStyle_Enum () { return new QTextCharFormat_UnderlineStyle_Enum (QTextCharFormat::DotLine); }
static QTextCharFormat_UnderlineStyle_Enum *c_5_QTextCharFormat_UnderlineStyle_Enum () { return new QTextCharFormat_UnderlineStyle_Enum (QTextCharFormat::DashDotLine); }
static QTextCharFormat_UnderlineStyle_Enum *c_6_QTextCharFormat_UnderlineStyle_Enum () { return new QTextCharFormat_UnderlineStyle_Enum (QTextCharFormat::DashDotDotLine); }
static QTextCharFormat_UnderlineStyle_Enum *c_7_QTextCharFormat_UnderlineStyle_Enum () { return new QTextCharFormat_UnderlineStyle_Enum (QTextCharFormat::WaveUnderline); }
static QTextCharFormat_UnderlineStyle_Enum *c_8_QTextCharFormat_UnderlineStyle_Enum () { return new QTextCharFormat_UnderlineStyle_Enum (QTextCharFormat::SpellCheckUnderline); }

static gsi::Methods mkdefs_QTextCharFormat_UnderlineStyle () {
  return
    gsi::constant ("NoUnderline", &qt_gsi::c_1_QTextCharFormat_UnderlineStyle_Enum, "@brief Enum constant QTextCharFormat::NoUnderline") +
    gsi::constant ("SingleUnderline", &qt_gsi::c_2_QTextCharFormat_UnderlineStyle_Enum, "@brief Enum constant QTextCharFormat::SingleUnderline") +
    gsi::constant ("DashUnderline", &qt_gsi::c_3_QTextCharFormat_UnderlineStyle_Enum, "@brief Enum constant QTextCharFormat::DashUnderline") +
    gsi::constant ("DotLine", &qt_gsi::c_4_QTextCharFormat_UnderlineStyle_Enum, "@brief Enum constant QTextCharFormat::DotLine") +
    gsi::constant ("DashDotLine", &qt_gsi::c_5_QTextCharFormat_UnderlineStyle_Enum, "@brief Enum constant QTextCharFormat::DashDotLine") +
    gsi::constant ("DashDotDotLine", &qt_gsi::c_6_QTextCharFormat_UnderlineStyle_Enum, "@brief Enum constant QTextCharFormat::DashDotDotLine") +
    gsi::constant ("WaveUnderline", &qt_gsi::c_7_QTextCharFormat_UnderlineStyle_Enum, "@brief Enum constant QTextCharFormat::WaveUnderline") +
    gsi::constant ("SpellCheckUnderline", &qt_gsi::c_8_QTextCharFormat_UnderlineStyle_Enum, "@brief Enum constant QTextCharFormat::SpellCheckUnderline");
}

static std::string to_s_QTextCharFormat_UnderlineStyle_Enum (const QTextCharFormat_UnderlineStyle_Enum *e)
{
  if (e->value () == QTextCharFormat::NoUnderline) { return tl::sprintf ("NoUnderline (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTextCharFormat::SingleUnderline) { return tl::sprintf ("SingleUnderline (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTextCharFormat::DashUnderline) { return tl::sprintf ("DashUnderline (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTextCharFormat::DotLine) { return tl::sprintf ("DotLine (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTextCharFormat::DashDotLine) { return tl::sprintf ("DashDotLine (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTextCharFormat::DashDotDotLine) { return tl::sprintf ("DashDotDotLine (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTextCharFormat::WaveUnderline) { return tl::sprintf ("WaveUnderline (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTextCharFormat::SpellCheckUnderline) { return tl::sprintf ("SpellCheckUnderline (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QTextCharFormat_UnderlineStyle_Enum (const QTextCharFormat_UnderlineStyle_Enum *e)
{
  return (unsigned int) e->value ();
}

static QTextCharFormat_UnderlineStyle_Enum *from_i_QTextCharFormat_UnderlineStyle_Enum (unsigned int i)
{
  return new QTextCharFormat_UnderlineStyle_Enum ((QTextCharFormat::UnderlineStyle) i);
}

static bool equalQTextCharFormat_UnderlineStyle_Enum (const QTextCharFormat_UnderlineStyle_Enum *e, QTextCharFormat_UnderlineStyle_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QTextCharFormat_UnderlineStyle_Enum (const QTextCharFormat_UnderlineStyle_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QTextCharFormat_UnderlineStyle_Enums oropQTextCharFormat_UnderlineStyle_Enums (const QTextCharFormat_UnderlineStyle_Enums *e, const QTextCharFormat_UnderlineStyle_Enums &d)
{
  return e->flags () | d.flags ();
}

static QTextCharFormat_UnderlineStyle_Enums andopQTextCharFormat_UnderlineStyle_Enums (const QTextCharFormat_UnderlineStyle_Enums *e, const QTextCharFormat_UnderlineStyle_Enums &d)
{
  return e->flags () & d.flags ();
}

static QTextCharFormat_UnderlineStyle_Enums xoropQTextCharFormat_UnderlineStyle_Enums (const QTextCharFormat_UnderlineStyle_Enums *e, const QTextCharFormat_UnderlineStyle_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QTextCharFormat_UnderlineStyle_Enums (const QTextCharFormat_UnderlineStyle_Enums *e)
{
  std::string l;
  if (e->testFlag (QTextCharFormat::NoUnderline)) { if (!l.empty ()) l += "|"; l += "NoUnderline"; }
  if (e->testFlag (QTextCharFormat::SingleUnderline)) { if (!l.empty ()) l += "|"; l += "SingleUnderline"; }
  if (e->testFlag (QTextCharFormat::DashUnderline)) { if (!l.empty ()) l += "|"; l += "DashUnderline"; }
  if (e->testFlag (QTextCharFormat::DotLine)) { if (!l.empty ()) l += "|"; l += "DotLine"; }
  if (e->testFlag (QTextCharFormat::DashDotLine)) { if (!l.empty ()) l += "|"; l += "DashDotLine"; }
  if (e->testFlag (QTextCharFormat::DashDotDotLine)) { if (!l.empty ()) l += "|"; l += "DashDotDotLine"; }
  if (e->testFlag (QTextCharFormat::WaveUnderline)) { if (!l.empty ()) l += "|"; l += "WaveUnderline"; }
  if (e->testFlag (QTextCharFormat::SpellCheckUnderline)) { if (!l.empty ()) l += "|"; l += "SpellCheckUnderline"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QTextCharFormat_UnderlineStyle_Enums (const QTextCharFormat_UnderlineStyle_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QTextCharFormat_UnderlineStyle_Enums (const QTextCharFormat_UnderlineStyle_Enums *e, const QTextCharFormat_UnderlineStyle_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QTextCharFormat_UnderlineStyle_Enums> decl_QTextCharFormat_UnderlineStyle_Enums ("QTextCharFormat_QFlags_UnderlineStyle",
  gsi::method_ext ("|", &qt_gsi::oropQTextCharFormat_UnderlineStyle_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQTextCharFormat_UnderlineStyle_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQTextCharFormat_UnderlineStyle_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QTextCharFormat_UnderlineStyle_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QTextCharFormat_UnderlineStyle_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QTextCharFormat_UnderlineStyle_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QTextCharFormat::UnderlineStyle> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QTextCharFormat_UnderlineStyle_Enum> decl_QTextCharFormat_UnderlineStyle_Enum (decl_QTextCharFormat_UnderlineStyle_Enums, "QTextCharFormat_UnderlineStyle",
  qt_gsi::mkdefs_QTextCharFormat_UnderlineStyle () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QTextCharFormat_UnderlineStyle_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QTextCharFormat_UnderlineStyle_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQTextCharFormat_UnderlineStyle_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QTextCharFormat_UnderlineStyle_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QTextCharFormat_UnderlineStyle_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QTextCharFormat::UnderlineStyle enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QTextCharFormat> inject_QTextCharFormat_UnderlineStyle_Enum_in_parent (qt_gsi::mkdefs_QTextCharFormat_UnderlineStyle ());
static gsi::ClassExt<QTextCharFormat> decl_QTextCharFormat_UnderlineStyle_Enum_as_child (decl_QTextCharFormat_UnderlineStyle_Enum, "UnderlineStyle");

}


//  Implementation of the enum wrapper class for QTextCharFormat::VerticalAlignment
namespace qt_gsi
{

static QTextCharFormat_VerticalAlignment_Enum *c_1_QTextCharFormat_VerticalAlignment_Enum () { return new QTextCharFormat_VerticalAlignment_Enum (QTextCharFormat::AlignNormal); }
static QTextCharFormat_VerticalAlignment_Enum *c_2_QTextCharFormat_VerticalAlignment_Enum () { return new QTextCharFormat_VerticalAlignment_Enum (QTextCharFormat::AlignSuperScript); }
static QTextCharFormat_VerticalAlignment_Enum *c_3_QTextCharFormat_VerticalAlignment_Enum () { return new QTextCharFormat_VerticalAlignment_Enum (QTextCharFormat::AlignSubScript); }
static QTextCharFormat_VerticalAlignment_Enum *c_4_QTextCharFormat_VerticalAlignment_Enum () { return new QTextCharFormat_VerticalAlignment_Enum (QTextCharFormat::AlignMiddle); }
static QTextCharFormat_VerticalAlignment_Enum *c_5_QTextCharFormat_VerticalAlignment_Enum () { return new QTextCharFormat_VerticalAlignment_Enum (QTextCharFormat::AlignTop); }
static QTextCharFormat_VerticalAlignment_Enum *c_6_QTextCharFormat_VerticalAlignment_Enum () { return new QTextCharFormat_VerticalAlignment_Enum (QTextCharFormat::AlignBottom); }

static gsi::Methods mkdefs_QTextCharFormat_VerticalAlignment () {
  return
    gsi::constant ("AlignNormal", &qt_gsi::c_1_QTextCharFormat_VerticalAlignment_Enum, "@brief Enum constant QTextCharFormat::AlignNormal") +
    gsi::constant ("AlignSuperScript", &qt_gsi::c_2_QTextCharFormat_VerticalAlignment_Enum, "@brief Enum constant QTextCharFormat::AlignSuperScript") +
    gsi::constant ("AlignSubScript", &qt_gsi::c_3_QTextCharFormat_VerticalAlignment_Enum, "@brief Enum constant QTextCharFormat::AlignSubScript") +
    gsi::constant ("AlignMiddle", &qt_gsi::c_4_QTextCharFormat_VerticalAlignment_Enum, "@brief Enum constant QTextCharFormat::AlignMiddle") +
    gsi::constant ("AlignTop", &qt_gsi::c_5_QTextCharFormat_VerticalAlignment_Enum, "@brief Enum constant QTextCharFormat::AlignTop") +
    gsi::constant ("AlignBottom", &qt_gsi::c_6_QTextCharFormat_VerticalAlignment_Enum, "@brief Enum constant QTextCharFormat::AlignBottom");
}

static std::string to_s_QTextCharFormat_VerticalAlignment_Enum (const QTextCharFormat_VerticalAlignment_Enum *e)
{
  if (e->value () == QTextCharFormat::AlignNormal) { return tl::sprintf ("AlignNormal (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTextCharFormat::AlignSuperScript) { return tl::sprintf ("AlignSuperScript (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTextCharFormat::AlignSubScript) { return tl::sprintf ("AlignSubScript (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTextCharFormat::AlignMiddle) { return tl::sprintf ("AlignMiddle (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTextCharFormat::AlignTop) { return tl::sprintf ("AlignTop (%u)", (unsigned int) e->value ()); }
  if (e->value () == QTextCharFormat::AlignBottom) { return tl::sprintf ("AlignBottom (%u)", (unsigned int) e->value ()); }
  return std::string ("(not a valid enum evalue)");
}

static unsigned int to_i_QTextCharFormat_VerticalAlignment_Enum (const QTextCharFormat_VerticalAlignment_Enum *e)
{
  return (unsigned int) e->value ();
}

static QTextCharFormat_VerticalAlignment_Enum *from_i_QTextCharFormat_VerticalAlignment_Enum (unsigned int i)
{
  return new QTextCharFormat_VerticalAlignment_Enum ((QTextCharFormat::VerticalAlignment) i);
}

static bool equalQTextCharFormat_VerticalAlignment_Enum (const QTextCharFormat_VerticalAlignment_Enum *e, QTextCharFormat_VerticalAlignment_Enum d)
{
  return e->value () == d.value ();
}

static bool equal2QTextCharFormat_VerticalAlignment_Enum (const QTextCharFormat_VerticalAlignment_Enum *e, unsigned int i)
{
  return (unsigned int) e->value () == i;
}

static QTextCharFormat_VerticalAlignment_Enums oropQTextCharFormat_VerticalAlignment_Enums (const QTextCharFormat_VerticalAlignment_Enums *e, const QTextCharFormat_VerticalAlignment_Enums &d)
{
  return e->flags () | d.flags ();
}

static QTextCharFormat_VerticalAlignment_Enums andopQTextCharFormat_VerticalAlignment_Enums (const QTextCharFormat_VerticalAlignment_Enums *e, const QTextCharFormat_VerticalAlignment_Enums &d)
{
  return e->flags () & d.flags ();
}

static QTextCharFormat_VerticalAlignment_Enums xoropQTextCharFormat_VerticalAlignment_Enums (const QTextCharFormat_VerticalAlignment_Enums *e, const QTextCharFormat_VerticalAlignment_Enums &d)
{
  return e->flags () ^ d.flags ();
}

static std::string to_s_QTextCharFormat_VerticalAlignment_Enums (const QTextCharFormat_VerticalAlignment_Enums *e)
{
  std::string l;
  if (e->testFlag (QTextCharFormat::AlignNormal)) { if (!l.empty ()) l += "|"; l += "AlignNormal"; }
  if (e->testFlag (QTextCharFormat::AlignSuperScript)) { if (!l.empty ()) l += "|"; l += "AlignSuperScript"; }
  if (e->testFlag (QTextCharFormat::AlignSubScript)) { if (!l.empty ()) l += "|"; l += "AlignSubScript"; }
  if (e->testFlag (QTextCharFormat::AlignMiddle)) { if (!l.empty ()) l += "|"; l += "AlignMiddle"; }
  if (e->testFlag (QTextCharFormat::AlignTop)) { if (!l.empty ()) l += "|"; l += "AlignTop"; }
  if (e->testFlag (QTextCharFormat::AlignBottom)) { if (!l.empty ()) l += "|"; l += "AlignBottom"; }
  return tl::sprintf ("%u (%s)", (unsigned int) (e->flags ()), l);
}

static int to_i_QTextCharFormat_VerticalAlignment_Enums (const QTextCharFormat_VerticalAlignment_Enums *e)
{
  return int (e->flags ());
}

static bool testFlag_QTextCharFormat_VerticalAlignment_Enums (const QTextCharFormat_VerticalAlignment_Enums *e, const QTextCharFormat_VerticalAlignment_Enum &d)
{
  return e->flags ().testFlag (d.value ());
}

}

namespace gsi
{

//  Declarations for QFlags<enum> wrapper class
gsi::Class<qt_gsi::QTextCharFormat_VerticalAlignment_Enums> decl_QTextCharFormat_VerticalAlignment_Enums ("QTextCharFormat_QFlags_VerticalAlignment",
  gsi::method_ext ("|", &qt_gsi::oropQTextCharFormat_VerticalAlignment_Enums, gsi::arg ("other"), "@brief 'or' operator between two flag sets") +
  gsi::method_ext ("&", &qt_gsi::andopQTextCharFormat_VerticalAlignment_Enums, gsi::arg ("other"), "@brief 'and' operator between two flag sets") +
  gsi::method_ext ("^", &qt_gsi::xoropQTextCharFormat_VerticalAlignment_Enums, gsi::arg ("other"), "@brief 'xor' operator between two flag sets") +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QTextCharFormat_VerticalAlignment_Enums, "@brief Converts the flag set to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QTextCharFormat_VerticalAlignment_Enums, "@brief Returns the integer value encoding the flag set") +
  gsi::method_ext ("testFlag", &qt_gsi::testFlag_QTextCharFormat_VerticalAlignment_Enums, gsi::arg ("flag"), "@brief Tests whether the flag is contained in the flag set"),
  "@qt\n@brief This class represents the QFlags<QTextCharFormat::VerticalAlignment> flag set");

//  Declarations for enum wrapper class
gsi::Class<qt_gsi::QTextCharFormat_VerticalAlignment_Enum> decl_QTextCharFormat_VerticalAlignment_Enum (decl_QTextCharFormat_VerticalAlignment_Enums, "QTextCharFormat_VerticalAlignment",
  qt_gsi::mkdefs_QTextCharFormat_VerticalAlignment () +
  gsi::method_ext ("to_s|inspect", &qt_gsi::to_s_QTextCharFormat_VerticalAlignment_Enum, "@brief Converts the enum class to a string") +
  gsi::method_ext ("to_i", &qt_gsi::to_i_QTextCharFormat_VerticalAlignment_Enum, "@brief Converts the enum class to an integer") +
  gsi::method_ext ("==", &qt_gsi::equalQTextCharFormat_VerticalAlignment_Enum, gsi::arg ("other"), "@brief Compares the enum class against an enum of it's own type") +
  gsi::method_ext ("==", &qt_gsi::equal2QTextCharFormat_VerticalAlignment_Enum, gsi::arg ("other"), "@brief Compares the enum class against an integer") +
  gsi::constructor ("new", &qt_gsi::from_i_QTextCharFormat_VerticalAlignment_Enum, gsi::arg ("value"), "@brief Creates the enum object from an integer"),
  "@qt\n@brief This class represents the QTextCharFormat::VerticalAlignment enum");

//  Inject the declarations into the parent
static gsi::ClassExt<QTextCharFormat> inject_QTextCharFormat_VerticalAlignment_Enum_in_parent (qt_gsi::mkdefs_QTextCharFormat_VerticalAlignment ());
static gsi::ClassExt<QTextCharFormat> decl_QTextCharFormat_VerticalAlignment_Enum_as_child (decl_QTextCharFormat_VerticalAlignment_Enum, "VerticalAlignment");

}

