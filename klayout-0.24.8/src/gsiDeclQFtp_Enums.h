
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQFtp_Enums.h 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#ifndef _HDR_gsiDeclQFtp_Enums
#define _HDR_gsiDeclQFtp_Enums

#include <QtCore/QFlags>

namespace qt_gsi
{

//  Wrapper class for QFlags<enum QFtp::Command>
class QFtp_Command_Enums : public QFlags<enum QFtp::Command> {
public:
  QFtp_Command_Enums () : m_flags () { }
  QFtp_Command_Enums (enum QFtp::Command v) : m_flags (v) { }
  QFtp_Command_Enums (const QFlags<enum QFtp::Command> &v) : m_flags (v) { }
  QFlags<enum QFtp::Command> flags () const { return m_flags; }
private:
  QFlags<QFtp::Command> m_flags;
};

//  Wrapper class for enum QFtp::Command
class QFtp_Command_Enum : public QFtp_Command_Enums {
public:
  QFtp_Command_Enum () { }
  QFtp_Command_Enum (enum QFtp::Command v) : QFtp_Command_Enums (v) { }
  enum QFtp::Command value () const { return (enum QFtp::Command) flags ().operator int (); }
};

//  Converter for QFlags<enum QFtp::Command>
template <>
struct Converter<QFlags<enum QFtp::Command> >
{
public:
  typedef QFlags<enum QFtp::Command> source_type;
  typedef QFtp_Command_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QFtp::Command
template <>
struct Converter<enum QFtp::Command>
{
public:
  typedef enum QFtp::Command source_type;
  typedef QFtp_Command_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QFtp::Error>
class QFtp_Error_Enums : public QFlags<enum QFtp::Error> {
public:
  QFtp_Error_Enums () : m_flags () { }
  QFtp_Error_Enums (enum QFtp::Error v) : m_flags (v) { }
  QFtp_Error_Enums (const QFlags<enum QFtp::Error> &v) : m_flags (v) { }
  QFlags<enum QFtp::Error> flags () const { return m_flags; }
private:
  QFlags<QFtp::Error> m_flags;
};

//  Wrapper class for enum QFtp::Error
class QFtp_Error_Enum : public QFtp_Error_Enums {
public:
  QFtp_Error_Enum () { }
  QFtp_Error_Enum (enum QFtp::Error v) : QFtp_Error_Enums (v) { }
  enum QFtp::Error value () const { return (enum QFtp::Error) flags ().operator int (); }
};

//  Converter for QFlags<enum QFtp::Error>
template <>
struct Converter<QFlags<enum QFtp::Error> >
{
public:
  typedef QFlags<enum QFtp::Error> source_type;
  typedef QFtp_Error_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QFtp::Error
template <>
struct Converter<enum QFtp::Error>
{
public:
  typedef enum QFtp::Error source_type;
  typedef QFtp_Error_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QFtp::State>
class QFtp_State_Enums : public QFlags<enum QFtp::State> {
public:
  QFtp_State_Enums () : m_flags () { }
  QFtp_State_Enums (enum QFtp::State v) : m_flags (v) { }
  QFtp_State_Enums (const QFlags<enum QFtp::State> &v) : m_flags (v) { }
  QFlags<enum QFtp::State> flags () const { return m_flags; }
private:
  QFlags<QFtp::State> m_flags;
};

//  Wrapper class for enum QFtp::State
class QFtp_State_Enum : public QFtp_State_Enums {
public:
  QFtp_State_Enum () { }
  QFtp_State_Enum (enum QFtp::State v) : QFtp_State_Enums (v) { }
  enum QFtp::State value () const { return (enum QFtp::State) flags ().operator int (); }
};

//  Converter for QFlags<enum QFtp::State>
template <>
struct Converter<QFlags<enum QFtp::State> >
{
public:
  typedef QFlags<enum QFtp::State> source_type;
  typedef QFtp_State_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QFtp::State
template <>
struct Converter<enum QFtp::State>
{
public:
  typedef enum QFtp::State source_type;
  typedef QFtp_State_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QFtp::TransferMode>
class QFtp_TransferMode_Enums : public QFlags<enum QFtp::TransferMode> {
public:
  QFtp_TransferMode_Enums () : m_flags () { }
  QFtp_TransferMode_Enums (enum QFtp::TransferMode v) : m_flags (v) { }
  QFtp_TransferMode_Enums (const QFlags<enum QFtp::TransferMode> &v) : m_flags (v) { }
  QFlags<enum QFtp::TransferMode> flags () const { return m_flags; }
private:
  QFlags<QFtp::TransferMode> m_flags;
};

//  Wrapper class for enum QFtp::TransferMode
class QFtp_TransferMode_Enum : public QFtp_TransferMode_Enums {
public:
  QFtp_TransferMode_Enum () { }
  QFtp_TransferMode_Enum (enum QFtp::TransferMode v) : QFtp_TransferMode_Enums (v) { }
  enum QFtp::TransferMode value () const { return (enum QFtp::TransferMode) flags ().operator int (); }
};

//  Converter for QFlags<enum QFtp::TransferMode>
template <>
struct Converter<QFlags<enum QFtp::TransferMode> >
{
public:
  typedef QFlags<enum QFtp::TransferMode> source_type;
  typedef QFtp_TransferMode_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QFtp::TransferMode
template <>
struct Converter<enum QFtp::TransferMode>
{
public:
  typedef enum QFtp::TransferMode source_type;
  typedef QFtp_TransferMode_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum QFtp::TransferType>
class QFtp_TransferType_Enums : public QFlags<enum QFtp::TransferType> {
public:
  QFtp_TransferType_Enums () : m_flags () { }
  QFtp_TransferType_Enums (enum QFtp::TransferType v) : m_flags (v) { }
  QFtp_TransferType_Enums (const QFlags<enum QFtp::TransferType> &v) : m_flags (v) { }
  QFlags<enum QFtp::TransferType> flags () const { return m_flags; }
private:
  QFlags<QFtp::TransferType> m_flags;
};

//  Wrapper class for enum QFtp::TransferType
class QFtp_TransferType_Enum : public QFtp_TransferType_Enums {
public:
  QFtp_TransferType_Enum () { }
  QFtp_TransferType_Enum (enum QFtp::TransferType v) : QFtp_TransferType_Enums (v) { }
  enum QFtp::TransferType value () const { return (enum QFtp::TransferType) flags ().operator int (); }
};

//  Converter for QFlags<enum QFtp::TransferType>
template <>
struct Converter<QFlags<enum QFtp::TransferType> >
{
public:
  typedef QFlags<enum QFtp::TransferType> source_type;
  typedef QFtp_TransferType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum QFtp::TransferType
template <>
struct Converter<enum QFtp::TransferType>
{
public:
  typedef enum QFtp::TransferType source_type;
  typedef QFtp_TransferType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Wrapper class for QFlags<enum Qt::ConnectionType>
class Qt_ConnectionType_Enums : public QFlags<enum Qt::ConnectionType> {
public:
  Qt_ConnectionType_Enums () : m_flags () { }
  Qt_ConnectionType_Enums (enum Qt::ConnectionType v) : m_flags (v) { }
  Qt_ConnectionType_Enums (const QFlags<enum Qt::ConnectionType> &v) : m_flags (v) { }
  QFlags<enum Qt::ConnectionType> flags () const { return m_flags; }
private:
  QFlags<Qt::ConnectionType> m_flags;
};

//  Wrapper class for enum Qt::ConnectionType
class Qt_ConnectionType_Enum : public Qt_ConnectionType_Enums {
public:
  Qt_ConnectionType_Enum () { }
  Qt_ConnectionType_Enum (enum Qt::ConnectionType v) : Qt_ConnectionType_Enums (v) { }
  enum Qt::ConnectionType value () const { return (enum Qt::ConnectionType) flags ().operator int (); }
};

//  Converter for QFlags<enum Qt::ConnectionType>
template <>
struct Converter<QFlags<enum Qt::ConnectionType> >
{
public:
  typedef QFlags<enum Qt::ConnectionType> source_type;
  typedef Qt_ConnectionType_Enums target_type;
  static source_type toq (const target_type &c) { return c.flags (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

//  Converter for enum Qt::ConnectionType
template <>
struct Converter<enum Qt::ConnectionType>
{
public:
  typedef enum Qt::ConnectionType source_type;
  typedef Qt_ConnectionType_Enum target_type;
  static source_type toq (const target_type &c) { return c.value (); }
  static target_type toc (const source_type &qc) { return target_type (qc); }
};

}

#endif
